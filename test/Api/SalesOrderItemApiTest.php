<?php
/**
 * SalesOrderItemApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace BeLenka\SAP\SalesOrder\Test\Api;

use \BeLenka\SAP\SalesOrder\Configuration;
use \BeLenka\SAP\SalesOrder\ApiException;
use \BeLenka\SAP\SalesOrder\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * SalesOrderItemApiTest Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SalesOrderItemApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet
     *
     * Reads the sales order item for an item billing plan..
     *
     */
    public function testASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemGet
     *
     * Reads all sales order items..
     *
     */
    public function testASalesOrderItemGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet
     *
     * Reads the sales order item for an item partner address..
     *
     */
    public function testASalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet
     *
     * Reads the sales order item for a partner function of a sales order item..
     *
     */
    public function testASalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemPost
     *
     * Creates a sales order item..
     *
     */
    public function testASalesOrderItemPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet
     *
     * Reads the sales order item for a pricing element..
     *
     */
    public function testASalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet
     *
     * Reads the sales order item for a related object..
     *
     */
    public function testASalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete
     *
     * Deletes a sales order item..
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet
     *
     * Reads a sales order item..
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch
     *
     * Updates a sales order item..
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet
     *
     * Reads the billing plan of a sales order item..
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet
     *
     * Reads the item partners of a specific sales order item..
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost
     *
     * Creates an item partner for a specific sales order item..
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet
     *
     * Get entities from related to_PrecedingProcFlowDocItem.
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet
     *
     * Reads the pricing element of a sales order item..
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost
     *
     * Creates a pricing element for a specific sales order item..
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet
     *
     * Reads the related object of a sales order item..
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost
     *
     * Creates a related object for a specific sales order item..
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet
     *
     * Reads the sales order header of a sales order item..
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet
     *
     * Reads the schedule lines of a sales order item..
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost
     *
     * Creates schedule lines for a sales order item..
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet
     *
     * Get entities from related to_SubsequentProcFlowDocItem.
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet
     *
     * Reads the text of a sales order item..
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost
     *
     * Creates a text for a specific sales order item..
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet
     *
     * Reads the sales order item for an item text..
     *
     */
    public function testASalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet
     *
     * Reads the sales order item data for a preceding item of a sales order..
     *
     */
    public function testASalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet
     *
     * Reads the sales order item data for a subsequent item of a sales order..
     *
     */
    public function testASalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToItemGet
     *
     * Reads all items of a sales order..
     *
     */
    public function testASalesOrderSalesOrderToItemGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToItemPost
     *
     * Creates a sales order item for a sales order..
     *
     */
    public function testASalesOrderSalesOrderToItemPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet
     *
     * Reads the sales order item for a billing plan item of this sales order item..
     *
     */
    public function testASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
