<?php
/**
 * SalesOrderHeaderApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace BeLenka\SAP\SalesOrder\Test\Api;

use \BeLenka\SAP\SalesOrder\Configuration;
use \BeLenka\SAP\SalesOrder\ApiException;
use \BeLenka\SAP\SalesOrder\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * SalesOrderHeaderApiTest Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SalesOrderHeaderApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for aSalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet
     *
     * Reads the sales order header for a billing plan item of a sales order..
     *
     */
    public function testASalesOrderBillingPlanItemSalesOrderSalesOrderBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToSalesOrderGet
     *
     * Reads the sales order header for a billing plan..
     *
     */
    public function testASalesOrderBillingPlanSalesOrderSalesOrderBillingPlanBillingPlanToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderGet
     *
     * Reads all sales order headers..
     *
     */
    public function testASalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderHeaderPartnerSalesOrderSalesOrderPartnerFunctionPartnerFunctionToSalesOrderGet
     *
     * Reads the sales order header for a header partner..
     *
     */
    public function testASalesOrderHeaderPartnerSalesOrderSalesOrderPartnerFunctionPartnerFunctionToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet
     *
     * Reads the sales order header for a pricing element..
     *
     */
    public function testASalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderGet
     *
     * Reads the sales order header for an item billing plan..
     *
     */
    public function testASalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderGet
     *
     * Get related to_SalesOrder.
     *
     */
    public function testASalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderGet
     *
     * Reads the sales order header of a partner function of a sales order item..
     *
     */
    public function testASalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet
     *
     * Reads the sales order header for a pricing element..
     *
     */
    public function testASalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderGet
     *
     * Reads the sales order header for a related object of a sales order item..
     *
     */
    public function testASalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet
     *
     * Reads the sales order header of a sales order item..
     *
     */
    public function testASalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderGet
     *
     * Reads the sales order header for a text of a sales order item..
     *
     */
    public function testASalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGet
     *
     * Reads the sales order header data of a preceding item of a sales order..
     *
     */
    public function testASalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGet
     *
     * Reads the sales order header data for a subsequent item of a sales order..
     *
     */
    public function testASalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderPartnerAddressSalesOrderSalesOrderPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderGet
     *
     * Reads the sales order for a header partner address..
     *
     */
    public function testASalesOrderPartnerAddressSalesOrderSalesOrderPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderPost
     *
     * Creates a sales order..
     *
     */
    public function testASalesOrderPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderPrecdgProcFlowSalesOrderSalesOrderDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGet
     *
     * Reads the sales order header data for a preceding document of a sales order..
     *
     */
    public function testASalesOrderPrecdgProcFlowSalesOrderSalesOrderDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderRelatedObjectSalesOrderSalesOrderSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderGet
     *
     * Reads the sales order header for a related object..
     *
     */
    public function testASalesOrderRelatedObjectSalesOrderSalesOrderSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderDelete
     *
     * Deletes a sales order..
     *
     */
    public function testASalesOrderSalesOrderDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderGet
     *
     * Reads the header of a sales order..
     *
     */
    public function testASalesOrderSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderPatch
     *
     * Updates a sales order..
     *
     */
    public function testASalesOrderSalesOrderPatch()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToBillingPlanGet
     *
     * Reads the billing plan of a sales order..
     *
     */
    public function testASalesOrderSalesOrderToBillingPlanGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToItemGet
     *
     * Reads all items of a sales order..
     *
     */
    public function testASalesOrderSalesOrderToItemGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToItemPost
     *
     * Creates a sales order item for a sales order..
     *
     */
    public function testASalesOrderSalesOrderToItemPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToPartnerGet
     *
     * Reads the header partners of a sales order..
     *
     */
    public function testASalesOrderSalesOrderToPartnerGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToPartnerPost
     *
     * Creates a header partner for a sales order..
     *
     */
    public function testASalesOrderSalesOrderToPartnerPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToPaymentPlanItemDetailsGet
     *
     * Reads the header payment plan of a specific sales order..
     *
     */
    public function testASalesOrderSalesOrderToPaymentPlanItemDetailsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToPaymentPlanItemDetailsPost
     *
     * Creates a header payment plan for a specific sales order..
     *
     */
    public function testASalesOrderSalesOrderToPaymentPlanItemDetailsPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToPrecedingProcFlowDocGet
     *
     * Get entities from related to_PrecedingProcFlowDoc.
     *
     */
    public function testASalesOrderSalesOrderToPrecedingProcFlowDocGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToPricingElementGet
     *
     * Reads the pricing element of a sales order..
     *
     */
    public function testASalesOrderSalesOrderToPricingElementGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToPricingElementPost
     *
     * Creates a header pricing element for a specific sales order..
     *
     */
    public function testASalesOrderSalesOrderToPricingElementPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToRelatedObjectGet
     *
     * Reads the related objects of a sales order header..
     *
     */
    public function testASalesOrderSalesOrderToRelatedObjectGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToRelatedObjectPost
     *
     * Creates a related object for a sales order header..
     *
     */
    public function testASalesOrderSalesOrderToRelatedObjectPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToSubsequentProcFlowDocGet
     *
     * Get entities from related to_SubsequentProcFlowDoc.
     *
     */
    public function testASalesOrderSalesOrderToSubsequentProcFlowDocGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToTextGet
     *
     * Reads the header texts of a sales order..
     *
     */
    public function testASalesOrderSalesOrderToTextGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSalesOrderToTextPost
     *
     * Creates a header text for a sales order..
     *
     */
    public function testASalesOrderSalesOrderToTextPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderSubsqntProcFlowSalesOrderSalesOrderDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGet
     *
     * Reads the sales order header data for a subsequent document of a sales order..
     *
     */
    public function testASalesOrderSubsqntProcFlowSalesOrderSalesOrderDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSalesOrderTextSalesOrderSalesOrderLanguageLanguageLongTextIDLongTextIDToSalesOrderGet
     *
     * Reads the sales order header for a header text..
     *
     */
    public function testASalesOrderTextSalesOrderSalesOrderLanguageLanguageLongTextIDLongTextIDToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSlsOrdPaymentPlanItemDetailsSalesOrderSalesOrderPaymentPlanItemPaymentPlanItemToSalesOrderGet
     *
     * Reads the sales order header for a payment plan item..
     *
     */
    public function testASlsOrdPaymentPlanItemDetailsSalesOrderSalesOrderPaymentPlanItemPaymentPlanItemToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet
     *
     * Reads the sales order header for an item billing plan item..
     *
     */
    public function testASlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
