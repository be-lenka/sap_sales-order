<?php
/**
 * APISALESORDERSRVASalesOrderItemType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\SalesOrder\Model;

use \ArrayAccess;
use \BeLenka\SAP\SalesOrder\ObjectSerializer;

/**
 * APISALESORDERSRVASalesOrderItemType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APISALESORDERSRVASalesOrderItemType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_SALES_ORDER_SRV.A_SalesOrderItemType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sales_order' => 'string',
        'sales_order_item' => 'string',
        'higher_level_item' => 'string',
        'higher_level_item_usage' => 'string',
        'sales_order_item_category' => 'string',
        'sales_order_item_text' => 'string',
        'purchase_order_by_customer' => 'string',
        'purchase_order_by_ship_to_party' => 'string',
        'underlying_purchase_order_item' => 'string',
        'external_item_id' => 'string',
        'material' => 'string',
        'material_by_customer' => 'string',
        'pricing_date' => 'string',
        'pricing_reference_material' => 'string',
        'billing_plan' => 'string',
        'requested_quantity' => 'float',
        'requested_quantity_unit' => 'string',
        'requested_quantity_sap_unit' => 'string',
        'requested_quantity_iso_unit' => 'string',
        'order_quantity_unit' => 'string',
        'order_quantity_sap_unit' => 'string',
        'order_quantity_iso_unit' => 'string',
        'confd_deliv_qty_in_order_qty_unit' => 'float',
        'item_gross_weight' => 'float',
        'item_net_weight' => 'float',
        'item_weight_unit' => 'string',
        'item_weight_sap_unit' => 'string',
        'item_weight_iso_unit' => 'string',
        'item_volume' => 'float',
        'item_volume_unit' => 'string',
        'item_volume_sap_unit' => 'string',
        'item_volume_iso_unit' => 'string',
        'transaction_currency' => 'string',
        'net_amount' => 'float',
        'total_sd_doc_reference_status' => 'string',
        'sd_doc_reference_status' => 'string',
        'material_substitution_reason' => 'string',
        'material_group' => 'string',
        'material_pricing_group' => 'string',
        'additional_material_group1' => 'string',
        'additional_material_group2' => 'string',
        'additional_material_group3' => 'string',
        'additional_material_group4' => 'string',
        'additional_material_group5' => 'string',
        'billing_document_date' => 'string',
        'contract_account' => 'string',
        'additional_value_days' => 'string',
        'services_rendered_date' => 'string',
        'batch' => 'string',
        'production_plant' => 'string',
        'original_plant' => 'string',
        'altv_bsd_conf_substitution_status' => 'string',
        'storage_location' => 'string',
        'delivery_group' => 'string',
        'shipping_point' => 'string',
        'shipping_type' => 'string',
        'delivery_priority' => 'string',
        'delivery_date_quantity_is_fixed' => 'bool',
        'delivery_date_type_rule' => 'string',
        'incoterms_classification' => 'string',
        'incoterms_transfer_location' => 'string',
        'incoterms_location1' => 'string',
        'incoterms_location2' => 'string',
        'tax_amount' => 'float',
        'product_tax_classification1' => 'string',
        'product_tax_classification2' => 'string',
        'product_tax_classification3' => 'string',
        'product_tax_classification4' => 'string',
        'product_tax_classification5' => 'string',
        'product_tax_classification6' => 'string',
        'product_tax_classification7' => 'string',
        'product_tax_classification8' => 'string',
        'product_tax_classification9' => 'string',
        'matl_account_assignment_group' => 'string',
        'cost_amount' => 'float',
        'customer_payment_terms' => 'string',
        'fixed_value_date' => 'string',
        'customer_group' => 'string',
        'sales_document_rjcn_reason' => 'string',
        'item_billing_block_reason' => 'string',
        'sls_doc_is_rlvt_for_proof_of_deliv' => 'bool',
        'wbs_element' => 'string',
        'profit_center' => 'string',
        'accounting_exchange_rate' => 'float',
        'reference_sd_document' => 'string',
        'reference_sd_document_item' => 'string',
        'sd_process_status' => 'string',
        'delivery_status' => 'string',
        'order_related_billing_status' => 'string',
        'subtotal1_amount' => 'float',
        'subtotal2_amount' => 'float',
        'subtotal3_amount' => 'float',
        'subtotal4_amount' => 'float',
        'subtotal5_amount' => 'float',
        'subtotal6_amount' => 'float',
        'to_billing_plan' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemBillingPlanType',
        'to_partner' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToPartner',
        'to_preceding_proc_flow_doc_item' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToPrecedingProcFlowDocItem',
        'to_pricing_element' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToPricingElement',
        'to_related_object' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToRelatedObject',
        'to_sales_order' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderType',
        'to_schedule_line' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToScheduleLine',
        'to_subsequent_proc_flow_doc_item' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToSubsequentProcFlowDocItem',
        'to_text' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToText'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sales_order' => null,
        'sales_order_item' => null,
        'higher_level_item' => null,
        'higher_level_item_usage' => null,
        'sales_order_item_category' => null,
        'sales_order_item_text' => null,
        'purchase_order_by_customer' => null,
        'purchase_order_by_ship_to_party' => null,
        'underlying_purchase_order_item' => null,
        'external_item_id' => null,
        'material' => null,
        'material_by_customer' => null,
        'pricing_date' => null,
        'pricing_reference_material' => null,
        'billing_plan' => null,
        'requested_quantity' => 'decimal',
        'requested_quantity_unit' => null,
        'requested_quantity_sap_unit' => null,
        'requested_quantity_iso_unit' => null,
        'order_quantity_unit' => null,
        'order_quantity_sap_unit' => null,
        'order_quantity_iso_unit' => null,
        'confd_deliv_qty_in_order_qty_unit' => 'decimal',
        'item_gross_weight' => 'decimal',
        'item_net_weight' => 'decimal',
        'item_weight_unit' => null,
        'item_weight_sap_unit' => null,
        'item_weight_iso_unit' => null,
        'item_volume' => 'decimal',
        'item_volume_unit' => null,
        'item_volume_sap_unit' => null,
        'item_volume_iso_unit' => null,
        'transaction_currency' => null,
        'net_amount' => 'decimal',
        'total_sd_doc_reference_status' => null,
        'sd_doc_reference_status' => null,
        'material_substitution_reason' => null,
        'material_group' => null,
        'material_pricing_group' => null,
        'additional_material_group1' => null,
        'additional_material_group2' => null,
        'additional_material_group3' => null,
        'additional_material_group4' => null,
        'additional_material_group5' => null,
        'billing_document_date' => null,
        'contract_account' => null,
        'additional_value_days' => null,
        'services_rendered_date' => null,
        'batch' => null,
        'production_plant' => null,
        'original_plant' => null,
        'altv_bsd_conf_substitution_status' => null,
        'storage_location' => null,
        'delivery_group' => null,
        'shipping_point' => null,
        'shipping_type' => null,
        'delivery_priority' => null,
        'delivery_date_quantity_is_fixed' => null,
        'delivery_date_type_rule' => null,
        'incoterms_classification' => null,
        'incoterms_transfer_location' => null,
        'incoterms_location1' => null,
        'incoterms_location2' => null,
        'tax_amount' => 'decimal',
        'product_tax_classification1' => null,
        'product_tax_classification2' => null,
        'product_tax_classification3' => null,
        'product_tax_classification4' => null,
        'product_tax_classification5' => null,
        'product_tax_classification6' => null,
        'product_tax_classification7' => null,
        'product_tax_classification8' => null,
        'product_tax_classification9' => null,
        'matl_account_assignment_group' => null,
        'cost_amount' => 'decimal',
        'customer_payment_terms' => null,
        'fixed_value_date' => null,
        'customer_group' => null,
        'sales_document_rjcn_reason' => null,
        'item_billing_block_reason' => null,
        'sls_doc_is_rlvt_for_proof_of_deliv' => null,
        'wbs_element' => null,
        'profit_center' => null,
        'accounting_exchange_rate' => 'decimal',
        'reference_sd_document' => null,
        'reference_sd_document_item' => null,
        'sd_process_status' => null,
        'delivery_status' => null,
        'order_related_billing_status' => null,
        'subtotal1_amount' => 'decimal',
        'subtotal2_amount' => 'decimal',
        'subtotal3_amount' => 'decimal',
        'subtotal4_amount' => 'decimal',
        'subtotal5_amount' => 'decimal',
        'subtotal6_amount' => 'decimal',
        'to_billing_plan' => null,
        'to_partner' => null,
        'to_preceding_proc_flow_doc_item' => null,
        'to_pricing_element' => null,
        'to_related_object' => null,
        'to_sales_order' => null,
        'to_schedule_line' => null,
        'to_subsequent_proc_flow_doc_item' => null,
        'to_text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sales_order' => false,
		'sales_order_item' => false,
		'higher_level_item' => true,
		'higher_level_item_usage' => true,
		'sales_order_item_category' => true,
		'sales_order_item_text' => true,
		'purchase_order_by_customer' => true,
		'purchase_order_by_ship_to_party' => true,
		'underlying_purchase_order_item' => true,
		'external_item_id' => true,
		'material' => true,
		'material_by_customer' => true,
		'pricing_date' => true,
		'pricing_reference_material' => true,
		'billing_plan' => true,
		'requested_quantity' => true,
		'requested_quantity_unit' => true,
		'requested_quantity_sap_unit' => true,
		'requested_quantity_iso_unit' => true,
		'order_quantity_unit' => true,
		'order_quantity_sap_unit' => true,
		'order_quantity_iso_unit' => true,
		'confd_deliv_qty_in_order_qty_unit' => true,
		'item_gross_weight' => true,
		'item_net_weight' => true,
		'item_weight_unit' => true,
		'item_weight_sap_unit' => true,
		'item_weight_iso_unit' => true,
		'item_volume' => true,
		'item_volume_unit' => true,
		'item_volume_sap_unit' => true,
		'item_volume_iso_unit' => true,
		'transaction_currency' => true,
		'net_amount' => true,
		'total_sd_doc_reference_status' => true,
		'sd_doc_reference_status' => true,
		'material_substitution_reason' => true,
		'material_group' => true,
		'material_pricing_group' => true,
		'additional_material_group1' => true,
		'additional_material_group2' => true,
		'additional_material_group3' => true,
		'additional_material_group4' => true,
		'additional_material_group5' => true,
		'billing_document_date' => true,
		'contract_account' => true,
		'additional_value_days' => true,
		'services_rendered_date' => true,
		'batch' => true,
		'production_plant' => true,
		'original_plant' => true,
		'altv_bsd_conf_substitution_status' => true,
		'storage_location' => true,
		'delivery_group' => true,
		'shipping_point' => true,
		'shipping_type' => true,
		'delivery_priority' => true,
		'delivery_date_quantity_is_fixed' => true,
		'delivery_date_type_rule' => true,
		'incoterms_classification' => true,
		'incoterms_transfer_location' => true,
		'incoterms_location1' => true,
		'incoterms_location2' => true,
		'tax_amount' => true,
		'product_tax_classification1' => true,
		'product_tax_classification2' => true,
		'product_tax_classification3' => true,
		'product_tax_classification4' => true,
		'product_tax_classification5' => true,
		'product_tax_classification6' => true,
		'product_tax_classification7' => true,
		'product_tax_classification8' => true,
		'product_tax_classification9' => true,
		'matl_account_assignment_group' => true,
		'cost_amount' => true,
		'customer_payment_terms' => true,
		'fixed_value_date' => true,
		'customer_group' => true,
		'sales_document_rjcn_reason' => true,
		'item_billing_block_reason' => true,
		'sls_doc_is_rlvt_for_proof_of_deliv' => true,
		'wbs_element' => true,
		'profit_center' => true,
		'accounting_exchange_rate' => true,
		'reference_sd_document' => true,
		'reference_sd_document_item' => true,
		'sd_process_status' => true,
		'delivery_status' => true,
		'order_related_billing_status' => true,
		'subtotal1_amount' => true,
		'subtotal2_amount' => true,
		'subtotal3_amount' => true,
		'subtotal4_amount' => true,
		'subtotal5_amount' => true,
		'subtotal6_amount' => true,
		'to_billing_plan' => true,
		'to_partner' => false,
		'to_preceding_proc_flow_doc_item' => false,
		'to_pricing_element' => false,
		'to_related_object' => false,
		'to_sales_order' => false,
		'to_schedule_line' => false,
		'to_subsequent_proc_flow_doc_item' => false,
		'to_text' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sales_order' => 'SalesOrder',
        'sales_order_item' => 'SalesOrderItem',
        'higher_level_item' => 'HigherLevelItem',
        'higher_level_item_usage' => 'HigherLevelItemUsage',
        'sales_order_item_category' => 'SalesOrderItemCategory',
        'sales_order_item_text' => 'SalesOrderItemText',
        'purchase_order_by_customer' => 'PurchaseOrderByCustomer',
        'purchase_order_by_ship_to_party' => 'PurchaseOrderByShipToParty',
        'underlying_purchase_order_item' => 'UnderlyingPurchaseOrderItem',
        'external_item_id' => 'ExternalItemID',
        'material' => 'Material',
        'material_by_customer' => 'MaterialByCustomer',
        'pricing_date' => 'PricingDate',
        'pricing_reference_material' => 'PricingReferenceMaterial',
        'billing_plan' => 'BillingPlan',
        'requested_quantity' => 'RequestedQuantity',
        'requested_quantity_unit' => 'RequestedQuantityUnit',
        'requested_quantity_sap_unit' => 'RequestedQuantitySAPUnit',
        'requested_quantity_iso_unit' => 'RequestedQuantityISOUnit',
        'order_quantity_unit' => 'OrderQuantityUnit',
        'order_quantity_sap_unit' => 'OrderQuantitySAPUnit',
        'order_quantity_iso_unit' => 'OrderQuantityISOUnit',
        'confd_deliv_qty_in_order_qty_unit' => 'ConfdDelivQtyInOrderQtyUnit',
        'item_gross_weight' => 'ItemGrossWeight',
        'item_net_weight' => 'ItemNetWeight',
        'item_weight_unit' => 'ItemWeightUnit',
        'item_weight_sap_unit' => 'ItemWeightSAPUnit',
        'item_weight_iso_unit' => 'ItemWeightISOUnit',
        'item_volume' => 'ItemVolume',
        'item_volume_unit' => 'ItemVolumeUnit',
        'item_volume_sap_unit' => 'ItemVolumeSAPUnit',
        'item_volume_iso_unit' => 'ItemVolumeISOUnit',
        'transaction_currency' => 'TransactionCurrency',
        'net_amount' => 'NetAmount',
        'total_sd_doc_reference_status' => 'TotalSDDocReferenceStatus',
        'sd_doc_reference_status' => 'SDDocReferenceStatus',
        'material_substitution_reason' => 'MaterialSubstitutionReason',
        'material_group' => 'MaterialGroup',
        'material_pricing_group' => 'MaterialPricingGroup',
        'additional_material_group1' => 'AdditionalMaterialGroup1',
        'additional_material_group2' => 'AdditionalMaterialGroup2',
        'additional_material_group3' => 'AdditionalMaterialGroup3',
        'additional_material_group4' => 'AdditionalMaterialGroup4',
        'additional_material_group5' => 'AdditionalMaterialGroup5',
        'billing_document_date' => 'BillingDocumentDate',
        'contract_account' => 'ContractAccount',
        'additional_value_days' => 'AdditionalValueDays',
        'services_rendered_date' => 'ServicesRenderedDate',
        'batch' => 'Batch',
        'production_plant' => 'ProductionPlant',
        'original_plant' => 'OriginalPlant',
        'altv_bsd_conf_substitution_status' => 'AltvBsdConfSubstitutionStatus',
        'storage_location' => 'StorageLocation',
        'delivery_group' => 'DeliveryGroup',
        'shipping_point' => 'ShippingPoint',
        'shipping_type' => 'ShippingType',
        'delivery_priority' => 'DeliveryPriority',
        'delivery_date_quantity_is_fixed' => 'DeliveryDateQuantityIsFixed',
        'delivery_date_type_rule' => 'DeliveryDateTypeRule',
        'incoterms_classification' => 'IncotermsClassification',
        'incoterms_transfer_location' => 'IncotermsTransferLocation',
        'incoterms_location1' => 'IncotermsLocation1',
        'incoterms_location2' => 'IncotermsLocation2',
        'tax_amount' => 'TaxAmount',
        'product_tax_classification1' => 'ProductTaxClassification1',
        'product_tax_classification2' => 'ProductTaxClassification2',
        'product_tax_classification3' => 'ProductTaxClassification3',
        'product_tax_classification4' => 'ProductTaxClassification4',
        'product_tax_classification5' => 'ProductTaxClassification5',
        'product_tax_classification6' => 'ProductTaxClassification6',
        'product_tax_classification7' => 'ProductTaxClassification7',
        'product_tax_classification8' => 'ProductTaxClassification8',
        'product_tax_classification9' => 'ProductTaxClassification9',
        'matl_account_assignment_group' => 'MatlAccountAssignmentGroup',
        'cost_amount' => 'CostAmount',
        'customer_payment_terms' => 'CustomerPaymentTerms',
        'fixed_value_date' => 'FixedValueDate',
        'customer_group' => 'CustomerGroup',
        'sales_document_rjcn_reason' => 'SalesDocumentRjcnReason',
        'item_billing_block_reason' => 'ItemBillingBlockReason',
        'sls_doc_is_rlvt_for_proof_of_deliv' => 'SlsDocIsRlvtForProofOfDeliv',
        'wbs_element' => 'WBSElement',
        'profit_center' => 'ProfitCenter',
        'accounting_exchange_rate' => 'AccountingExchangeRate',
        'reference_sd_document' => 'ReferenceSDDocument',
        'reference_sd_document_item' => 'ReferenceSDDocumentItem',
        'sd_process_status' => 'SDProcessStatus',
        'delivery_status' => 'DeliveryStatus',
        'order_related_billing_status' => 'OrderRelatedBillingStatus',
        'subtotal1_amount' => 'Subtotal1Amount',
        'subtotal2_amount' => 'Subtotal2Amount',
        'subtotal3_amount' => 'Subtotal3Amount',
        'subtotal4_amount' => 'Subtotal4Amount',
        'subtotal5_amount' => 'Subtotal5Amount',
        'subtotal6_amount' => 'Subtotal6Amount',
        'to_billing_plan' => 'to_BillingPlan',
        'to_partner' => 'to_Partner',
        'to_preceding_proc_flow_doc_item' => 'to_PrecedingProcFlowDocItem',
        'to_pricing_element' => 'to_PricingElement',
        'to_related_object' => 'to_RelatedObject',
        'to_sales_order' => 'to_SalesOrder',
        'to_schedule_line' => 'to_ScheduleLine',
        'to_subsequent_proc_flow_doc_item' => 'to_SubsequentProcFlowDocItem',
        'to_text' => 'to_Text'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sales_order' => 'setSalesOrder',
        'sales_order_item' => 'setSalesOrderItem',
        'higher_level_item' => 'setHigherLevelItem',
        'higher_level_item_usage' => 'setHigherLevelItemUsage',
        'sales_order_item_category' => 'setSalesOrderItemCategory',
        'sales_order_item_text' => 'setSalesOrderItemText',
        'purchase_order_by_customer' => 'setPurchaseOrderByCustomer',
        'purchase_order_by_ship_to_party' => 'setPurchaseOrderByShipToParty',
        'underlying_purchase_order_item' => 'setUnderlyingPurchaseOrderItem',
        'external_item_id' => 'setExternalItemId',
        'material' => 'setMaterial',
        'material_by_customer' => 'setMaterialByCustomer',
        'pricing_date' => 'setPricingDate',
        'pricing_reference_material' => 'setPricingReferenceMaterial',
        'billing_plan' => 'setBillingPlan',
        'requested_quantity' => 'setRequestedQuantity',
        'requested_quantity_unit' => 'setRequestedQuantityUnit',
        'requested_quantity_sap_unit' => 'setRequestedQuantitySapUnit',
        'requested_quantity_iso_unit' => 'setRequestedQuantityIsoUnit',
        'order_quantity_unit' => 'setOrderQuantityUnit',
        'order_quantity_sap_unit' => 'setOrderQuantitySapUnit',
        'order_quantity_iso_unit' => 'setOrderQuantityIsoUnit',
        'confd_deliv_qty_in_order_qty_unit' => 'setConfdDelivQtyInOrderQtyUnit',
        'item_gross_weight' => 'setItemGrossWeight',
        'item_net_weight' => 'setItemNetWeight',
        'item_weight_unit' => 'setItemWeightUnit',
        'item_weight_sap_unit' => 'setItemWeightSapUnit',
        'item_weight_iso_unit' => 'setItemWeightIsoUnit',
        'item_volume' => 'setItemVolume',
        'item_volume_unit' => 'setItemVolumeUnit',
        'item_volume_sap_unit' => 'setItemVolumeSapUnit',
        'item_volume_iso_unit' => 'setItemVolumeIsoUnit',
        'transaction_currency' => 'setTransactionCurrency',
        'net_amount' => 'setNetAmount',
        'total_sd_doc_reference_status' => 'setTotalSdDocReferenceStatus',
        'sd_doc_reference_status' => 'setSdDocReferenceStatus',
        'material_substitution_reason' => 'setMaterialSubstitutionReason',
        'material_group' => 'setMaterialGroup',
        'material_pricing_group' => 'setMaterialPricingGroup',
        'additional_material_group1' => 'setAdditionalMaterialGroup1',
        'additional_material_group2' => 'setAdditionalMaterialGroup2',
        'additional_material_group3' => 'setAdditionalMaterialGroup3',
        'additional_material_group4' => 'setAdditionalMaterialGroup4',
        'additional_material_group5' => 'setAdditionalMaterialGroup5',
        'billing_document_date' => 'setBillingDocumentDate',
        'contract_account' => 'setContractAccount',
        'additional_value_days' => 'setAdditionalValueDays',
        'services_rendered_date' => 'setServicesRenderedDate',
        'batch' => 'setBatch',
        'production_plant' => 'setProductionPlant',
        'original_plant' => 'setOriginalPlant',
        'altv_bsd_conf_substitution_status' => 'setAltvBsdConfSubstitutionStatus',
        'storage_location' => 'setStorageLocation',
        'delivery_group' => 'setDeliveryGroup',
        'shipping_point' => 'setShippingPoint',
        'shipping_type' => 'setShippingType',
        'delivery_priority' => 'setDeliveryPriority',
        'delivery_date_quantity_is_fixed' => 'setDeliveryDateQuantityIsFixed',
        'delivery_date_type_rule' => 'setDeliveryDateTypeRule',
        'incoterms_classification' => 'setIncotermsClassification',
        'incoterms_transfer_location' => 'setIncotermsTransferLocation',
        'incoterms_location1' => 'setIncotermsLocation1',
        'incoterms_location2' => 'setIncotermsLocation2',
        'tax_amount' => 'setTaxAmount',
        'product_tax_classification1' => 'setProductTaxClassification1',
        'product_tax_classification2' => 'setProductTaxClassification2',
        'product_tax_classification3' => 'setProductTaxClassification3',
        'product_tax_classification4' => 'setProductTaxClassification4',
        'product_tax_classification5' => 'setProductTaxClassification5',
        'product_tax_classification6' => 'setProductTaxClassification6',
        'product_tax_classification7' => 'setProductTaxClassification7',
        'product_tax_classification8' => 'setProductTaxClassification8',
        'product_tax_classification9' => 'setProductTaxClassification9',
        'matl_account_assignment_group' => 'setMatlAccountAssignmentGroup',
        'cost_amount' => 'setCostAmount',
        'customer_payment_terms' => 'setCustomerPaymentTerms',
        'fixed_value_date' => 'setFixedValueDate',
        'customer_group' => 'setCustomerGroup',
        'sales_document_rjcn_reason' => 'setSalesDocumentRjcnReason',
        'item_billing_block_reason' => 'setItemBillingBlockReason',
        'sls_doc_is_rlvt_for_proof_of_deliv' => 'setSlsDocIsRlvtForProofOfDeliv',
        'wbs_element' => 'setWbsElement',
        'profit_center' => 'setProfitCenter',
        'accounting_exchange_rate' => 'setAccountingExchangeRate',
        'reference_sd_document' => 'setReferenceSdDocument',
        'reference_sd_document_item' => 'setReferenceSdDocumentItem',
        'sd_process_status' => 'setSdProcessStatus',
        'delivery_status' => 'setDeliveryStatus',
        'order_related_billing_status' => 'setOrderRelatedBillingStatus',
        'subtotal1_amount' => 'setSubtotal1Amount',
        'subtotal2_amount' => 'setSubtotal2Amount',
        'subtotal3_amount' => 'setSubtotal3Amount',
        'subtotal4_amount' => 'setSubtotal4Amount',
        'subtotal5_amount' => 'setSubtotal5Amount',
        'subtotal6_amount' => 'setSubtotal6Amount',
        'to_billing_plan' => 'setToBillingPlan',
        'to_partner' => 'setToPartner',
        'to_preceding_proc_flow_doc_item' => 'setToPrecedingProcFlowDocItem',
        'to_pricing_element' => 'setToPricingElement',
        'to_related_object' => 'setToRelatedObject',
        'to_sales_order' => 'setToSalesOrder',
        'to_schedule_line' => 'setToScheduleLine',
        'to_subsequent_proc_flow_doc_item' => 'setToSubsequentProcFlowDocItem',
        'to_text' => 'setToText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sales_order' => 'getSalesOrder',
        'sales_order_item' => 'getSalesOrderItem',
        'higher_level_item' => 'getHigherLevelItem',
        'higher_level_item_usage' => 'getHigherLevelItemUsage',
        'sales_order_item_category' => 'getSalesOrderItemCategory',
        'sales_order_item_text' => 'getSalesOrderItemText',
        'purchase_order_by_customer' => 'getPurchaseOrderByCustomer',
        'purchase_order_by_ship_to_party' => 'getPurchaseOrderByShipToParty',
        'underlying_purchase_order_item' => 'getUnderlyingPurchaseOrderItem',
        'external_item_id' => 'getExternalItemId',
        'material' => 'getMaterial',
        'material_by_customer' => 'getMaterialByCustomer',
        'pricing_date' => 'getPricingDate',
        'pricing_reference_material' => 'getPricingReferenceMaterial',
        'billing_plan' => 'getBillingPlan',
        'requested_quantity' => 'getRequestedQuantity',
        'requested_quantity_unit' => 'getRequestedQuantityUnit',
        'requested_quantity_sap_unit' => 'getRequestedQuantitySapUnit',
        'requested_quantity_iso_unit' => 'getRequestedQuantityIsoUnit',
        'order_quantity_unit' => 'getOrderQuantityUnit',
        'order_quantity_sap_unit' => 'getOrderQuantitySapUnit',
        'order_quantity_iso_unit' => 'getOrderQuantityIsoUnit',
        'confd_deliv_qty_in_order_qty_unit' => 'getConfdDelivQtyInOrderQtyUnit',
        'item_gross_weight' => 'getItemGrossWeight',
        'item_net_weight' => 'getItemNetWeight',
        'item_weight_unit' => 'getItemWeightUnit',
        'item_weight_sap_unit' => 'getItemWeightSapUnit',
        'item_weight_iso_unit' => 'getItemWeightIsoUnit',
        'item_volume' => 'getItemVolume',
        'item_volume_unit' => 'getItemVolumeUnit',
        'item_volume_sap_unit' => 'getItemVolumeSapUnit',
        'item_volume_iso_unit' => 'getItemVolumeIsoUnit',
        'transaction_currency' => 'getTransactionCurrency',
        'net_amount' => 'getNetAmount',
        'total_sd_doc_reference_status' => 'getTotalSdDocReferenceStatus',
        'sd_doc_reference_status' => 'getSdDocReferenceStatus',
        'material_substitution_reason' => 'getMaterialSubstitutionReason',
        'material_group' => 'getMaterialGroup',
        'material_pricing_group' => 'getMaterialPricingGroup',
        'additional_material_group1' => 'getAdditionalMaterialGroup1',
        'additional_material_group2' => 'getAdditionalMaterialGroup2',
        'additional_material_group3' => 'getAdditionalMaterialGroup3',
        'additional_material_group4' => 'getAdditionalMaterialGroup4',
        'additional_material_group5' => 'getAdditionalMaterialGroup5',
        'billing_document_date' => 'getBillingDocumentDate',
        'contract_account' => 'getContractAccount',
        'additional_value_days' => 'getAdditionalValueDays',
        'services_rendered_date' => 'getServicesRenderedDate',
        'batch' => 'getBatch',
        'production_plant' => 'getProductionPlant',
        'original_plant' => 'getOriginalPlant',
        'altv_bsd_conf_substitution_status' => 'getAltvBsdConfSubstitutionStatus',
        'storage_location' => 'getStorageLocation',
        'delivery_group' => 'getDeliveryGroup',
        'shipping_point' => 'getShippingPoint',
        'shipping_type' => 'getShippingType',
        'delivery_priority' => 'getDeliveryPriority',
        'delivery_date_quantity_is_fixed' => 'getDeliveryDateQuantityIsFixed',
        'delivery_date_type_rule' => 'getDeliveryDateTypeRule',
        'incoterms_classification' => 'getIncotermsClassification',
        'incoterms_transfer_location' => 'getIncotermsTransferLocation',
        'incoterms_location1' => 'getIncotermsLocation1',
        'incoterms_location2' => 'getIncotermsLocation2',
        'tax_amount' => 'getTaxAmount',
        'product_tax_classification1' => 'getProductTaxClassification1',
        'product_tax_classification2' => 'getProductTaxClassification2',
        'product_tax_classification3' => 'getProductTaxClassification3',
        'product_tax_classification4' => 'getProductTaxClassification4',
        'product_tax_classification5' => 'getProductTaxClassification5',
        'product_tax_classification6' => 'getProductTaxClassification6',
        'product_tax_classification7' => 'getProductTaxClassification7',
        'product_tax_classification8' => 'getProductTaxClassification8',
        'product_tax_classification9' => 'getProductTaxClassification9',
        'matl_account_assignment_group' => 'getMatlAccountAssignmentGroup',
        'cost_amount' => 'getCostAmount',
        'customer_payment_terms' => 'getCustomerPaymentTerms',
        'fixed_value_date' => 'getFixedValueDate',
        'customer_group' => 'getCustomerGroup',
        'sales_document_rjcn_reason' => 'getSalesDocumentRjcnReason',
        'item_billing_block_reason' => 'getItemBillingBlockReason',
        'sls_doc_is_rlvt_for_proof_of_deliv' => 'getSlsDocIsRlvtForProofOfDeliv',
        'wbs_element' => 'getWbsElement',
        'profit_center' => 'getProfitCenter',
        'accounting_exchange_rate' => 'getAccountingExchangeRate',
        'reference_sd_document' => 'getReferenceSdDocument',
        'reference_sd_document_item' => 'getReferenceSdDocumentItem',
        'sd_process_status' => 'getSdProcessStatus',
        'delivery_status' => 'getDeliveryStatus',
        'order_related_billing_status' => 'getOrderRelatedBillingStatus',
        'subtotal1_amount' => 'getSubtotal1Amount',
        'subtotal2_amount' => 'getSubtotal2Amount',
        'subtotal3_amount' => 'getSubtotal3Amount',
        'subtotal4_amount' => 'getSubtotal4Amount',
        'subtotal5_amount' => 'getSubtotal5Amount',
        'subtotal6_amount' => 'getSubtotal6Amount',
        'to_billing_plan' => 'getToBillingPlan',
        'to_partner' => 'getToPartner',
        'to_preceding_proc_flow_doc_item' => 'getToPrecedingProcFlowDocItem',
        'to_pricing_element' => 'getToPricingElement',
        'to_related_object' => 'getToRelatedObject',
        'to_sales_order' => 'getToSalesOrder',
        'to_schedule_line' => 'getToScheduleLine',
        'to_subsequent_proc_flow_doc_item' => 'getToSubsequentProcFlowDocItem',
        'to_text' => 'getToText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sales_order', $data ?? [], null);
        $this->setIfExists('sales_order_item', $data ?? [], null);
        $this->setIfExists('higher_level_item', $data ?? [], null);
        $this->setIfExists('higher_level_item_usage', $data ?? [], null);
        $this->setIfExists('sales_order_item_category', $data ?? [], null);
        $this->setIfExists('sales_order_item_text', $data ?? [], null);
        $this->setIfExists('purchase_order_by_customer', $data ?? [], null);
        $this->setIfExists('purchase_order_by_ship_to_party', $data ?? [], null);
        $this->setIfExists('underlying_purchase_order_item', $data ?? [], null);
        $this->setIfExists('external_item_id', $data ?? [], null);
        $this->setIfExists('material', $data ?? [], null);
        $this->setIfExists('material_by_customer', $data ?? [], null);
        $this->setIfExists('pricing_date', $data ?? [], null);
        $this->setIfExists('pricing_reference_material', $data ?? [], null);
        $this->setIfExists('billing_plan', $data ?? [], null);
        $this->setIfExists('requested_quantity', $data ?? [], null);
        $this->setIfExists('requested_quantity_unit', $data ?? [], null);
        $this->setIfExists('requested_quantity_sap_unit', $data ?? [], null);
        $this->setIfExists('requested_quantity_iso_unit', $data ?? [], null);
        $this->setIfExists('order_quantity_unit', $data ?? [], null);
        $this->setIfExists('order_quantity_sap_unit', $data ?? [], null);
        $this->setIfExists('order_quantity_iso_unit', $data ?? [], null);
        $this->setIfExists('confd_deliv_qty_in_order_qty_unit', $data ?? [], null);
        $this->setIfExists('item_gross_weight', $data ?? [], null);
        $this->setIfExists('item_net_weight', $data ?? [], null);
        $this->setIfExists('item_weight_unit', $data ?? [], null);
        $this->setIfExists('item_weight_sap_unit', $data ?? [], null);
        $this->setIfExists('item_weight_iso_unit', $data ?? [], null);
        $this->setIfExists('item_volume', $data ?? [], null);
        $this->setIfExists('item_volume_unit', $data ?? [], null);
        $this->setIfExists('item_volume_sap_unit', $data ?? [], null);
        $this->setIfExists('item_volume_iso_unit', $data ?? [], null);
        $this->setIfExists('transaction_currency', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('total_sd_doc_reference_status', $data ?? [], null);
        $this->setIfExists('sd_doc_reference_status', $data ?? [], null);
        $this->setIfExists('material_substitution_reason', $data ?? [], null);
        $this->setIfExists('material_group', $data ?? [], null);
        $this->setIfExists('material_pricing_group', $data ?? [], null);
        $this->setIfExists('additional_material_group1', $data ?? [], null);
        $this->setIfExists('additional_material_group2', $data ?? [], null);
        $this->setIfExists('additional_material_group3', $data ?? [], null);
        $this->setIfExists('additional_material_group4', $data ?? [], null);
        $this->setIfExists('additional_material_group5', $data ?? [], null);
        $this->setIfExists('billing_document_date', $data ?? [], null);
        $this->setIfExists('contract_account', $data ?? [], null);
        $this->setIfExists('additional_value_days', $data ?? [], null);
        $this->setIfExists('services_rendered_date', $data ?? [], null);
        $this->setIfExists('batch', $data ?? [], null);
        $this->setIfExists('production_plant', $data ?? [], null);
        $this->setIfExists('original_plant', $data ?? [], null);
        $this->setIfExists('altv_bsd_conf_substitution_status', $data ?? [], null);
        $this->setIfExists('storage_location', $data ?? [], null);
        $this->setIfExists('delivery_group', $data ?? [], null);
        $this->setIfExists('shipping_point', $data ?? [], null);
        $this->setIfExists('shipping_type', $data ?? [], null);
        $this->setIfExists('delivery_priority', $data ?? [], null);
        $this->setIfExists('delivery_date_quantity_is_fixed', $data ?? [], null);
        $this->setIfExists('delivery_date_type_rule', $data ?? [], null);
        $this->setIfExists('incoterms_classification', $data ?? [], null);
        $this->setIfExists('incoterms_transfer_location', $data ?? [], null);
        $this->setIfExists('incoterms_location1', $data ?? [], null);
        $this->setIfExists('incoterms_location2', $data ?? [], null);
        $this->setIfExists('tax_amount', $data ?? [], null);
        $this->setIfExists('product_tax_classification1', $data ?? [], null);
        $this->setIfExists('product_tax_classification2', $data ?? [], null);
        $this->setIfExists('product_tax_classification3', $data ?? [], null);
        $this->setIfExists('product_tax_classification4', $data ?? [], null);
        $this->setIfExists('product_tax_classification5', $data ?? [], null);
        $this->setIfExists('product_tax_classification6', $data ?? [], null);
        $this->setIfExists('product_tax_classification7', $data ?? [], null);
        $this->setIfExists('product_tax_classification8', $data ?? [], null);
        $this->setIfExists('product_tax_classification9', $data ?? [], null);
        $this->setIfExists('matl_account_assignment_group', $data ?? [], null);
        $this->setIfExists('cost_amount', $data ?? [], null);
        $this->setIfExists('customer_payment_terms', $data ?? [], null);
        $this->setIfExists('fixed_value_date', $data ?? [], null);
        $this->setIfExists('customer_group', $data ?? [], null);
        $this->setIfExists('sales_document_rjcn_reason', $data ?? [], null);
        $this->setIfExists('item_billing_block_reason', $data ?? [], null);
        $this->setIfExists('sls_doc_is_rlvt_for_proof_of_deliv', $data ?? [], null);
        $this->setIfExists('wbs_element', $data ?? [], null);
        $this->setIfExists('profit_center', $data ?? [], null);
        $this->setIfExists('accounting_exchange_rate', $data ?? [], null);
        $this->setIfExists('reference_sd_document', $data ?? [], null);
        $this->setIfExists('reference_sd_document_item', $data ?? [], null);
        $this->setIfExists('sd_process_status', $data ?? [], null);
        $this->setIfExists('delivery_status', $data ?? [], null);
        $this->setIfExists('order_related_billing_status', $data ?? [], null);
        $this->setIfExists('subtotal1_amount', $data ?? [], null);
        $this->setIfExists('subtotal2_amount', $data ?? [], null);
        $this->setIfExists('subtotal3_amount', $data ?? [], null);
        $this->setIfExists('subtotal4_amount', $data ?? [], null);
        $this->setIfExists('subtotal5_amount', $data ?? [], null);
        $this->setIfExists('subtotal6_amount', $data ?? [], null);
        $this->setIfExists('to_billing_plan', $data ?? [], null);
        $this->setIfExists('to_partner', $data ?? [], null);
        $this->setIfExists('to_preceding_proc_flow_doc_item', $data ?? [], null);
        $this->setIfExists('to_pricing_element', $data ?? [], null);
        $this->setIfExists('to_related_object', $data ?? [], null);
        $this->setIfExists('to_sales_order', $data ?? [], null);
        $this->setIfExists('to_schedule_line', $data ?? [], null);
        $this->setIfExists('to_subsequent_proc_flow_doc_item', $data ?? [], null);
        $this->setIfExists('to_text', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sales_order']) && (mb_strlen($this->container['sales_order']) > 10)) {
            $invalidProperties[] = "invalid value for 'sales_order', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_order_item']) && (mb_strlen($this->container['sales_order_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'sales_order_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['higher_level_item']) && (mb_strlen($this->container['higher_level_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'higher_level_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['higher_level_item_usage']) && (mb_strlen($this->container['higher_level_item_usage']) > 1)) {
            $invalidProperties[] = "invalid value for 'higher_level_item_usage', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['sales_order_item_category']) && (mb_strlen($this->container['sales_order_item_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_order_item_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_order_item_text']) && (mb_strlen($this->container['sales_order_item_text']) > 40)) {
            $invalidProperties[] = "invalid value for 'sales_order_item_text', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['purchase_order_by_customer']) && (mb_strlen($this->container['purchase_order_by_customer']) > 35)) {
            $invalidProperties[] = "invalid value for 'purchase_order_by_customer', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['purchase_order_by_ship_to_party']) && (mb_strlen($this->container['purchase_order_by_ship_to_party']) > 35)) {
            $invalidProperties[] = "invalid value for 'purchase_order_by_ship_to_party', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['underlying_purchase_order_item']) && (mb_strlen($this->container['underlying_purchase_order_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'underlying_purchase_order_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['external_item_id']) && (mb_strlen($this->container['external_item_id']) > 40)) {
            $invalidProperties[] = "invalid value for 'external_item_id', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['material']) && (mb_strlen($this->container['material']) > 40)) {
            $invalidProperties[] = "invalid value for 'material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['material_by_customer']) && (mb_strlen($this->container['material_by_customer']) > 35)) {
            $invalidProperties[] = "invalid value for 'material_by_customer', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['pricing_reference_material']) && (mb_strlen($this->container['pricing_reference_material']) > 40)) {
            $invalidProperties[] = "invalid value for 'pricing_reference_material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['billing_plan']) && (mb_strlen($this->container['billing_plan']) > 10)) {
            $invalidProperties[] = "invalid value for 'billing_plan', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['requested_quantity_unit']) && (mb_strlen($this->container['requested_quantity_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'requested_quantity_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['requested_quantity_sap_unit']) && (mb_strlen($this->container['requested_quantity_sap_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'requested_quantity_sap_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['requested_quantity_iso_unit']) && (mb_strlen($this->container['requested_quantity_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'requested_quantity_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['order_quantity_unit']) && (mb_strlen($this->container['order_quantity_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'order_quantity_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['order_quantity_sap_unit']) && (mb_strlen($this->container['order_quantity_sap_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'order_quantity_sap_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['order_quantity_iso_unit']) && (mb_strlen($this->container['order_quantity_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'order_quantity_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_weight_unit']) && (mb_strlen($this->container['item_weight_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_weight_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_weight_sap_unit']) && (mb_strlen($this->container['item_weight_sap_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_weight_sap_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_weight_iso_unit']) && (mb_strlen($this->container['item_weight_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_weight_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_volume_unit']) && (mb_strlen($this->container['item_volume_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_volume_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_volume_sap_unit']) && (mb_strlen($this->container['item_volume_sap_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_volume_sap_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_volume_iso_unit']) && (mb_strlen($this->container['item_volume_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_volume_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['transaction_currency']) && (mb_strlen($this->container['transaction_currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'transaction_currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['total_sd_doc_reference_status']) && (mb_strlen($this->container['total_sd_doc_reference_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'total_sd_doc_reference_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['sd_doc_reference_status']) && (mb_strlen($this->container['sd_doc_reference_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'sd_doc_reference_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['material_substitution_reason']) && (mb_strlen($this->container['material_substitution_reason']) > 4)) {
            $invalidProperties[] = "invalid value for 'material_substitution_reason', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['material_group']) && (mb_strlen($this->container['material_group']) > 9)) {
            $invalidProperties[] = "invalid value for 'material_group', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['material_pricing_group']) && (mb_strlen($this->container['material_pricing_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'material_pricing_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['additional_material_group1']) && (mb_strlen($this->container['additional_material_group1']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group1', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group2']) && (mb_strlen($this->container['additional_material_group2']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group2', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group3']) && (mb_strlen($this->container['additional_material_group3']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group3', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group4']) && (mb_strlen($this->container['additional_material_group4']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group4', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_material_group5']) && (mb_strlen($this->container['additional_material_group5']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_material_group5', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['contract_account']) && (mb_strlen($this->container['contract_account']) > 12)) {
            $invalidProperties[] = "invalid value for 'contract_account', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['additional_value_days']) && (mb_strlen($this->container['additional_value_days']) > 2)) {
            $invalidProperties[] = "invalid value for 'additional_value_days', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['batch']) && (mb_strlen($this->container['batch']) > 10)) {
            $invalidProperties[] = "invalid value for 'batch', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['production_plant']) && (mb_strlen($this->container['production_plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'production_plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['original_plant']) && (mb_strlen($this->container['original_plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'original_plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['altv_bsd_conf_substitution_status']) && (mb_strlen($this->container['altv_bsd_conf_substitution_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'altv_bsd_conf_substitution_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['storage_location']) && (mb_strlen($this->container['storage_location']) > 4)) {
            $invalidProperties[] = "invalid value for 'storage_location', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['delivery_group']) && (mb_strlen($this->container['delivery_group']) > 3)) {
            $invalidProperties[] = "invalid value for 'delivery_group', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['shipping_point']) && (mb_strlen($this->container['shipping_point']) > 4)) {
            $invalidProperties[] = "invalid value for 'shipping_point', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['shipping_type']) && (mb_strlen($this->container['shipping_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipping_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_priority']) && (mb_strlen($this->container['delivery_priority']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_priority', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_date_type_rule']) && (mb_strlen($this->container['delivery_date_type_rule']) > 1)) {
            $invalidProperties[] = "invalid value for 'delivery_date_type_rule', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['incoterms_classification']) && (mb_strlen($this->container['incoterms_classification']) > 3)) {
            $invalidProperties[] = "invalid value for 'incoterms_classification', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['incoterms_transfer_location']) && (mb_strlen($this->container['incoterms_transfer_location']) > 28)) {
            $invalidProperties[] = "invalid value for 'incoterms_transfer_location', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['incoterms_location1']) && (mb_strlen($this->container['incoterms_location1']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location1', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['incoterms_location2']) && (mb_strlen($this->container['incoterms_location2']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location2', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['product_tax_classification1']) && (mb_strlen($this->container['product_tax_classification1']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification1', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification2']) && (mb_strlen($this->container['product_tax_classification2']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification2', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification3']) && (mb_strlen($this->container['product_tax_classification3']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification3', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification4']) && (mb_strlen($this->container['product_tax_classification4']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification4', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification5']) && (mb_strlen($this->container['product_tax_classification5']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification5', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification6']) && (mb_strlen($this->container['product_tax_classification6']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification6', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification7']) && (mb_strlen($this->container['product_tax_classification7']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification7', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification8']) && (mb_strlen($this->container['product_tax_classification8']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification8', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification9']) && (mb_strlen($this->container['product_tax_classification9']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification9', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['matl_account_assignment_group']) && (mb_strlen($this->container['matl_account_assignment_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'matl_account_assignment_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_payment_terms']) && (mb_strlen($this->container['customer_payment_terms']) > 4)) {
            $invalidProperties[] = "invalid value for 'customer_payment_terms', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['customer_group']) && (mb_strlen($this->container['customer_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['sales_document_rjcn_reason']) && (mb_strlen($this->container['sales_document_rjcn_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'sales_document_rjcn_reason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['item_billing_block_reason']) && (mb_strlen($this->container['item_billing_block_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'item_billing_block_reason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['wbs_element']) && (mb_strlen($this->container['wbs_element']) > 24)) {
            $invalidProperties[] = "invalid value for 'wbs_element', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['profit_center']) && (mb_strlen($this->container['profit_center']) > 10)) {
            $invalidProperties[] = "invalid value for 'profit_center', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['reference_sd_document']) && (mb_strlen($this->container['reference_sd_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['reference_sd_document_item']) && (mb_strlen($this->container['reference_sd_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sd_process_status']) && (mb_strlen($this->container['sd_process_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'sd_process_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['delivery_status']) && (mb_strlen($this->container['delivery_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'delivery_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['order_related_billing_status']) && (mb_strlen($this->container['order_related_billing_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'order_related_billing_status', the character length must be smaller than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sales_order
     *
     * @return string|null
     */
    public function getSalesOrder()
    {
        return $this->container['sales_order'];
    }

    /**
     * Sets sales_order
     *
     * @param string|null $sales_order sales_order
     *
     * @return self
     */
    public function setSalesOrder($sales_order)
    {
        if (is_null($sales_order)) {
            throw new \InvalidArgumentException('non-nullable sales_order cannot be null');
        }
        if ((mb_strlen($sales_order) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sales_order when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 10.');
        }

        $this->container['sales_order'] = $sales_order;

        return $this;
    }

    /**
     * Gets sales_order_item
     *
     * @return string|null
     */
    public function getSalesOrderItem()
    {
        return $this->container['sales_order_item'];
    }

    /**
     * Sets sales_order_item
     *
     * @param string|null $sales_order_item Sales Order Item
     *
     * @return self
     */
    public function setSalesOrderItem($sales_order_item)
    {
        if (is_null($sales_order_item)) {
            throw new \InvalidArgumentException('non-nullable sales_order_item cannot be null');
        }
        if ((mb_strlen($sales_order_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_item when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 6.');
        }

        $this->container['sales_order_item'] = $sales_order_item;

        return $this;
    }

    /**
     * Gets higher_level_item
     *
     * @return string|null
     */
    public function getHigherLevelItem()
    {
        return $this->container['higher_level_item'];
    }

    /**
     * Sets higher_level_item
     *
     * @param string|null $higher_level_item Higher-Level Item in Bill of Material Structures
     *
     * @return self
     */
    public function setHigherLevelItem($higher_level_item)
    {
        if (is_null($higher_level_item)) {
            array_push($this->openAPINullablesSetToNull, 'higher_level_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('higher_level_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($higher_level_item) && (mb_strlen($higher_level_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $higher_level_item when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 6.');
        }

        $this->container['higher_level_item'] = $higher_level_item;

        return $this;
    }

    /**
     * Gets higher_level_item_usage
     *
     * @return string|null
     */
    public function getHigherLevelItemUsage()
    {
        return $this->container['higher_level_item_usage'];
    }

    /**
     * Sets higher_level_item_usage
     *
     * @param string|null $higher_level_item_usage ID for higher-level item usage
     *
     * @return self
     */
    public function setHigherLevelItemUsage($higher_level_item_usage)
    {
        if (is_null($higher_level_item_usage)) {
            array_push($this->openAPINullablesSetToNull, 'higher_level_item_usage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('higher_level_item_usage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($higher_level_item_usage) && (mb_strlen($higher_level_item_usage) > 1)) {
            throw new \InvalidArgumentException('invalid length for $higher_level_item_usage when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['higher_level_item_usage'] = $higher_level_item_usage;

        return $this;
    }

    /**
     * Gets sales_order_item_category
     *
     * @return string|null
     */
    public function getSalesOrderItemCategory()
    {
        return $this->container['sales_order_item_category'];
    }

    /**
     * Sets sales_order_item_category
     *
     * @param string|null $sales_order_item_category Sales Document Item Category
     *
     * @return self
     */
    public function setSalesOrderItemCategory($sales_order_item_category)
    {
        if (is_null($sales_order_item_category)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_item_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_item_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_order_item_category) && (mb_strlen($sales_order_item_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_item_category when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 4.');
        }

        $this->container['sales_order_item_category'] = $sales_order_item_category;

        return $this;
    }

    /**
     * Gets sales_order_item_text
     *
     * @return string|null
     */
    public function getSalesOrderItemText()
    {
        return $this->container['sales_order_item_text'];
    }

    /**
     * Sets sales_order_item_text
     *
     * @param string|null $sales_order_item_text Short Text for Sales Order Item
     *
     * @return self
     */
    public function setSalesOrderItemText($sales_order_item_text)
    {
        if (is_null($sales_order_item_text)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_item_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_item_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_order_item_text) && (mb_strlen($sales_order_item_text) > 40)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_item_text when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 40.');
        }

        $this->container['sales_order_item_text'] = $sales_order_item_text;

        return $this;
    }

    /**
     * Gets purchase_order_by_customer
     *
     * @return string|null
     */
    public function getPurchaseOrderByCustomer()
    {
        return $this->container['purchase_order_by_customer'];
    }

    /**
     * Sets purchase_order_by_customer
     *
     * @param string|null $purchase_order_by_customer purchase_order_by_customer
     *
     * @return self
     */
    public function setPurchaseOrderByCustomer($purchase_order_by_customer)
    {
        if (is_null($purchase_order_by_customer)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_order_by_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_order_by_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($purchase_order_by_customer) && (mb_strlen($purchase_order_by_customer) > 35)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_by_customer when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 35.');
        }

        $this->container['purchase_order_by_customer'] = $purchase_order_by_customer;

        return $this;
    }

    /**
     * Gets purchase_order_by_ship_to_party
     *
     * @return string|null
     */
    public function getPurchaseOrderByShipToParty()
    {
        return $this->container['purchase_order_by_ship_to_party'];
    }

    /**
     * Sets purchase_order_by_ship_to_party
     *
     * @param string|null $purchase_order_by_ship_to_party Ship-to Party's Customer Reference
     *
     * @return self
     */
    public function setPurchaseOrderByShipToParty($purchase_order_by_ship_to_party)
    {
        if (is_null($purchase_order_by_ship_to_party)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_order_by_ship_to_party');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_order_by_ship_to_party', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($purchase_order_by_ship_to_party) && (mb_strlen($purchase_order_by_ship_to_party) > 35)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_by_ship_to_party when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 35.');
        }

        $this->container['purchase_order_by_ship_to_party'] = $purchase_order_by_ship_to_party;

        return $this;
    }

    /**
     * Gets underlying_purchase_order_item
     *
     * @return string|null
     */
    public function getUnderlyingPurchaseOrderItem()
    {
        return $this->container['underlying_purchase_order_item'];
    }

    /**
     * Sets underlying_purchase_order_item
     *
     * @param string|null $underlying_purchase_order_item Item Number of the Underlying Purchase Order
     *
     * @return self
     */
    public function setUnderlyingPurchaseOrderItem($underlying_purchase_order_item)
    {
        if (is_null($underlying_purchase_order_item)) {
            array_push($this->openAPINullablesSetToNull, 'underlying_purchase_order_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('underlying_purchase_order_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($underlying_purchase_order_item) && (mb_strlen($underlying_purchase_order_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $underlying_purchase_order_item when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 6.');
        }

        $this->container['underlying_purchase_order_item'] = $underlying_purchase_order_item;

        return $this;
    }

    /**
     * Gets external_item_id
     *
     * @return string|null
     */
    public function getExternalItemId()
    {
        return $this->container['external_item_id'];
    }

    /**
     * Sets external_item_id
     *
     * @param string|null $external_item_id external_item_id
     *
     * @return self
     */
    public function setExternalItemId($external_item_id)
    {
        if (is_null($external_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($external_item_id) && (mb_strlen($external_item_id) > 40)) {
            throw new \InvalidArgumentException('invalid length for $external_item_id when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 40.');
        }

        $this->container['external_item_id'] = $external_item_id;

        return $this;
    }

    /**
     * Gets material
     *
     * @return string|null
     */
    public function getMaterial()
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param string|null $material Material Number
     *
     * @return self
     */
    public function setMaterial($material)
    {
        if (is_null($material)) {
            array_push($this->openAPINullablesSetToNull, 'material');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material) && (mb_strlen($material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $material when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 40.');
        }

        $this->container['material'] = $material;

        return $this;
    }

    /**
     * Gets material_by_customer
     *
     * @return string|null
     */
    public function getMaterialByCustomer()
    {
        return $this->container['material_by_customer'];
    }

    /**
     * Sets material_by_customer
     *
     * @param string|null $material_by_customer Material Number Used by Customer
     *
     * @return self
     */
    public function setMaterialByCustomer($material_by_customer)
    {
        if (is_null($material_by_customer)) {
            array_push($this->openAPINullablesSetToNull, 'material_by_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_by_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_by_customer) && (mb_strlen($material_by_customer) > 35)) {
            throw new \InvalidArgumentException('invalid length for $material_by_customer when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 35.');
        }

        $this->container['material_by_customer'] = $material_by_customer;

        return $this;
    }

    /**
     * Gets pricing_date
     *
     * @return string|null
     */
    public function getPricingDate()
    {
        return $this->container['pricing_date'];
    }

    /**
     * Sets pricing_date
     *
     * @param string|null $pricing_date Date for Pricing and Exchange Rate
     *
     * @return self
     */
    public function setPricingDate($pricing_date)
    {
        if (is_null($pricing_date)) {
            array_push($this->openAPINullablesSetToNull, 'pricing_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pricing_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pricing_date'] = $pricing_date;

        return $this;
    }

    /**
     * Gets pricing_reference_material
     *
     * @return string|null
     */
    public function getPricingReferenceMaterial()
    {
        return $this->container['pricing_reference_material'];
    }

    /**
     * Sets pricing_reference_material
     *
     * @param string|null $pricing_reference_material Pricing Reference Material
     *
     * @return self
     */
    public function setPricingReferenceMaterial($pricing_reference_material)
    {
        if (is_null($pricing_reference_material)) {
            array_push($this->openAPINullablesSetToNull, 'pricing_reference_material');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pricing_reference_material', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($pricing_reference_material) && (mb_strlen($pricing_reference_material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $pricing_reference_material when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 40.');
        }

        $this->container['pricing_reference_material'] = $pricing_reference_material;

        return $this;
    }

    /**
     * Gets billing_plan
     *
     * @return string|null
     */
    public function getBillingPlan()
    {
        return $this->container['billing_plan'];
    }

    /**
     * Sets billing_plan
     *
     * @param string|null $billing_plan Billing Plan Number / Invoicing Plan Number
     *
     * @return self
     */
    public function setBillingPlan($billing_plan)
    {
        if (is_null($billing_plan)) {
            array_push($this->openAPINullablesSetToNull, 'billing_plan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_plan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_plan) && (mb_strlen($billing_plan) > 10)) {
            throw new \InvalidArgumentException('invalid length for $billing_plan when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 10.');
        }

        $this->container['billing_plan'] = $billing_plan;

        return $this;
    }

    /**
     * Gets requested_quantity
     *
     * @return float|null
     */
    public function getRequestedQuantity()
    {
        return $this->container['requested_quantity'];
    }

    /**
     * Sets requested_quantity
     *
     * @param float|null $requested_quantity requested_quantity
     *
     * @return self
     */
    public function setRequestedQuantity($requested_quantity)
    {
        if (is_null($requested_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'requested_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['requested_quantity'] = $requested_quantity;

        return $this;
    }

    /**
     * Gets requested_quantity_unit
     *
     * @return string|null
     */
    public function getRequestedQuantityUnit()
    {
        return $this->container['requested_quantity_unit'];
    }

    /**
     * Sets requested_quantity_unit
     *
     * @param string|null $requested_quantity_unit Unit of the Requested Quantity
     *
     * @return self
     */
    public function setRequestedQuantityUnit($requested_quantity_unit)
    {
        if (is_null($requested_quantity_unit)) {
            array_push($this->openAPINullablesSetToNull, 'requested_quantity_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_quantity_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($requested_quantity_unit) && (mb_strlen($requested_quantity_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $requested_quantity_unit when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['requested_quantity_unit'] = $requested_quantity_unit;

        return $this;
    }

    /**
     * Gets requested_quantity_sap_unit
     *
     * @return string|null
     */
    public function getRequestedQuantitySapUnit()
    {
        return $this->container['requested_quantity_sap_unit'];
    }

    /**
     * Sets requested_quantity_sap_unit
     *
     * @param string|null $requested_quantity_sap_unit SAP Unit Code for Requested Quantity
     *
     * @return self
     */
    public function setRequestedQuantitySapUnit($requested_quantity_sap_unit)
    {
        if (is_null($requested_quantity_sap_unit)) {
            array_push($this->openAPINullablesSetToNull, 'requested_quantity_sap_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_quantity_sap_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($requested_quantity_sap_unit) && (mb_strlen($requested_quantity_sap_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $requested_quantity_sap_unit when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['requested_quantity_sap_unit'] = $requested_quantity_sap_unit;

        return $this;
    }

    /**
     * Gets requested_quantity_iso_unit
     *
     * @return string|null
     */
    public function getRequestedQuantityIsoUnit()
    {
        return $this->container['requested_quantity_iso_unit'];
    }

    /**
     * Sets requested_quantity_iso_unit
     *
     * @param string|null $requested_quantity_iso_unit ISO Unit Code for Requested Quantity
     *
     * @return self
     */
    public function setRequestedQuantityIsoUnit($requested_quantity_iso_unit)
    {
        if (is_null($requested_quantity_iso_unit)) {
            array_push($this->openAPINullablesSetToNull, 'requested_quantity_iso_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_quantity_iso_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($requested_quantity_iso_unit) && (mb_strlen($requested_quantity_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $requested_quantity_iso_unit when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['requested_quantity_iso_unit'] = $requested_quantity_iso_unit;

        return $this;
    }

    /**
     * Gets order_quantity_unit
     *
     * @return string|null
     */
    public function getOrderQuantityUnit()
    {
        return $this->container['order_quantity_unit'];
    }

    /**
     * Sets order_quantity_unit
     *
     * @param string|null $order_quantity_unit order_quantity_unit
     *
     * @return self
     */
    public function setOrderQuantityUnit($order_quantity_unit)
    {
        if (is_null($order_quantity_unit)) {
            array_push($this->openAPINullablesSetToNull, 'order_quantity_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_quantity_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($order_quantity_unit) && (mb_strlen($order_quantity_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $order_quantity_unit when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['order_quantity_unit'] = $order_quantity_unit;

        return $this;
    }

    /**
     * Gets order_quantity_sap_unit
     *
     * @return string|null
     */
    public function getOrderQuantitySapUnit()
    {
        return $this->container['order_quantity_sap_unit'];
    }

    /**
     * Sets order_quantity_sap_unit
     *
     * @param string|null $order_quantity_sap_unit SAP Unit Code for Order Quantity
     *
     * @return self
     */
    public function setOrderQuantitySapUnit($order_quantity_sap_unit)
    {
        if (is_null($order_quantity_sap_unit)) {
            array_push($this->openAPINullablesSetToNull, 'order_quantity_sap_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_quantity_sap_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($order_quantity_sap_unit) && (mb_strlen($order_quantity_sap_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $order_quantity_sap_unit when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['order_quantity_sap_unit'] = $order_quantity_sap_unit;

        return $this;
    }

    /**
     * Gets order_quantity_iso_unit
     *
     * @return string|null
     */
    public function getOrderQuantityIsoUnit()
    {
        return $this->container['order_quantity_iso_unit'];
    }

    /**
     * Sets order_quantity_iso_unit
     *
     * @param string|null $order_quantity_iso_unit ISO Unit Code for Order Quantity
     *
     * @return self
     */
    public function setOrderQuantityIsoUnit($order_quantity_iso_unit)
    {
        if (is_null($order_quantity_iso_unit)) {
            array_push($this->openAPINullablesSetToNull, 'order_quantity_iso_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_quantity_iso_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($order_quantity_iso_unit) && (mb_strlen($order_quantity_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $order_quantity_iso_unit when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['order_quantity_iso_unit'] = $order_quantity_iso_unit;

        return $this;
    }

    /**
     * Gets confd_deliv_qty_in_order_qty_unit
     *
     * @return float|null
     */
    public function getConfdDelivQtyInOrderQtyUnit()
    {
        return $this->container['confd_deliv_qty_in_order_qty_unit'];
    }

    /**
     * Sets confd_deliv_qty_in_order_qty_unit
     *
     * @param float|null $confd_deliv_qty_in_order_qty_unit Cumulative Confirmed Quantity in Sales Unit
     *
     * @return self
     */
    public function setConfdDelivQtyInOrderQtyUnit($confd_deliv_qty_in_order_qty_unit)
    {
        if (is_null($confd_deliv_qty_in_order_qty_unit)) {
            array_push($this->openAPINullablesSetToNull, 'confd_deliv_qty_in_order_qty_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('confd_deliv_qty_in_order_qty_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['confd_deliv_qty_in_order_qty_unit'] = $confd_deliv_qty_in_order_qty_unit;

        return $this;
    }

    /**
     * Gets item_gross_weight
     *
     * @return float|null
     */
    public function getItemGrossWeight()
    {
        return $this->container['item_gross_weight'];
    }

    /**
     * Sets item_gross_weight
     *
     * @param float|null $item_gross_weight Gross Weight of the Item
     *
     * @return self
     */
    public function setItemGrossWeight($item_gross_weight)
    {
        if (is_null($item_gross_weight)) {
            array_push($this->openAPINullablesSetToNull, 'item_gross_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_gross_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['item_gross_weight'] = $item_gross_weight;

        return $this;
    }

    /**
     * Gets item_net_weight
     *
     * @return float|null
     */
    public function getItemNetWeight()
    {
        return $this->container['item_net_weight'];
    }

    /**
     * Sets item_net_weight
     *
     * @param float|null $item_net_weight Net Weight of the Item
     *
     * @return self
     */
    public function setItemNetWeight($item_net_weight)
    {
        if (is_null($item_net_weight)) {
            array_push($this->openAPINullablesSetToNull, 'item_net_weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_net_weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['item_net_weight'] = $item_net_weight;

        return $this;
    }

    /**
     * Gets item_weight_unit
     *
     * @return string|null
     */
    public function getItemWeightUnit()
    {
        return $this->container['item_weight_unit'];
    }

    /**
     * Sets item_weight_unit
     *
     * @param string|null $item_weight_unit item_weight_unit
     *
     * @return self
     */
    public function setItemWeightUnit($item_weight_unit)
    {
        if (is_null($item_weight_unit)) {
            array_push($this->openAPINullablesSetToNull, 'item_weight_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_weight_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_weight_unit) && (mb_strlen($item_weight_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_weight_unit when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['item_weight_unit'] = $item_weight_unit;

        return $this;
    }

    /**
     * Gets item_weight_sap_unit
     *
     * @return string|null
     */
    public function getItemWeightSapUnit()
    {
        return $this->container['item_weight_sap_unit'];
    }

    /**
     * Sets item_weight_sap_unit
     *
     * @param string|null $item_weight_sap_unit SAP Unit Code for Item Weight
     *
     * @return self
     */
    public function setItemWeightSapUnit($item_weight_sap_unit)
    {
        if (is_null($item_weight_sap_unit)) {
            array_push($this->openAPINullablesSetToNull, 'item_weight_sap_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_weight_sap_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_weight_sap_unit) && (mb_strlen($item_weight_sap_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_weight_sap_unit when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['item_weight_sap_unit'] = $item_weight_sap_unit;

        return $this;
    }

    /**
     * Gets item_weight_iso_unit
     *
     * @return string|null
     */
    public function getItemWeightIsoUnit()
    {
        return $this->container['item_weight_iso_unit'];
    }

    /**
     * Sets item_weight_iso_unit
     *
     * @param string|null $item_weight_iso_unit ISO Unit Code for Item Weight
     *
     * @return self
     */
    public function setItemWeightIsoUnit($item_weight_iso_unit)
    {
        if (is_null($item_weight_iso_unit)) {
            array_push($this->openAPINullablesSetToNull, 'item_weight_iso_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_weight_iso_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_weight_iso_unit) && (mb_strlen($item_weight_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_weight_iso_unit when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['item_weight_iso_unit'] = $item_weight_iso_unit;

        return $this;
    }

    /**
     * Gets item_volume
     *
     * @return float|null
     */
    public function getItemVolume()
    {
        return $this->container['item_volume'];
    }

    /**
     * Sets item_volume
     *
     * @param float|null $item_volume Volume of the item
     *
     * @return self
     */
    public function setItemVolume($item_volume)
    {
        if (is_null($item_volume)) {
            array_push($this->openAPINullablesSetToNull, 'item_volume');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_volume', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['item_volume'] = $item_volume;

        return $this;
    }

    /**
     * Gets item_volume_unit
     *
     * @return string|null
     */
    public function getItemVolumeUnit()
    {
        return $this->container['item_volume_unit'];
    }

    /**
     * Sets item_volume_unit
     *
     * @param string|null $item_volume_unit item_volume_unit
     *
     * @return self
     */
    public function setItemVolumeUnit($item_volume_unit)
    {
        if (is_null($item_volume_unit)) {
            array_push($this->openAPINullablesSetToNull, 'item_volume_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_volume_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_volume_unit) && (mb_strlen($item_volume_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_volume_unit when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['item_volume_unit'] = $item_volume_unit;

        return $this;
    }

    /**
     * Gets item_volume_sap_unit
     *
     * @return string|null
     */
    public function getItemVolumeSapUnit()
    {
        return $this->container['item_volume_sap_unit'];
    }

    /**
     * Sets item_volume_sap_unit
     *
     * @param string|null $item_volume_sap_unit SAP Unit Code for Item Volume
     *
     * @return self
     */
    public function setItemVolumeSapUnit($item_volume_sap_unit)
    {
        if (is_null($item_volume_sap_unit)) {
            array_push($this->openAPINullablesSetToNull, 'item_volume_sap_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_volume_sap_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_volume_sap_unit) && (mb_strlen($item_volume_sap_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_volume_sap_unit when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['item_volume_sap_unit'] = $item_volume_sap_unit;

        return $this;
    }

    /**
     * Gets item_volume_iso_unit
     *
     * @return string|null
     */
    public function getItemVolumeIsoUnit()
    {
        return $this->container['item_volume_iso_unit'];
    }

    /**
     * Sets item_volume_iso_unit
     *
     * @param string|null $item_volume_iso_unit ISO Unit Code for Item Volume
     *
     * @return self
     */
    public function setItemVolumeIsoUnit($item_volume_iso_unit)
    {
        if (is_null($item_volume_iso_unit)) {
            array_push($this->openAPINullablesSetToNull, 'item_volume_iso_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_volume_iso_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_volume_iso_unit) && (mb_strlen($item_volume_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_volume_iso_unit when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['item_volume_iso_unit'] = $item_volume_iso_unit;

        return $this;
    }

    /**
     * Gets transaction_currency
     *
     * @return string|null
     */
    public function getTransactionCurrency()
    {
        return $this->container['transaction_currency'];
    }

    /**
     * Sets transaction_currency
     *
     * @param string|null $transaction_currency SD Document Currency
     *
     * @return self
     */
    public function setTransactionCurrency($transaction_currency)
    {
        if (is_null($transaction_currency)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transaction_currency) && (mb_strlen($transaction_currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $transaction_currency when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 5.');
        }

        $this->container['transaction_currency'] = $transaction_currency;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return float|null
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param float|null $net_amount Net Value of the Document Item in Document Currency
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            array_push($this->openAPINullablesSetToNull, 'net_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('net_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets total_sd_doc_reference_status
     *
     * @return string|null
     */
    public function getTotalSdDocReferenceStatus()
    {
        return $this->container['total_sd_doc_reference_status'];
    }

    /**
     * Sets total_sd_doc_reference_status
     *
     * @param string|null $total_sd_doc_reference_status Overall Reference Status (Item)
     *
     * @return self
     */
    public function setTotalSdDocReferenceStatus($total_sd_doc_reference_status)
    {
        if (is_null($total_sd_doc_reference_status)) {
            array_push($this->openAPINullablesSetToNull, 'total_sd_doc_reference_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_sd_doc_reference_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($total_sd_doc_reference_status) && (mb_strlen($total_sd_doc_reference_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $total_sd_doc_reference_status when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['total_sd_doc_reference_status'] = $total_sd_doc_reference_status;

        return $this;
    }

    /**
     * Gets sd_doc_reference_status
     *
     * @return string|null
     */
    public function getSdDocReferenceStatus()
    {
        return $this->container['sd_doc_reference_status'];
    }

    /**
     * Sets sd_doc_reference_status
     *
     * @param string|null $sd_doc_reference_status Reference Status (Item)
     *
     * @return self
     */
    public function setSdDocReferenceStatus($sd_doc_reference_status)
    {
        if (is_null($sd_doc_reference_status)) {
            array_push($this->openAPINullablesSetToNull, 'sd_doc_reference_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sd_doc_reference_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sd_doc_reference_status) && (mb_strlen($sd_doc_reference_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $sd_doc_reference_status when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['sd_doc_reference_status'] = $sd_doc_reference_status;

        return $this;
    }

    /**
     * Gets material_substitution_reason
     *
     * @return string|null
     */
    public function getMaterialSubstitutionReason()
    {
        return $this->container['material_substitution_reason'];
    }

    /**
     * Sets material_substitution_reason
     *
     * @param string|null $material_substitution_reason Reason for Material Substitution
     *
     * @return self
     */
    public function setMaterialSubstitutionReason($material_substitution_reason)
    {
        if (is_null($material_substitution_reason)) {
            array_push($this->openAPINullablesSetToNull, 'material_substitution_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_substitution_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_substitution_reason) && (mb_strlen($material_substitution_reason) > 4)) {
            throw new \InvalidArgumentException('invalid length for $material_substitution_reason when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 4.');
        }

        $this->container['material_substitution_reason'] = $material_substitution_reason;

        return $this;
    }

    /**
     * Gets material_group
     *
     * @return string|null
     */
    public function getMaterialGroup()
    {
        return $this->container['material_group'];
    }

    /**
     * Sets material_group
     *
     * @param string|null $material_group material_group
     *
     * @return self
     */
    public function setMaterialGroup($material_group)
    {
        if (is_null($material_group)) {
            array_push($this->openAPINullablesSetToNull, 'material_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_group) && (mb_strlen($material_group) > 9)) {
            throw new \InvalidArgumentException('invalid length for $material_group when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 9.');
        }

        $this->container['material_group'] = $material_group;

        return $this;
    }

    /**
     * Gets material_pricing_group
     *
     * @return string|null
     */
    public function getMaterialPricingGroup()
    {
        return $this->container['material_pricing_group'];
    }

    /**
     * Sets material_pricing_group
     *
     * @param string|null $material_pricing_group material_pricing_group
     *
     * @return self
     */
    public function setMaterialPricingGroup($material_pricing_group)
    {
        if (is_null($material_pricing_group)) {
            array_push($this->openAPINullablesSetToNull, 'material_pricing_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_pricing_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_pricing_group) && (mb_strlen($material_pricing_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $material_pricing_group when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 2.');
        }

        $this->container['material_pricing_group'] = $material_pricing_group;

        return $this;
    }

    /**
     * Gets additional_material_group1
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup1()
    {
        return $this->container['additional_material_group1'];
    }

    /**
     * Sets additional_material_group1
     *
     * @param string|null $additional_material_group1 additional_material_group1
     *
     * @return self
     */
    public function setAdditionalMaterialGroup1($additional_material_group1)
    {
        if (is_null($additional_material_group1)) {
            array_push($this->openAPINullablesSetToNull, 'additional_material_group1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_material_group1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_material_group1) && (mb_strlen($additional_material_group1) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group1 when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group1'] = $additional_material_group1;

        return $this;
    }

    /**
     * Gets additional_material_group2
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup2()
    {
        return $this->container['additional_material_group2'];
    }

    /**
     * Sets additional_material_group2
     *
     * @param string|null $additional_material_group2 additional_material_group2
     *
     * @return self
     */
    public function setAdditionalMaterialGroup2($additional_material_group2)
    {
        if (is_null($additional_material_group2)) {
            array_push($this->openAPINullablesSetToNull, 'additional_material_group2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_material_group2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_material_group2) && (mb_strlen($additional_material_group2) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group2 when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group2'] = $additional_material_group2;

        return $this;
    }

    /**
     * Gets additional_material_group3
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup3()
    {
        return $this->container['additional_material_group3'];
    }

    /**
     * Sets additional_material_group3
     *
     * @param string|null $additional_material_group3 additional_material_group3
     *
     * @return self
     */
    public function setAdditionalMaterialGroup3($additional_material_group3)
    {
        if (is_null($additional_material_group3)) {
            array_push($this->openAPINullablesSetToNull, 'additional_material_group3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_material_group3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_material_group3) && (mb_strlen($additional_material_group3) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group3 when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group3'] = $additional_material_group3;

        return $this;
    }

    /**
     * Gets additional_material_group4
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup4()
    {
        return $this->container['additional_material_group4'];
    }

    /**
     * Sets additional_material_group4
     *
     * @param string|null $additional_material_group4 additional_material_group4
     *
     * @return self
     */
    public function setAdditionalMaterialGroup4($additional_material_group4)
    {
        if (is_null($additional_material_group4)) {
            array_push($this->openAPINullablesSetToNull, 'additional_material_group4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_material_group4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_material_group4) && (mb_strlen($additional_material_group4) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group4 when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group4'] = $additional_material_group4;

        return $this;
    }

    /**
     * Gets additional_material_group5
     *
     * @return string|null
     */
    public function getAdditionalMaterialGroup5()
    {
        return $this->container['additional_material_group5'];
    }

    /**
     * Sets additional_material_group5
     *
     * @param string|null $additional_material_group5 additional_material_group5
     *
     * @return self
     */
    public function setAdditionalMaterialGroup5($additional_material_group5)
    {
        if (is_null($additional_material_group5)) {
            array_push($this->openAPINullablesSetToNull, 'additional_material_group5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_material_group5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_material_group5) && (mb_strlen($additional_material_group5) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_material_group5 when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['additional_material_group5'] = $additional_material_group5;

        return $this;
    }

    /**
     * Gets billing_document_date
     *
     * @return string|null
     */
    public function getBillingDocumentDate()
    {
        return $this->container['billing_document_date'];
    }

    /**
     * Sets billing_document_date
     *
     * @param string|null $billing_document_date billing_document_date
     *
     * @return self
     */
    public function setBillingDocumentDate($billing_document_date)
    {
        if (is_null($billing_document_date)) {
            array_push($this->openAPINullablesSetToNull, 'billing_document_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_document_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_document_date'] = $billing_document_date;

        return $this;
    }

    /**
     * Gets contract_account
     *
     * @return string|null
     */
    public function getContractAccount()
    {
        return $this->container['contract_account'];
    }

    /**
     * Sets contract_account
     *
     * @param string|null $contract_account Contract Account Number
     *
     * @return self
     */
    public function setContractAccount($contract_account)
    {
        if (is_null($contract_account)) {
            array_push($this->openAPINullablesSetToNull, 'contract_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contract_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contract_account) && (mb_strlen($contract_account) > 12)) {
            throw new \InvalidArgumentException('invalid length for $contract_account when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 12.');
        }

        $this->container['contract_account'] = $contract_account;

        return $this;
    }

    /**
     * Gets additional_value_days
     *
     * @return string|null
     */
    public function getAdditionalValueDays()
    {
        return $this->container['additional_value_days'];
    }

    /**
     * Sets additional_value_days
     *
     * @param string|null $additional_value_days Additional Value Days
     *
     * @return self
     */
    public function setAdditionalValueDays($additional_value_days)
    {
        if (is_null($additional_value_days)) {
            array_push($this->openAPINullablesSetToNull, 'additional_value_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_value_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_value_days) && (mb_strlen($additional_value_days) > 2)) {
            throw new \InvalidArgumentException('invalid length for $additional_value_days when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 2.');
        }

        $this->container['additional_value_days'] = $additional_value_days;

        return $this;
    }

    /**
     * Gets services_rendered_date
     *
     * @return string|null
     */
    public function getServicesRenderedDate()
    {
        return $this->container['services_rendered_date'];
    }

    /**
     * Sets services_rendered_date
     *
     * @param string|null $services_rendered_date Date on which services are rendered
     *
     * @return self
     */
    public function setServicesRenderedDate($services_rendered_date)
    {
        if (is_null($services_rendered_date)) {
            array_push($this->openAPINullablesSetToNull, 'services_rendered_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('services_rendered_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['services_rendered_date'] = $services_rendered_date;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string|null $batch Batch Number
     *
     * @return self
     */
    public function setBatch($batch)
    {
        if (is_null($batch)) {
            array_push($this->openAPINullablesSetToNull, 'batch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('batch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($batch) && (mb_strlen($batch) > 10)) {
            throw new \InvalidArgumentException('invalid length for $batch when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 10.');
        }

        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets production_plant
     *
     * @return string|null
     */
    public function getProductionPlant()
    {
        return $this->container['production_plant'];
    }

    /**
     * Sets production_plant
     *
     * @param string|null $production_plant Plant (Own or External)
     *
     * @return self
     */
    public function setProductionPlant($production_plant)
    {
        if (is_null($production_plant)) {
            array_push($this->openAPINullablesSetToNull, 'production_plant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('production_plant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($production_plant) && (mb_strlen($production_plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $production_plant when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 4.');
        }

        $this->container['production_plant'] = $production_plant;

        return $this;
    }

    /**
     * Gets original_plant
     *
     * @return string|null
     */
    public function getOriginalPlant()
    {
        return $this->container['original_plant'];
    }

    /**
     * Sets original_plant
     *
     * @param string|null $original_plant Original Plant in Plant Substitution
     *
     * @return self
     */
    public function setOriginalPlant($original_plant)
    {
        if (is_null($original_plant)) {
            array_push($this->openAPINullablesSetToNull, 'original_plant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_plant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($original_plant) && (mb_strlen($original_plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $original_plant when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 4.');
        }

        $this->container['original_plant'] = $original_plant;

        return $this;
    }

    /**
     * Gets altv_bsd_conf_substitution_status
     *
     * @return string|null
     */
    public function getAltvBsdConfSubstitutionStatus()
    {
        return $this->container['altv_bsd_conf_substitution_status'];
    }

    /**
     * Sets altv_bsd_conf_substitution_status
     *
     * @param string|null $altv_bsd_conf_substitution_status Substitution Status for Alternative-Based Confirmation (ABC)
     *
     * @return self
     */
    public function setAltvBsdConfSubstitutionStatus($altv_bsd_conf_substitution_status)
    {
        if (is_null($altv_bsd_conf_substitution_status)) {
            array_push($this->openAPINullablesSetToNull, 'altv_bsd_conf_substitution_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('altv_bsd_conf_substitution_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($altv_bsd_conf_substitution_status) && (mb_strlen($altv_bsd_conf_substitution_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $altv_bsd_conf_substitution_status when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['altv_bsd_conf_substitution_status'] = $altv_bsd_conf_substitution_status;

        return $this;
    }

    /**
     * Gets storage_location
     *
     * @return string|null
     */
    public function getStorageLocation()
    {
        return $this->container['storage_location'];
    }

    /**
     * Sets storage_location
     *
     * @param string|null $storage_location storage_location
     *
     * @return self
     */
    public function setStorageLocation($storage_location)
    {
        if (is_null($storage_location)) {
            array_push($this->openAPINullablesSetToNull, 'storage_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($storage_location) && (mb_strlen($storage_location) > 4)) {
            throw new \InvalidArgumentException('invalid length for $storage_location when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 4.');
        }

        $this->container['storage_location'] = $storage_location;

        return $this;
    }

    /**
     * Gets delivery_group
     *
     * @return string|null
     */
    public function getDeliveryGroup()
    {
        return $this->container['delivery_group'];
    }

    /**
     * Sets delivery_group
     *
     * @param string|null $delivery_group Delivery Group (Items are delivered together)
     *
     * @return self
     */
    public function setDeliveryGroup($delivery_group)
    {
        if (is_null($delivery_group)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_group) && (mb_strlen($delivery_group) > 3)) {
            throw new \InvalidArgumentException('invalid length for $delivery_group when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['delivery_group'] = $delivery_group;

        return $this;
    }

    /**
     * Gets shipping_point
     *
     * @return string|null
     */
    public function getShippingPoint()
    {
        return $this->container['shipping_point'];
    }

    /**
     * Sets shipping_point
     *
     * @param string|null $shipping_point Shipping Point / Receiving Point
     *
     * @return self
     */
    public function setShippingPoint($shipping_point)
    {
        if (is_null($shipping_point)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_point');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_point', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_point) && (mb_strlen($shipping_point) > 4)) {
            throw new \InvalidArgumentException('invalid length for $shipping_point when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 4.');
        }

        $this->container['shipping_point'] = $shipping_point;

        return $this;
    }

    /**
     * Gets shipping_type
     *
     * @return string|null
     */
    public function getShippingType()
    {
        return $this->container['shipping_type'];
    }

    /**
     * Sets shipping_type
     *
     * @param string|null $shipping_type shipping_type
     *
     * @return self
     */
    public function setShippingType($shipping_type)
    {
        if (is_null($shipping_type)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_type) && (mb_strlen($shipping_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipping_type when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 2.');
        }

        $this->container['shipping_type'] = $shipping_type;

        return $this;
    }

    /**
     * Gets delivery_priority
     *
     * @return string|null
     */
    public function getDeliveryPriority()
    {
        return $this->container['delivery_priority'];
    }

    /**
     * Sets delivery_priority
     *
     * @param string|null $delivery_priority delivery_priority
     *
     * @return self
     */
    public function setDeliveryPriority($delivery_priority)
    {
        if (is_null($delivery_priority)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_priority');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_priority', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_priority) && (mb_strlen($delivery_priority) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_priority when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 2.');
        }

        $this->container['delivery_priority'] = $delivery_priority;

        return $this;
    }

    /**
     * Gets delivery_date_quantity_is_fixed
     *
     * @return bool|null
     */
    public function getDeliveryDateQuantityIsFixed()
    {
        return $this->container['delivery_date_quantity_is_fixed'];
    }

    /**
     * Sets delivery_date_quantity_is_fixed
     *
     * @param bool|null $delivery_date_quantity_is_fixed Delivery Date and Quantity Fixed
     *
     * @return self
     */
    public function setDeliveryDateQuantityIsFixed($delivery_date_quantity_is_fixed)
    {
        if (is_null($delivery_date_quantity_is_fixed)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_date_quantity_is_fixed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_date_quantity_is_fixed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_date_quantity_is_fixed'] = $delivery_date_quantity_is_fixed;

        return $this;
    }

    /**
     * Gets delivery_date_type_rule
     *
     * @return string|null
     */
    public function getDeliveryDateTypeRule()
    {
        return $this->container['delivery_date_type_rule'];
    }

    /**
     * Sets delivery_date_type_rule
     *
     * @param string|null $delivery_date_type_rule Delivery Date Rule
     *
     * @return self
     */
    public function setDeliveryDateTypeRule($delivery_date_type_rule)
    {
        if (is_null($delivery_date_type_rule)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_date_type_rule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_date_type_rule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_date_type_rule) && (mb_strlen($delivery_date_type_rule) > 1)) {
            throw new \InvalidArgumentException('invalid length for $delivery_date_type_rule when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['delivery_date_type_rule'] = $delivery_date_type_rule;

        return $this;
    }

    /**
     * Gets incoterms_classification
     *
     * @return string|null
     */
    public function getIncotermsClassification()
    {
        return $this->container['incoterms_classification'];
    }

    /**
     * Sets incoterms_classification
     *
     * @param string|null $incoterms_classification Incoterms (Part 1)
     *
     * @return self
     */
    public function setIncotermsClassification($incoterms_classification)
    {
        if (is_null($incoterms_classification)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_classification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_classification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_classification) && (mb_strlen($incoterms_classification) > 3)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_classification when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 3.');
        }

        $this->container['incoterms_classification'] = $incoterms_classification;

        return $this;
    }

    /**
     * Gets incoterms_transfer_location
     *
     * @return string|null
     */
    public function getIncotermsTransferLocation()
    {
        return $this->container['incoterms_transfer_location'];
    }

    /**
     * Sets incoterms_transfer_location
     *
     * @param string|null $incoterms_transfer_location incoterms_transfer_location
     *
     * @return self
     */
    public function setIncotermsTransferLocation($incoterms_transfer_location)
    {
        if (is_null($incoterms_transfer_location)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_transfer_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_transfer_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_transfer_location) && (mb_strlen($incoterms_transfer_location) > 28)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_transfer_location when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 28.');
        }

        $this->container['incoterms_transfer_location'] = $incoterms_transfer_location;

        return $this;
    }

    /**
     * Gets incoterms_location1
     *
     * @return string|null
     */
    public function getIncotermsLocation1()
    {
        return $this->container['incoterms_location1'];
    }

    /**
     * Sets incoterms_location1
     *
     * @param string|null $incoterms_location1 incoterms_location1
     *
     * @return self
     */
    public function setIncotermsLocation1($incoterms_location1)
    {
        if (is_null($incoterms_location1)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location1) && (mb_strlen($incoterms_location1) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location1 when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location1'] = $incoterms_location1;

        return $this;
    }

    /**
     * Gets incoterms_location2
     *
     * @return string|null
     */
    public function getIncotermsLocation2()
    {
        return $this->container['incoterms_location2'];
    }

    /**
     * Sets incoterms_location2
     *
     * @param string|null $incoterms_location2 incoterms_location2
     *
     * @return self
     */
    public function setIncotermsLocation2($incoterms_location2)
    {
        if (is_null($incoterms_location2)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location2) && (mb_strlen($incoterms_location2) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location2 when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location2'] = $incoterms_location2;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return float|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param float|null $tax_amount Tax Amount in Document Currency
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        if (is_null($tax_amount)) {
            array_push($this->openAPINullablesSetToNull, 'tax_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets product_tax_classification1
     *
     * @return string|null
     */
    public function getProductTaxClassification1()
    {
        return $this->container['product_tax_classification1'];
    }

    /**
     * Sets product_tax_classification1
     *
     * @param string|null $product_tax_classification1 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification1($product_tax_classification1)
    {
        if (is_null($product_tax_classification1)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification1) && (mb_strlen($product_tax_classification1) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification1 when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification1'] = $product_tax_classification1;

        return $this;
    }

    /**
     * Gets product_tax_classification2
     *
     * @return string|null
     */
    public function getProductTaxClassification2()
    {
        return $this->container['product_tax_classification2'];
    }

    /**
     * Sets product_tax_classification2
     *
     * @param string|null $product_tax_classification2 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification2($product_tax_classification2)
    {
        if (is_null($product_tax_classification2)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification2) && (mb_strlen($product_tax_classification2) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification2 when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification2'] = $product_tax_classification2;

        return $this;
    }

    /**
     * Gets product_tax_classification3
     *
     * @return string|null
     */
    public function getProductTaxClassification3()
    {
        return $this->container['product_tax_classification3'];
    }

    /**
     * Sets product_tax_classification3
     *
     * @param string|null $product_tax_classification3 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification3($product_tax_classification3)
    {
        if (is_null($product_tax_classification3)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification3) && (mb_strlen($product_tax_classification3) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification3 when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification3'] = $product_tax_classification3;

        return $this;
    }

    /**
     * Gets product_tax_classification4
     *
     * @return string|null
     */
    public function getProductTaxClassification4()
    {
        return $this->container['product_tax_classification4'];
    }

    /**
     * Sets product_tax_classification4
     *
     * @param string|null $product_tax_classification4 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification4($product_tax_classification4)
    {
        if (is_null($product_tax_classification4)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification4) && (mb_strlen($product_tax_classification4) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification4 when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification4'] = $product_tax_classification4;

        return $this;
    }

    /**
     * Gets product_tax_classification5
     *
     * @return string|null
     */
    public function getProductTaxClassification5()
    {
        return $this->container['product_tax_classification5'];
    }

    /**
     * Sets product_tax_classification5
     *
     * @param string|null $product_tax_classification5 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification5($product_tax_classification5)
    {
        if (is_null($product_tax_classification5)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification5) && (mb_strlen($product_tax_classification5) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification5 when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification5'] = $product_tax_classification5;

        return $this;
    }

    /**
     * Gets product_tax_classification6
     *
     * @return string|null
     */
    public function getProductTaxClassification6()
    {
        return $this->container['product_tax_classification6'];
    }

    /**
     * Sets product_tax_classification6
     *
     * @param string|null $product_tax_classification6 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification6($product_tax_classification6)
    {
        if (is_null($product_tax_classification6)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification6) && (mb_strlen($product_tax_classification6) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification6 when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification6'] = $product_tax_classification6;

        return $this;
    }

    /**
     * Gets product_tax_classification7
     *
     * @return string|null
     */
    public function getProductTaxClassification7()
    {
        return $this->container['product_tax_classification7'];
    }

    /**
     * Sets product_tax_classification7
     *
     * @param string|null $product_tax_classification7 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification7($product_tax_classification7)
    {
        if (is_null($product_tax_classification7)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification7) && (mb_strlen($product_tax_classification7) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification7 when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification7'] = $product_tax_classification7;

        return $this;
    }

    /**
     * Gets product_tax_classification8
     *
     * @return string|null
     */
    public function getProductTaxClassification8()
    {
        return $this->container['product_tax_classification8'];
    }

    /**
     * Sets product_tax_classification8
     *
     * @param string|null $product_tax_classification8 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification8($product_tax_classification8)
    {
        if (is_null($product_tax_classification8)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification8) && (mb_strlen($product_tax_classification8) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification8 when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification8'] = $product_tax_classification8;

        return $this;
    }

    /**
     * Gets product_tax_classification9
     *
     * @return string|null
     */
    public function getProductTaxClassification9()
    {
        return $this->container['product_tax_classification9'];
    }

    /**
     * Sets product_tax_classification9
     *
     * @param string|null $product_tax_classification9 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification9($product_tax_classification9)
    {
        if (is_null($product_tax_classification9)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification9) && (mb_strlen($product_tax_classification9) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification9 when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification9'] = $product_tax_classification9;

        return $this;
    }

    /**
     * Gets matl_account_assignment_group
     *
     * @return string|null
     */
    public function getMatlAccountAssignmentGroup()
    {
        return $this->container['matl_account_assignment_group'];
    }

    /**
     * Sets matl_account_assignment_group
     *
     * @param string|null $matl_account_assignment_group Account Assignment Group for Material
     *
     * @return self
     */
    public function setMatlAccountAssignmentGroup($matl_account_assignment_group)
    {
        if (is_null($matl_account_assignment_group)) {
            array_push($this->openAPINullablesSetToNull, 'matl_account_assignment_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('matl_account_assignment_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($matl_account_assignment_group) && (mb_strlen($matl_account_assignment_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $matl_account_assignment_group when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 2.');
        }

        $this->container['matl_account_assignment_group'] = $matl_account_assignment_group;

        return $this;
    }

    /**
     * Gets cost_amount
     *
     * @return float|null
     */
    public function getCostAmount()
    {
        return $this->container['cost_amount'];
    }

    /**
     * Sets cost_amount
     *
     * @param float|null $cost_amount Cost in Document Currency
     *
     * @return self
     */
    public function setCostAmount($cost_amount)
    {
        if (is_null($cost_amount)) {
            array_push($this->openAPINullablesSetToNull, 'cost_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['cost_amount'] = $cost_amount;

        return $this;
    }

    /**
     * Gets customer_payment_terms
     *
     * @return string|null
     */
    public function getCustomerPaymentTerms()
    {
        return $this->container['customer_payment_terms'];
    }

    /**
     * Sets customer_payment_terms
     *
     * @param string|null $customer_payment_terms Key for Terms of Payment
     *
     * @return self
     */
    public function setCustomerPaymentTerms($customer_payment_terms)
    {
        if (is_null($customer_payment_terms)) {
            array_push($this->openAPINullablesSetToNull, 'customer_payment_terms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_payment_terms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_payment_terms) && (mb_strlen($customer_payment_terms) > 4)) {
            throw new \InvalidArgumentException('invalid length for $customer_payment_terms when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 4.');
        }

        $this->container['customer_payment_terms'] = $customer_payment_terms;

        return $this;
    }

    /**
     * Gets fixed_value_date
     *
     * @return string|null
     */
    public function getFixedValueDate()
    {
        return $this->container['fixed_value_date'];
    }

    /**
     * Sets fixed_value_date
     *
     * @param string|null $fixed_value_date fixed_value_date
     *
     * @return self
     */
    public function setFixedValueDate($fixed_value_date)
    {
        if (is_null($fixed_value_date)) {
            array_push($this->openAPINullablesSetToNull, 'fixed_value_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fixed_value_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fixed_value_date'] = $fixed_value_date;

        return $this;
    }

    /**
     * Gets customer_group
     *
     * @return string|null
     */
    public function getCustomerGroup()
    {
        return $this->container['customer_group'];
    }

    /**
     * Sets customer_group
     *
     * @param string|null $customer_group customer_group
     *
     * @return self
     */
    public function setCustomerGroup($customer_group)
    {
        if (is_null($customer_group)) {
            array_push($this->openAPINullablesSetToNull, 'customer_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_group) && (mb_strlen($customer_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_group when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 2.');
        }

        $this->container['customer_group'] = $customer_group;

        return $this;
    }

    /**
     * Gets sales_document_rjcn_reason
     *
     * @return string|null
     */
    public function getSalesDocumentRjcnReason()
    {
        return $this->container['sales_document_rjcn_reason'];
    }

    /**
     * Sets sales_document_rjcn_reason
     *
     * @param string|null $sales_document_rjcn_reason Reason for Rejection of Sales Documents
     *
     * @return self
     */
    public function setSalesDocumentRjcnReason($sales_document_rjcn_reason)
    {
        if (is_null($sales_document_rjcn_reason)) {
            array_push($this->openAPINullablesSetToNull, 'sales_document_rjcn_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_document_rjcn_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_document_rjcn_reason) && (mb_strlen($sales_document_rjcn_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $sales_document_rjcn_reason when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 2.');
        }

        $this->container['sales_document_rjcn_reason'] = $sales_document_rjcn_reason;

        return $this;
    }

    /**
     * Gets item_billing_block_reason
     *
     * @return string|null
     */
    public function getItemBillingBlockReason()
    {
        return $this->container['item_billing_block_reason'];
    }

    /**
     * Sets item_billing_block_reason
     *
     * @param string|null $item_billing_block_reason Billing Block for Item
     *
     * @return self
     */
    public function setItemBillingBlockReason($item_billing_block_reason)
    {
        if (is_null($item_billing_block_reason)) {
            array_push($this->openAPINullablesSetToNull, 'item_billing_block_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_billing_block_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_billing_block_reason) && (mb_strlen($item_billing_block_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $item_billing_block_reason when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 2.');
        }

        $this->container['item_billing_block_reason'] = $item_billing_block_reason;

        return $this;
    }

    /**
     * Gets sls_doc_is_rlvt_for_proof_of_deliv
     *
     * @return bool|null
     */
    public function getSlsDocIsRlvtForProofOfDeliv()
    {
        return $this->container['sls_doc_is_rlvt_for_proof_of_deliv'];
    }

    /**
     * Sets sls_doc_is_rlvt_for_proof_of_deliv
     *
     * @param bool|null $sls_doc_is_rlvt_for_proof_of_deliv Relevant for POD processing
     *
     * @return self
     */
    public function setSlsDocIsRlvtForProofOfDeliv($sls_doc_is_rlvt_for_proof_of_deliv)
    {
        if (is_null($sls_doc_is_rlvt_for_proof_of_deliv)) {
            array_push($this->openAPINullablesSetToNull, 'sls_doc_is_rlvt_for_proof_of_deliv');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sls_doc_is_rlvt_for_proof_of_deliv', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sls_doc_is_rlvt_for_proof_of_deliv'] = $sls_doc_is_rlvt_for_proof_of_deliv;

        return $this;
    }

    /**
     * Gets wbs_element
     *
     * @return string|null
     */
    public function getWbsElement()
    {
        return $this->container['wbs_element'];
    }

    /**
     * Sets wbs_element
     *
     * @param string|null $wbs_element Work Breakdown Structure Element (WBS Element)
     *
     * @return self
     */
    public function setWbsElement($wbs_element)
    {
        if (is_null($wbs_element)) {
            array_push($this->openAPINullablesSetToNull, 'wbs_element');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wbs_element', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($wbs_element) && (mb_strlen($wbs_element) > 24)) {
            throw new \InvalidArgumentException('invalid length for $wbs_element when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 24.');
        }

        $this->container['wbs_element'] = $wbs_element;

        return $this;
    }

    /**
     * Gets profit_center
     *
     * @return string|null
     */
    public function getProfitCenter()
    {
        return $this->container['profit_center'];
    }

    /**
     * Sets profit_center
     *
     * @param string|null $profit_center profit_center
     *
     * @return self
     */
    public function setProfitCenter($profit_center)
    {
        if (is_null($profit_center)) {
            array_push($this->openAPINullablesSetToNull, 'profit_center');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profit_center', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($profit_center) && (mb_strlen($profit_center) > 10)) {
            throw new \InvalidArgumentException('invalid length for $profit_center when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 10.');
        }

        $this->container['profit_center'] = $profit_center;

        return $this;
    }

    /**
     * Gets accounting_exchange_rate
     *
     * @return float|null
     */
    public function getAccountingExchangeRate()
    {
        return $this->container['accounting_exchange_rate'];
    }

    /**
     * Sets accounting_exchange_rate
     *
     * @param float|null $accounting_exchange_rate Exchange Rate for Postings to Financial Accounting
     *
     * @return self
     */
    public function setAccountingExchangeRate($accounting_exchange_rate)
    {
        if (is_null($accounting_exchange_rate)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_exchange_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_exchange_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['accounting_exchange_rate'] = $accounting_exchange_rate;

        return $this;
    }

    /**
     * Gets reference_sd_document
     *
     * @return string|null
     */
    public function getReferenceSdDocument()
    {
        return $this->container['reference_sd_document'];
    }

    /**
     * Sets reference_sd_document
     *
     * @param string|null $reference_sd_document Document Number of Reference Document
     *
     * @return self
     */
    public function setReferenceSdDocument($reference_sd_document)
    {
        if (is_null($reference_sd_document)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document) && (mb_strlen($reference_sd_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 10.');
        }

        $this->container['reference_sd_document'] = $reference_sd_document;

        return $this;
    }

    /**
     * Gets reference_sd_document_item
     *
     * @return string|null
     */
    public function getReferenceSdDocumentItem()
    {
        return $this->container['reference_sd_document_item'];
    }

    /**
     * Sets reference_sd_document_item
     *
     * @param string|null $reference_sd_document_item Item Number of the Reference Item
     *
     * @return self
     */
    public function setReferenceSdDocumentItem($reference_sd_document_item)
    {
        if (is_null($reference_sd_document_item)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document_item) && (mb_strlen($reference_sd_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document_item when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 6.');
        }

        $this->container['reference_sd_document_item'] = $reference_sd_document_item;

        return $this;
    }

    /**
     * Gets sd_process_status
     *
     * @return string|null
     */
    public function getSdProcessStatus()
    {
        return $this->container['sd_process_status'];
    }

    /**
     * Sets sd_process_status
     *
     * @param string|null $sd_process_status Overall Processing Status (Item)
     *
     * @return self
     */
    public function setSdProcessStatus($sd_process_status)
    {
        if (is_null($sd_process_status)) {
            array_push($this->openAPINullablesSetToNull, 'sd_process_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sd_process_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sd_process_status) && (mb_strlen($sd_process_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $sd_process_status when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['sd_process_status'] = $sd_process_status;

        return $this;
    }

    /**
     * Gets delivery_status
     *
     * @return string|null
     */
    public function getDeliveryStatus()
    {
        return $this->container['delivery_status'];
    }

    /**
     * Sets delivery_status
     *
     * @param string|null $delivery_status Delivery Status (Item)
     *
     * @return self
     */
    public function setDeliveryStatus($delivery_status)
    {
        if (is_null($delivery_status)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_status) && (mb_strlen($delivery_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $delivery_status when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['delivery_status'] = $delivery_status;

        return $this;
    }

    /**
     * Gets order_related_billing_status
     *
     * @return string|null
     */
    public function getOrderRelatedBillingStatus()
    {
        return $this->container['order_related_billing_status'];
    }

    /**
     * Sets order_related_billing_status
     *
     * @param string|null $order_related_billing_status Order-Related Billing Status (Item)
     *
     * @return self
     */
    public function setOrderRelatedBillingStatus($order_related_billing_status)
    {
        if (is_null($order_related_billing_status)) {
            array_push($this->openAPINullablesSetToNull, 'order_related_billing_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_related_billing_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($order_related_billing_status) && (mb_strlen($order_related_billing_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $order_related_billing_status when calling APISALESORDERSRVASalesOrderItemType., must be smaller than or equal to 1.');
        }

        $this->container['order_related_billing_status'] = $order_related_billing_status;

        return $this;
    }

    /**
     * Gets subtotal1_amount
     *
     * @return float|null
     */
    public function getSubtotal1Amount()
    {
        return $this->container['subtotal1_amount'];
    }

    /**
     * Sets subtotal1_amount
     *
     * @param float|null $subtotal1_amount Subtotal 1 from Pricing Procedure for Price Element
     *
     * @return self
     */
    public function setSubtotal1Amount($subtotal1_amount)
    {
        if (is_null($subtotal1_amount)) {
            array_push($this->openAPINullablesSetToNull, 'subtotal1_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtotal1_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['subtotal1_amount'] = $subtotal1_amount;

        return $this;
    }

    /**
     * Gets subtotal2_amount
     *
     * @return float|null
     */
    public function getSubtotal2Amount()
    {
        return $this->container['subtotal2_amount'];
    }

    /**
     * Sets subtotal2_amount
     *
     * @param float|null $subtotal2_amount Subtotal 2 from Pricing Procedure for Price Element
     *
     * @return self
     */
    public function setSubtotal2Amount($subtotal2_amount)
    {
        if (is_null($subtotal2_amount)) {
            array_push($this->openAPINullablesSetToNull, 'subtotal2_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtotal2_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['subtotal2_amount'] = $subtotal2_amount;

        return $this;
    }

    /**
     * Gets subtotal3_amount
     *
     * @return float|null
     */
    public function getSubtotal3Amount()
    {
        return $this->container['subtotal3_amount'];
    }

    /**
     * Sets subtotal3_amount
     *
     * @param float|null $subtotal3_amount Subtotal 3 from Pricing Procedure for Price Element
     *
     * @return self
     */
    public function setSubtotal3Amount($subtotal3_amount)
    {
        if (is_null($subtotal3_amount)) {
            array_push($this->openAPINullablesSetToNull, 'subtotal3_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtotal3_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['subtotal3_amount'] = $subtotal3_amount;

        return $this;
    }

    /**
     * Gets subtotal4_amount
     *
     * @return float|null
     */
    public function getSubtotal4Amount()
    {
        return $this->container['subtotal4_amount'];
    }

    /**
     * Sets subtotal4_amount
     *
     * @param float|null $subtotal4_amount Subtotal 4 from Pricing Procedure for Price Element
     *
     * @return self
     */
    public function setSubtotal4Amount($subtotal4_amount)
    {
        if (is_null($subtotal4_amount)) {
            array_push($this->openAPINullablesSetToNull, 'subtotal4_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtotal4_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['subtotal4_amount'] = $subtotal4_amount;

        return $this;
    }

    /**
     * Gets subtotal5_amount
     *
     * @return float|null
     */
    public function getSubtotal5Amount()
    {
        return $this->container['subtotal5_amount'];
    }

    /**
     * Sets subtotal5_amount
     *
     * @param float|null $subtotal5_amount Subtotal 5 from Pricing Procedure for Price Element
     *
     * @return self
     */
    public function setSubtotal5Amount($subtotal5_amount)
    {
        if (is_null($subtotal5_amount)) {
            array_push($this->openAPINullablesSetToNull, 'subtotal5_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtotal5_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['subtotal5_amount'] = $subtotal5_amount;

        return $this;
    }

    /**
     * Gets subtotal6_amount
     *
     * @return float|null
     */
    public function getSubtotal6Amount()
    {
        return $this->container['subtotal6_amount'];
    }

    /**
     * Sets subtotal6_amount
     *
     * @param float|null $subtotal6_amount Subtotal 6 from Pricing Procedure for Price Element
     *
     * @return self
     */
    public function setSubtotal6Amount($subtotal6_amount)
    {
        if (is_null($subtotal6_amount)) {
            array_push($this->openAPINullablesSetToNull, 'subtotal6_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtotal6_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['subtotal6_amount'] = $subtotal6_amount;

        return $this;
    }

    /**
     * Gets to_billing_plan
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemBillingPlanType|null
     */
    public function getToBillingPlan()
    {
        return $this->container['to_billing_plan'];
    }

    /**
     * Sets to_billing_plan
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemBillingPlanType|null $to_billing_plan to_billing_plan
     *
     * @return self
     */
    public function setToBillingPlan($to_billing_plan)
    {
        if (is_null($to_billing_plan)) {
            array_push($this->openAPINullablesSetToNull, 'to_billing_plan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to_billing_plan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['to_billing_plan'] = $to_billing_plan;

        return $this;
    }

    /**
     * Gets to_partner
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToPartner|null
     */
    public function getToPartner()
    {
        return $this->container['to_partner'];
    }

    /**
     * Sets to_partner
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToPartner|null $to_partner to_partner
     *
     * @return self
     */
    public function setToPartner($to_partner)
    {
        if (is_null($to_partner)) {
            throw new \InvalidArgumentException('non-nullable to_partner cannot be null');
        }
        $this->container['to_partner'] = $to_partner;

        return $this;
    }

    /**
     * Gets to_preceding_proc_flow_doc_item
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToPrecedingProcFlowDocItem|null
     */
    public function getToPrecedingProcFlowDocItem()
    {
        return $this->container['to_preceding_proc_flow_doc_item'];
    }

    /**
     * Sets to_preceding_proc_flow_doc_item
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToPrecedingProcFlowDocItem|null $to_preceding_proc_flow_doc_item to_preceding_proc_flow_doc_item
     *
     * @return self
     */
    public function setToPrecedingProcFlowDocItem($to_preceding_proc_flow_doc_item)
    {
        if (is_null($to_preceding_proc_flow_doc_item)) {
            throw new \InvalidArgumentException('non-nullable to_preceding_proc_flow_doc_item cannot be null');
        }
        $this->container['to_preceding_proc_flow_doc_item'] = $to_preceding_proc_flow_doc_item;

        return $this;
    }

    /**
     * Gets to_pricing_element
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToPricingElement|null
     */
    public function getToPricingElement()
    {
        return $this->container['to_pricing_element'];
    }

    /**
     * Sets to_pricing_element
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToPricingElement|null $to_pricing_element to_pricing_element
     *
     * @return self
     */
    public function setToPricingElement($to_pricing_element)
    {
        if (is_null($to_pricing_element)) {
            throw new \InvalidArgumentException('non-nullable to_pricing_element cannot be null');
        }
        $this->container['to_pricing_element'] = $to_pricing_element;

        return $this;
    }

    /**
     * Gets to_related_object
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToRelatedObject|null
     */
    public function getToRelatedObject()
    {
        return $this->container['to_related_object'];
    }

    /**
     * Sets to_related_object
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToRelatedObject|null $to_related_object to_related_object
     *
     * @return self
     */
    public function setToRelatedObject($to_related_object)
    {
        if (is_null($to_related_object)) {
            throw new \InvalidArgumentException('non-nullable to_related_object cannot be null');
        }
        $this->container['to_related_object'] = $to_related_object;

        return $this;
    }

    /**
     * Gets to_sales_order
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderType|null
     */
    public function getToSalesOrder()
    {
        return $this->container['to_sales_order'];
    }

    /**
     * Sets to_sales_order
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderType|null $to_sales_order to_sales_order
     *
     * @return self
     */
    public function setToSalesOrder($to_sales_order)
    {
        if (is_null($to_sales_order)) {
            throw new \InvalidArgumentException('non-nullable to_sales_order cannot be null');
        }
        $this->container['to_sales_order'] = $to_sales_order;

        return $this;
    }

    /**
     * Gets to_schedule_line
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToScheduleLine|null
     */
    public function getToScheduleLine()
    {
        return $this->container['to_schedule_line'];
    }

    /**
     * Sets to_schedule_line
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToScheduleLine|null $to_schedule_line to_schedule_line
     *
     * @return self
     */
    public function setToScheduleLine($to_schedule_line)
    {
        if (is_null($to_schedule_line)) {
            throw new \InvalidArgumentException('non-nullable to_schedule_line cannot be null');
        }
        $this->container['to_schedule_line'] = $to_schedule_line;

        return $this;
    }

    /**
     * Gets to_subsequent_proc_flow_doc_item
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToSubsequentProcFlowDocItem|null
     */
    public function getToSubsequentProcFlowDocItem()
    {
        return $this->container['to_subsequent_proc_flow_doc_item'];
    }

    /**
     * Sets to_subsequent_proc_flow_doc_item
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToSubsequentProcFlowDocItem|null $to_subsequent_proc_flow_doc_item to_subsequent_proc_flow_doc_item
     *
     * @return self
     */
    public function setToSubsequentProcFlowDocItem($to_subsequent_proc_flow_doc_item)
    {
        if (is_null($to_subsequent_proc_flow_doc_item)) {
            throw new \InvalidArgumentException('non-nullable to_subsequent_proc_flow_doc_item cannot be null');
        }
        $this->container['to_subsequent_proc_flow_doc_item'] = $to_subsequent_proc_flow_doc_item;

        return $this;
    }

    /**
     * Gets to_text
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToText|null
     */
    public function getToText()
    {
        return $this->container['to_text'];
    }

    /**
     * Sets to_text
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeToText|null $to_text to_text
     *
     * @return self
     */
    public function setToText($to_text)
    {
        if (is_null($to_text)) {
            throw new \InvalidArgumentException('non-nullable to_text cannot be null');
        }
        $this->container['to_text'] = $to_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


