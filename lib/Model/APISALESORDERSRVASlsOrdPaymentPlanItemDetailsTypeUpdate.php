<?php
/**
 * APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\SalesOrder\Model;

use \ArrayAccess;
use \BeLenka\SAP\SalesOrder\ObjectSerializer;

/**
 * APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_SALES_ORDER_SRV.A_SlsOrdPaymentPlanItemDetailsType-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'electronic_payment_type' => 'string',
        'electronic_payment' => 'string',
        'e_payt_validity_start_date' => 'string',
        'e_payt_validity_end_date' => 'string',
        'electronic_payment_holder_name' => 'string',
        'authorized_amount_in_authzn_crcy' => 'float',
        'authorization_by_digital_payt_srvc' => 'string',
        'e_payt_by_digital_payment_srvc' => 'string',
        'payment_service_provider' => 'string',
        'payment_by_payment_service_prvdr' => 'string',
        'transaction_by_payt_srvc_prvdr' => 'string',
        'merchant_by_clearing_house' => 'string',
        'payment_card_authzn_relation_id' => 'string',
        'maximum_to_be_authorized_amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'electronic_payment_type' => null,
        'electronic_payment' => null,
        'e_payt_validity_start_date' => null,
        'e_payt_validity_end_date' => null,
        'electronic_payment_holder_name' => null,
        'authorized_amount_in_authzn_crcy' => 'decimal',
        'authorization_by_digital_payt_srvc' => null,
        'e_payt_by_digital_payment_srvc' => null,
        'payment_service_provider' => null,
        'payment_by_payment_service_prvdr' => null,
        'transaction_by_payt_srvc_prvdr' => null,
        'merchant_by_clearing_house' => null,
        'payment_card_authzn_relation_id' => null,
        'maximum_to_be_authorized_amount' => 'decimal'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'electronic_payment_type' => true,
		'electronic_payment' => true,
		'e_payt_validity_start_date' => true,
		'e_payt_validity_end_date' => true,
		'electronic_payment_holder_name' => true,
		'authorized_amount_in_authzn_crcy' => true,
		'authorization_by_digital_payt_srvc' => true,
		'e_payt_by_digital_payment_srvc' => true,
		'payment_service_provider' => true,
		'payment_by_payment_service_prvdr' => true,
		'transaction_by_payt_srvc_prvdr' => true,
		'merchant_by_clearing_house' => true,
		'payment_card_authzn_relation_id' => true,
		'maximum_to_be_authorized_amount' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'electronic_payment_type' => 'ElectronicPaymentType',
        'electronic_payment' => 'ElectronicPayment',
        'e_payt_validity_start_date' => 'EPaytValidityStartDate',
        'e_payt_validity_end_date' => 'EPaytValidityEndDate',
        'electronic_payment_holder_name' => 'ElectronicPaymentHolderName',
        'authorized_amount_in_authzn_crcy' => 'AuthorizedAmountInAuthznCrcy',
        'authorization_by_digital_payt_srvc' => 'AuthorizationByDigitalPaytSrvc',
        'e_payt_by_digital_payment_srvc' => 'EPaytByDigitalPaymentSrvc',
        'payment_service_provider' => 'PaymentServiceProvider',
        'payment_by_payment_service_prvdr' => 'PaymentByPaymentServicePrvdr',
        'transaction_by_payt_srvc_prvdr' => 'TransactionByPaytSrvcPrvdr',
        'merchant_by_clearing_house' => 'MerchantByClearingHouse',
        'payment_card_authzn_relation_id' => 'PaymentCardAuthznRelationID',
        'maximum_to_be_authorized_amount' => 'MaximumToBeAuthorizedAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'electronic_payment_type' => 'setElectronicPaymentType',
        'electronic_payment' => 'setElectronicPayment',
        'e_payt_validity_start_date' => 'setEPaytValidityStartDate',
        'e_payt_validity_end_date' => 'setEPaytValidityEndDate',
        'electronic_payment_holder_name' => 'setElectronicPaymentHolderName',
        'authorized_amount_in_authzn_crcy' => 'setAuthorizedAmountInAuthznCrcy',
        'authorization_by_digital_payt_srvc' => 'setAuthorizationByDigitalPaytSrvc',
        'e_payt_by_digital_payment_srvc' => 'setEPaytByDigitalPaymentSrvc',
        'payment_service_provider' => 'setPaymentServiceProvider',
        'payment_by_payment_service_prvdr' => 'setPaymentByPaymentServicePrvdr',
        'transaction_by_payt_srvc_prvdr' => 'setTransactionByPaytSrvcPrvdr',
        'merchant_by_clearing_house' => 'setMerchantByClearingHouse',
        'payment_card_authzn_relation_id' => 'setPaymentCardAuthznRelationId',
        'maximum_to_be_authorized_amount' => 'setMaximumToBeAuthorizedAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'electronic_payment_type' => 'getElectronicPaymentType',
        'electronic_payment' => 'getElectronicPayment',
        'e_payt_validity_start_date' => 'getEPaytValidityStartDate',
        'e_payt_validity_end_date' => 'getEPaytValidityEndDate',
        'electronic_payment_holder_name' => 'getElectronicPaymentHolderName',
        'authorized_amount_in_authzn_crcy' => 'getAuthorizedAmountInAuthznCrcy',
        'authorization_by_digital_payt_srvc' => 'getAuthorizationByDigitalPaytSrvc',
        'e_payt_by_digital_payment_srvc' => 'getEPaytByDigitalPaymentSrvc',
        'payment_service_provider' => 'getPaymentServiceProvider',
        'payment_by_payment_service_prvdr' => 'getPaymentByPaymentServicePrvdr',
        'transaction_by_payt_srvc_prvdr' => 'getTransactionByPaytSrvcPrvdr',
        'merchant_by_clearing_house' => 'getMerchantByClearingHouse',
        'payment_card_authzn_relation_id' => 'getPaymentCardAuthznRelationId',
        'maximum_to_be_authorized_amount' => 'getMaximumToBeAuthorizedAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('electronic_payment_type', $data ?? [], null);
        $this->setIfExists('electronic_payment', $data ?? [], null);
        $this->setIfExists('e_payt_validity_start_date', $data ?? [], null);
        $this->setIfExists('e_payt_validity_end_date', $data ?? [], null);
        $this->setIfExists('electronic_payment_holder_name', $data ?? [], null);
        $this->setIfExists('authorized_amount_in_authzn_crcy', $data ?? [], null);
        $this->setIfExists('authorization_by_digital_payt_srvc', $data ?? [], null);
        $this->setIfExists('e_payt_by_digital_payment_srvc', $data ?? [], null);
        $this->setIfExists('payment_service_provider', $data ?? [], null);
        $this->setIfExists('payment_by_payment_service_prvdr', $data ?? [], null);
        $this->setIfExists('transaction_by_payt_srvc_prvdr', $data ?? [], null);
        $this->setIfExists('merchant_by_clearing_house', $data ?? [], null);
        $this->setIfExists('payment_card_authzn_relation_id', $data ?? [], null);
        $this->setIfExists('maximum_to_be_authorized_amount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['electronic_payment_type']) && (mb_strlen($this->container['electronic_payment_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'electronic_payment_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['electronic_payment']) && (mb_strlen($this->container['electronic_payment']) > 25)) {
            $invalidProperties[] = "invalid value for 'electronic_payment', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['electronic_payment_holder_name']) && (mb_strlen($this->container['electronic_payment_holder_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'electronic_payment_holder_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['authorization_by_digital_payt_srvc']) && (mb_strlen($this->container['authorization_by_digital_payt_srvc']) > 10)) {
            $invalidProperties[] = "invalid value for 'authorization_by_digital_payt_srvc', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['e_payt_by_digital_payment_srvc']) && (mb_strlen($this->container['e_payt_by_digital_payment_srvc']) > 25)) {
            $invalidProperties[] = "invalid value for 'e_payt_by_digital_payment_srvc', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['payment_service_provider']) && (mb_strlen($this->container['payment_service_provider']) > 4)) {
            $invalidProperties[] = "invalid value for 'payment_service_provider', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['payment_by_payment_service_prvdr']) && (mb_strlen($this->container['payment_by_payment_service_prvdr']) > 40)) {
            $invalidProperties[] = "invalid value for 'payment_by_payment_service_prvdr', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['transaction_by_payt_srvc_prvdr']) && (mb_strlen($this->container['transaction_by_payt_srvc_prvdr']) > 40)) {
            $invalidProperties[] = "invalid value for 'transaction_by_payt_srvc_prvdr', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['merchant_by_clearing_house']) && (mb_strlen($this->container['merchant_by_clearing_house']) > 15)) {
            $invalidProperties[] = "invalid value for 'merchant_by_clearing_house', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['payment_card_authzn_relation_id']) && (mb_strlen($this->container['payment_card_authzn_relation_id']) > 44)) {
            $invalidProperties[] = "invalid value for 'payment_card_authzn_relation_id', the character length must be smaller than or equal to 44.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets electronic_payment_type
     *
     * @return string|null
     */
    public function getElectronicPaymentType()
    {
        return $this->container['electronic_payment_type'];
    }

    /**
     * Sets electronic_payment_type
     *
     * @param string|null $electronic_payment_type Electronic Payment: Payment Type
     *
     * @return self
     */
    public function setElectronicPaymentType($electronic_payment_type)
    {
        if (is_null($electronic_payment_type)) {
            array_push($this->openAPINullablesSetToNull, 'electronic_payment_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('electronic_payment_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($electronic_payment_type) && (mb_strlen($electronic_payment_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $electronic_payment_type when calling APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['electronic_payment_type'] = $electronic_payment_type;

        return $this;
    }

    /**
     * Gets electronic_payment
     *
     * @return string|null
     */
    public function getElectronicPayment()
    {
        return $this->container['electronic_payment'];
    }

    /**
     * Sets electronic_payment
     *
     * @param string|null $electronic_payment Electronic Payment: Account Number
     *
     * @return self
     */
    public function setElectronicPayment($electronic_payment)
    {
        if (is_null($electronic_payment)) {
            array_push($this->openAPINullablesSetToNull, 'electronic_payment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('electronic_payment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($electronic_payment) && (mb_strlen($electronic_payment) > 25)) {
            throw new \InvalidArgumentException('invalid length for $electronic_payment when calling APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate., must be smaller than or equal to 25.');
        }

        $this->container['electronic_payment'] = $electronic_payment;

        return $this;
    }

    /**
     * Gets e_payt_validity_start_date
     *
     * @return string|null
     */
    public function getEPaytValidityStartDate()
    {
        return $this->container['e_payt_validity_start_date'];
    }

    /**
     * Sets e_payt_validity_start_date
     *
     * @param string|null $e_payt_validity_start_date Electronic Payment: Valid from
     *
     * @return self
     */
    public function setEPaytValidityStartDate($e_payt_validity_start_date)
    {
        if (is_null($e_payt_validity_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'e_payt_validity_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('e_payt_validity_start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['e_payt_validity_start_date'] = $e_payt_validity_start_date;

        return $this;
    }

    /**
     * Gets e_payt_validity_end_date
     *
     * @return string|null
     */
    public function getEPaytValidityEndDate()
    {
        return $this->container['e_payt_validity_end_date'];
    }

    /**
     * Sets e_payt_validity_end_date
     *
     * @param string|null $e_payt_validity_end_date Electronic Payment: Valid to
     *
     * @return self
     */
    public function setEPaytValidityEndDate($e_payt_validity_end_date)
    {
        if (is_null($e_payt_validity_end_date)) {
            array_push($this->openAPINullablesSetToNull, 'e_payt_validity_end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('e_payt_validity_end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['e_payt_validity_end_date'] = $e_payt_validity_end_date;

        return $this;
    }

    /**
     * Gets electronic_payment_holder_name
     *
     * @return string|null
     */
    public function getElectronicPaymentHolderName()
    {
        return $this->container['electronic_payment_holder_name'];
    }

    /**
     * Sets electronic_payment_holder_name
     *
     * @param string|null $electronic_payment_holder_name Electronic Payment: Name of Account Holder
     *
     * @return self
     */
    public function setElectronicPaymentHolderName($electronic_payment_holder_name)
    {
        if (is_null($electronic_payment_holder_name)) {
            array_push($this->openAPINullablesSetToNull, 'electronic_payment_holder_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('electronic_payment_holder_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($electronic_payment_holder_name) && (mb_strlen($electronic_payment_holder_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $electronic_payment_holder_name when calling APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['electronic_payment_holder_name'] = $electronic_payment_holder_name;

        return $this;
    }

    /**
     * Gets authorized_amount_in_authzn_crcy
     *
     * @return float|null
     */
    public function getAuthorizedAmountInAuthznCrcy()
    {
        return $this->container['authorized_amount_in_authzn_crcy'];
    }

    /**
     * Sets authorized_amount_in_authzn_crcy
     *
     * @param float|null $authorized_amount_in_authzn_crcy Electronic Payment: Authorized Amount
     *
     * @return self
     */
    public function setAuthorizedAmountInAuthznCrcy($authorized_amount_in_authzn_crcy)
    {
        if (is_null($authorized_amount_in_authzn_crcy)) {
            array_push($this->openAPINullablesSetToNull, 'authorized_amount_in_authzn_crcy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorized_amount_in_authzn_crcy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['authorized_amount_in_authzn_crcy'] = $authorized_amount_in_authzn_crcy;

        return $this;
    }

    /**
     * Gets authorization_by_digital_payt_srvc
     *
     * @return string|null
     */
    public function getAuthorizationByDigitalPaytSrvc()
    {
        return $this->container['authorization_by_digital_payt_srvc'];
    }

    /**
     * Sets authorization_by_digital_payt_srvc
     *
     * @param string|null $authorization_by_digital_payt_srvc Electronic Payment: Authorization Number
     *
     * @return self
     */
    public function setAuthorizationByDigitalPaytSrvc($authorization_by_digital_payt_srvc)
    {
        if (is_null($authorization_by_digital_payt_srvc)) {
            array_push($this->openAPINullablesSetToNull, 'authorization_by_digital_payt_srvc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorization_by_digital_payt_srvc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($authorization_by_digital_payt_srvc) && (mb_strlen($authorization_by_digital_payt_srvc) > 10)) {
            throw new \InvalidArgumentException('invalid length for $authorization_by_digital_payt_srvc when calling APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['authorization_by_digital_payt_srvc'] = $authorization_by_digital_payt_srvc;

        return $this;
    }

    /**
     * Gets e_payt_by_digital_payment_srvc
     *
     * @return string|null
     */
    public function getEPaytByDigitalPaymentSrvc()
    {
        return $this->container['e_payt_by_digital_payment_srvc'];
    }

    /**
     * Sets e_payt_by_digital_payment_srvc
     *
     * @param string|null $e_payt_by_digital_payment_srvc Token for Digital Payment Integration in SD
     *
     * @return self
     */
    public function setEPaytByDigitalPaymentSrvc($e_payt_by_digital_payment_srvc)
    {
        if (is_null($e_payt_by_digital_payment_srvc)) {
            array_push($this->openAPINullablesSetToNull, 'e_payt_by_digital_payment_srvc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('e_payt_by_digital_payment_srvc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($e_payt_by_digital_payment_srvc) && (mb_strlen($e_payt_by_digital_payment_srvc) > 25)) {
            throw new \InvalidArgumentException('invalid length for $e_payt_by_digital_payment_srvc when calling APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate., must be smaller than or equal to 25.');
        }

        $this->container['e_payt_by_digital_payment_srvc'] = $e_payt_by_digital_payment_srvc;

        return $this;
    }

    /**
     * Gets payment_service_provider
     *
     * @return string|null
     */
    public function getPaymentServiceProvider()
    {
        return $this->container['payment_service_provider'];
    }

    /**
     * Sets payment_service_provider
     *
     * @param string|null $payment_service_provider Payment Service Provider for Digital Payments
     *
     * @return self
     */
    public function setPaymentServiceProvider($payment_service_provider)
    {
        if (is_null($payment_service_provider)) {
            array_push($this->openAPINullablesSetToNull, 'payment_service_provider');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_service_provider', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_service_provider) && (mb_strlen($payment_service_provider) > 4)) {
            throw new \InvalidArgumentException('invalid length for $payment_service_provider when calling APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['payment_service_provider'] = $payment_service_provider;

        return $this;
    }

    /**
     * Gets payment_by_payment_service_prvdr
     *
     * @return string|null
     */
    public function getPaymentByPaymentServicePrvdr()
    {
        return $this->container['payment_by_payment_service_prvdr'];
    }

    /**
     * Sets payment_by_payment_service_prvdr
     *
     * @param string|null $payment_by_payment_service_prvdr Digital Payments: Payment ID from Payment Service Provider
     *
     * @return self
     */
    public function setPaymentByPaymentServicePrvdr($payment_by_payment_service_prvdr)
    {
        if (is_null($payment_by_payment_service_prvdr)) {
            array_push($this->openAPINullablesSetToNull, 'payment_by_payment_service_prvdr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_by_payment_service_prvdr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_by_payment_service_prvdr) && (mb_strlen($payment_by_payment_service_prvdr) > 40)) {
            throw new \InvalidArgumentException('invalid length for $payment_by_payment_service_prvdr when calling APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['payment_by_payment_service_prvdr'] = $payment_by_payment_service_prvdr;

        return $this;
    }

    /**
     * Gets transaction_by_payt_srvc_prvdr
     *
     * @return string|null
     */
    public function getTransactionByPaytSrvcPrvdr()
    {
        return $this->container['transaction_by_payt_srvc_prvdr'];
    }

    /**
     * Sets transaction_by_payt_srvc_prvdr
     *
     * @param string|null $transaction_by_payt_srvc_prvdr SAP Digital Payments: Transaction ID of PSP
     *
     * @return self
     */
    public function setTransactionByPaytSrvcPrvdr($transaction_by_payt_srvc_prvdr)
    {
        if (is_null($transaction_by_payt_srvc_prvdr)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_by_payt_srvc_prvdr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_by_payt_srvc_prvdr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transaction_by_payt_srvc_prvdr) && (mb_strlen($transaction_by_payt_srvc_prvdr) > 40)) {
            throw new \InvalidArgumentException('invalid length for $transaction_by_payt_srvc_prvdr when calling APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['transaction_by_payt_srvc_prvdr'] = $transaction_by_payt_srvc_prvdr;

        return $this;
    }

    /**
     * Gets merchant_by_clearing_house
     *
     * @return string|null
     */
    public function getMerchantByClearingHouse()
    {
        return $this->container['merchant_by_clearing_house'];
    }

    /**
     * Sets merchant_by_clearing_house
     *
     * @param string|null $merchant_by_clearing_house Electronic Payment: Merchant ID at Clearing House
     *
     * @return self
     */
    public function setMerchantByClearingHouse($merchant_by_clearing_house)
    {
        if (is_null($merchant_by_clearing_house)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_by_clearing_house');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_by_clearing_house', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($merchant_by_clearing_house) && (mb_strlen($merchant_by_clearing_house) > 15)) {
            throw new \InvalidArgumentException('invalid length for $merchant_by_clearing_house when calling APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate., must be smaller than or equal to 15.');
        }

        $this->container['merchant_by_clearing_house'] = $merchant_by_clearing_house;

        return $this;
    }

    /**
     * Gets payment_card_authzn_relation_id
     *
     * @return string|null
     */
    public function getPaymentCardAuthznRelationId()
    {
        return $this->container['payment_card_authzn_relation_id'];
    }

    /**
     * Sets payment_card_authzn_relation_id
     *
     * @param string|null $payment_card_authzn_relation_id Unique identifier of a previous successful authorization
     *
     * @return self
     */
    public function setPaymentCardAuthznRelationId($payment_card_authzn_relation_id)
    {
        if (is_null($payment_card_authzn_relation_id)) {
            array_push($this->openAPINullablesSetToNull, 'payment_card_authzn_relation_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_card_authzn_relation_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_card_authzn_relation_id) && (mb_strlen($payment_card_authzn_relation_id) > 44)) {
            throw new \InvalidArgumentException('invalid length for $payment_card_authzn_relation_id when calling APISALESORDERSRVASlsOrdPaymentPlanItemDetailsTypeUpdate., must be smaller than or equal to 44.');
        }

        $this->container['payment_card_authzn_relation_id'] = $payment_card_authzn_relation_id;

        return $this;
    }

    /**
     * Gets maximum_to_be_authorized_amount
     *
     * @return float|null
     */
    public function getMaximumToBeAuthorizedAmount()
    {
        return $this->container['maximum_to_be_authorized_amount'];
    }

    /**
     * Sets maximum_to_be_authorized_amount
     *
     * @param float|null $maximum_to_be_authorized_amount Value to be billed/calc. on date in billing/invoice plan
     *
     * @return self
     */
    public function setMaximumToBeAuthorizedAmount($maximum_to_be_authorized_amount)
    {
        if (is_null($maximum_to_be_authorized_amount)) {
            array_push($this->openAPINullablesSetToNull, 'maximum_to_be_authorized_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maximum_to_be_authorized_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['maximum_to_be_authorized_amount'] = $maximum_to_be_authorized_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


