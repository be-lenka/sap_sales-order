<?php
/**
 * APISALESORDERSRVASalesOrderItemPartnerAddressType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\SalesOrder\Model;

use \ArrayAccess;
use \BeLenka\SAP\SalesOrder\ObjectSerializer;

/**
 * APISALESORDERSRVASalesOrderItemPartnerAddressType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APISALESORDERSRVASalesOrderItemPartnerAddressType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_SALES_ORDER_SRV.A_SalesOrderItemPartnerAddressType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sales_order' => 'string',
        'sales_order_item' => 'string',
        'partner_function' => 'string',
        'address_representation_code' => 'string',
        'correspondence_language' => 'string',
        'addressee_full_name' => 'string',
        'organization_name1' => 'string',
        'organization_name2' => 'string',
        'organization_name3' => 'string',
        'organization_name4' => 'string',
        'city_name' => 'string',
        'district_name' => 'string',
        'postal_code' => 'string',
        'street_name' => 'string',
        'street_prefix_name1' => 'string',
        'street_prefix_name2' => 'string',
        'street_suffix_name1' => 'string',
        'street_suffix_name2' => 'string',
        'house_number' => 'string',
        'country' => 'string',
        'region' => 'string',
        'form_of_address' => 'string',
        'tax_jurisdiction' => 'string',
        'transport_zone' => 'string',
        'po_box' => 'string',
        'po_box_postal_code' => 'string',
        'email_address' => 'string',
        'mobile_phone_country' => 'string',
        'mobile_number' => 'string',
        'phone_number_country' => 'string',
        'phone_number' => 'string',
        'phone_extension_number' => 'string',
        'fax_number_country' => 'string',
        'fax_area_code_subscriber_number' => 'string',
        'fax_extension_number' => 'string',
        'to_partner' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemPartnerType',
        'to_sales_order' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderType',
        'to_sales_order_item' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sales_order' => null,
        'sales_order_item' => null,
        'partner_function' => null,
        'address_representation_code' => null,
        'correspondence_language' => null,
        'addressee_full_name' => null,
        'organization_name1' => null,
        'organization_name2' => null,
        'organization_name3' => null,
        'organization_name4' => null,
        'city_name' => null,
        'district_name' => null,
        'postal_code' => null,
        'street_name' => null,
        'street_prefix_name1' => null,
        'street_prefix_name2' => null,
        'street_suffix_name1' => null,
        'street_suffix_name2' => null,
        'house_number' => null,
        'country' => null,
        'region' => null,
        'form_of_address' => null,
        'tax_jurisdiction' => null,
        'transport_zone' => null,
        'po_box' => null,
        'po_box_postal_code' => null,
        'email_address' => null,
        'mobile_phone_country' => null,
        'mobile_number' => null,
        'phone_number_country' => null,
        'phone_number' => null,
        'phone_extension_number' => null,
        'fax_number_country' => null,
        'fax_area_code_subscriber_number' => null,
        'fax_extension_number' => null,
        'to_partner' => null,
        'to_sales_order' => null,
        'to_sales_order_item' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sales_order' => false,
		'sales_order_item' => false,
		'partner_function' => false,
		'address_representation_code' => false,
		'correspondence_language' => true,
		'addressee_full_name' => true,
		'organization_name1' => true,
		'organization_name2' => true,
		'organization_name3' => true,
		'organization_name4' => true,
		'city_name' => true,
		'district_name' => true,
		'postal_code' => true,
		'street_name' => true,
		'street_prefix_name1' => true,
		'street_prefix_name2' => true,
		'street_suffix_name1' => true,
		'street_suffix_name2' => true,
		'house_number' => true,
		'country' => true,
		'region' => true,
		'form_of_address' => true,
		'tax_jurisdiction' => true,
		'transport_zone' => true,
		'po_box' => true,
		'po_box_postal_code' => true,
		'email_address' => true,
		'mobile_phone_country' => true,
		'mobile_number' => true,
		'phone_number_country' => true,
		'phone_number' => true,
		'phone_extension_number' => true,
		'fax_number_country' => true,
		'fax_area_code_subscriber_number' => true,
		'fax_extension_number' => true,
		'to_partner' => false,
		'to_sales_order' => false,
		'to_sales_order_item' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sales_order' => 'SalesOrder',
        'sales_order_item' => 'SalesOrderItem',
        'partner_function' => 'PartnerFunction',
        'address_representation_code' => 'AddressRepresentationCode',
        'correspondence_language' => 'CorrespondenceLanguage',
        'addressee_full_name' => 'AddresseeFullName',
        'organization_name1' => 'OrganizationName1',
        'organization_name2' => 'OrganizationName2',
        'organization_name3' => 'OrganizationName3',
        'organization_name4' => 'OrganizationName4',
        'city_name' => 'CityName',
        'district_name' => 'DistrictName',
        'postal_code' => 'PostalCode',
        'street_name' => 'StreetName',
        'street_prefix_name1' => 'StreetPrefixName1',
        'street_prefix_name2' => 'StreetPrefixName2',
        'street_suffix_name1' => 'StreetSuffixName1',
        'street_suffix_name2' => 'StreetSuffixName2',
        'house_number' => 'HouseNumber',
        'country' => 'Country',
        'region' => 'Region',
        'form_of_address' => 'FormOfAddress',
        'tax_jurisdiction' => 'TaxJurisdiction',
        'transport_zone' => 'TransportZone',
        'po_box' => 'POBox',
        'po_box_postal_code' => 'POBoxPostalCode',
        'email_address' => 'EmailAddress',
        'mobile_phone_country' => 'MobilePhoneCountry',
        'mobile_number' => 'MobileNumber',
        'phone_number_country' => 'PhoneNumberCountry',
        'phone_number' => 'PhoneNumber',
        'phone_extension_number' => 'PhoneExtensionNumber',
        'fax_number_country' => 'FaxNumberCountry',
        'fax_area_code_subscriber_number' => 'FaxAreaCodeSubscriberNumber',
        'fax_extension_number' => 'FaxExtensionNumber',
        'to_partner' => 'to_Partner',
        'to_sales_order' => 'to_SalesOrder',
        'to_sales_order_item' => 'to_SalesOrderItem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sales_order' => 'setSalesOrder',
        'sales_order_item' => 'setSalesOrderItem',
        'partner_function' => 'setPartnerFunction',
        'address_representation_code' => 'setAddressRepresentationCode',
        'correspondence_language' => 'setCorrespondenceLanguage',
        'addressee_full_name' => 'setAddresseeFullName',
        'organization_name1' => 'setOrganizationName1',
        'organization_name2' => 'setOrganizationName2',
        'organization_name3' => 'setOrganizationName3',
        'organization_name4' => 'setOrganizationName4',
        'city_name' => 'setCityName',
        'district_name' => 'setDistrictName',
        'postal_code' => 'setPostalCode',
        'street_name' => 'setStreetName',
        'street_prefix_name1' => 'setStreetPrefixName1',
        'street_prefix_name2' => 'setStreetPrefixName2',
        'street_suffix_name1' => 'setStreetSuffixName1',
        'street_suffix_name2' => 'setStreetSuffixName2',
        'house_number' => 'setHouseNumber',
        'country' => 'setCountry',
        'region' => 'setRegion',
        'form_of_address' => 'setFormOfAddress',
        'tax_jurisdiction' => 'setTaxJurisdiction',
        'transport_zone' => 'setTransportZone',
        'po_box' => 'setPoBox',
        'po_box_postal_code' => 'setPoBoxPostalCode',
        'email_address' => 'setEmailAddress',
        'mobile_phone_country' => 'setMobilePhoneCountry',
        'mobile_number' => 'setMobileNumber',
        'phone_number_country' => 'setPhoneNumberCountry',
        'phone_number' => 'setPhoneNumber',
        'phone_extension_number' => 'setPhoneExtensionNumber',
        'fax_number_country' => 'setFaxNumberCountry',
        'fax_area_code_subscriber_number' => 'setFaxAreaCodeSubscriberNumber',
        'fax_extension_number' => 'setFaxExtensionNumber',
        'to_partner' => 'setToPartner',
        'to_sales_order' => 'setToSalesOrder',
        'to_sales_order_item' => 'setToSalesOrderItem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sales_order' => 'getSalesOrder',
        'sales_order_item' => 'getSalesOrderItem',
        'partner_function' => 'getPartnerFunction',
        'address_representation_code' => 'getAddressRepresentationCode',
        'correspondence_language' => 'getCorrespondenceLanguage',
        'addressee_full_name' => 'getAddresseeFullName',
        'organization_name1' => 'getOrganizationName1',
        'organization_name2' => 'getOrganizationName2',
        'organization_name3' => 'getOrganizationName3',
        'organization_name4' => 'getOrganizationName4',
        'city_name' => 'getCityName',
        'district_name' => 'getDistrictName',
        'postal_code' => 'getPostalCode',
        'street_name' => 'getStreetName',
        'street_prefix_name1' => 'getStreetPrefixName1',
        'street_prefix_name2' => 'getStreetPrefixName2',
        'street_suffix_name1' => 'getStreetSuffixName1',
        'street_suffix_name2' => 'getStreetSuffixName2',
        'house_number' => 'getHouseNumber',
        'country' => 'getCountry',
        'region' => 'getRegion',
        'form_of_address' => 'getFormOfAddress',
        'tax_jurisdiction' => 'getTaxJurisdiction',
        'transport_zone' => 'getTransportZone',
        'po_box' => 'getPoBox',
        'po_box_postal_code' => 'getPoBoxPostalCode',
        'email_address' => 'getEmailAddress',
        'mobile_phone_country' => 'getMobilePhoneCountry',
        'mobile_number' => 'getMobileNumber',
        'phone_number_country' => 'getPhoneNumberCountry',
        'phone_number' => 'getPhoneNumber',
        'phone_extension_number' => 'getPhoneExtensionNumber',
        'fax_number_country' => 'getFaxNumberCountry',
        'fax_area_code_subscriber_number' => 'getFaxAreaCodeSubscriberNumber',
        'fax_extension_number' => 'getFaxExtensionNumber',
        'to_partner' => 'getToPartner',
        'to_sales_order' => 'getToSalesOrder',
        'to_sales_order_item' => 'getToSalesOrderItem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sales_order', $data ?? [], null);
        $this->setIfExists('sales_order_item', $data ?? [], null);
        $this->setIfExists('partner_function', $data ?? [], null);
        $this->setIfExists('address_representation_code', $data ?? [], null);
        $this->setIfExists('correspondence_language', $data ?? [], null);
        $this->setIfExists('addressee_full_name', $data ?? [], null);
        $this->setIfExists('organization_name1', $data ?? [], null);
        $this->setIfExists('organization_name2', $data ?? [], null);
        $this->setIfExists('organization_name3', $data ?? [], null);
        $this->setIfExists('organization_name4', $data ?? [], null);
        $this->setIfExists('city_name', $data ?? [], null);
        $this->setIfExists('district_name', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('street_name', $data ?? [], null);
        $this->setIfExists('street_prefix_name1', $data ?? [], null);
        $this->setIfExists('street_prefix_name2', $data ?? [], null);
        $this->setIfExists('street_suffix_name1', $data ?? [], null);
        $this->setIfExists('street_suffix_name2', $data ?? [], null);
        $this->setIfExists('house_number', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('form_of_address', $data ?? [], null);
        $this->setIfExists('tax_jurisdiction', $data ?? [], null);
        $this->setIfExists('transport_zone', $data ?? [], null);
        $this->setIfExists('po_box', $data ?? [], null);
        $this->setIfExists('po_box_postal_code', $data ?? [], null);
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('mobile_phone_country', $data ?? [], null);
        $this->setIfExists('mobile_number', $data ?? [], null);
        $this->setIfExists('phone_number_country', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('phone_extension_number', $data ?? [], null);
        $this->setIfExists('fax_number_country', $data ?? [], null);
        $this->setIfExists('fax_area_code_subscriber_number', $data ?? [], null);
        $this->setIfExists('fax_extension_number', $data ?? [], null);
        $this->setIfExists('to_partner', $data ?? [], null);
        $this->setIfExists('to_sales_order', $data ?? [], null);
        $this->setIfExists('to_sales_order_item', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sales_order']) && (mb_strlen($this->container['sales_order']) > 10)) {
            $invalidProperties[] = "invalid value for 'sales_order', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_order_item']) && (mb_strlen($this->container['sales_order_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'sales_order_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['partner_function']) && (mb_strlen($this->container['partner_function']) > 2)) {
            $invalidProperties[] = "invalid value for 'partner_function', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['address_representation_code']) && (mb_strlen($this->container['address_representation_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'address_representation_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['correspondence_language']) && (mb_strlen($this->container['correspondence_language']) > 2)) {
            $invalidProperties[] = "invalid value for 'correspondence_language', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['addressee_full_name']) && (mb_strlen($this->container['addressee_full_name']) > 80)) {
            $invalidProperties[] = "invalid value for 'addressee_full_name', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['organization_name1']) && (mb_strlen($this->container['organization_name1']) > 40)) {
            $invalidProperties[] = "invalid value for 'organization_name1', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['organization_name2']) && (mb_strlen($this->container['organization_name2']) > 40)) {
            $invalidProperties[] = "invalid value for 'organization_name2', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['organization_name3']) && (mb_strlen($this->container['organization_name3']) > 40)) {
            $invalidProperties[] = "invalid value for 'organization_name3', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['organization_name4']) && (mb_strlen($this->container['organization_name4']) > 40)) {
            $invalidProperties[] = "invalid value for 'organization_name4', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['city_name']) && (mb_strlen($this->container['city_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'city_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['district_name']) && (mb_strlen($this->container['district_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'district_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['street_name']) && (mb_strlen($this->container['street_name']) > 60)) {
            $invalidProperties[] = "invalid value for 'street_name', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['street_prefix_name1']) && (mb_strlen($this->container['street_prefix_name1']) > 40)) {
            $invalidProperties[] = "invalid value for 'street_prefix_name1', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['street_prefix_name2']) && (mb_strlen($this->container['street_prefix_name2']) > 40)) {
            $invalidProperties[] = "invalid value for 'street_prefix_name2', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['street_suffix_name1']) && (mb_strlen($this->container['street_suffix_name1']) > 40)) {
            $invalidProperties[] = "invalid value for 'street_suffix_name1', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['street_suffix_name2']) && (mb_strlen($this->container['street_suffix_name2']) > 40)) {
            $invalidProperties[] = "invalid value for 'street_suffix_name2', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['house_number']) && (mb_strlen($this->container['house_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'house_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 3)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['region']) && (mb_strlen($this->container['region']) > 3)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['form_of_address']) && (mb_strlen($this->container['form_of_address']) > 4)) {
            $invalidProperties[] = "invalid value for 'form_of_address', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['tax_jurisdiction']) && (mb_strlen($this->container['tax_jurisdiction']) > 15)) {
            $invalidProperties[] = "invalid value for 'tax_jurisdiction', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['transport_zone']) && (mb_strlen($this->container['transport_zone']) > 10)) {
            $invalidProperties[] = "invalid value for 'transport_zone', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['po_box']) && (mb_strlen($this->container['po_box']) > 10)) {
            $invalidProperties[] = "invalid value for 'po_box', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['po_box_postal_code']) && (mb_strlen($this->container['po_box_postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'po_box_postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) > 241)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be smaller than or equal to 241.";
        }

        if (!is_null($this->container['mobile_phone_country']) && (mb_strlen($this->container['mobile_phone_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'mobile_phone_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['mobile_number']) && (mb_strlen($this->container['mobile_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'mobile_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['phone_number_country']) && (mb_strlen($this->container['phone_number_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'phone_number_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['phone_extension_number']) && (mb_strlen($this->container['phone_extension_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'phone_extension_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['fax_number_country']) && (mb_strlen($this->container['fax_number_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'fax_number_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['fax_area_code_subscriber_number']) && (mb_strlen($this->container['fax_area_code_subscriber_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'fax_area_code_subscriber_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['fax_extension_number']) && (mb_strlen($this->container['fax_extension_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'fax_extension_number', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sales_order
     *
     * @return string|null
     */
    public function getSalesOrder()
    {
        return $this->container['sales_order'];
    }

    /**
     * Sets sales_order
     *
     * @param string|null $sales_order Sales and Distribution Document Number
     *
     * @return self
     */
    public function setSalesOrder($sales_order)
    {
        if (is_null($sales_order)) {
            throw new \InvalidArgumentException('non-nullable sales_order cannot be null');
        }
        if ((mb_strlen($sales_order) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sales_order when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 10.');
        }

        $this->container['sales_order'] = $sales_order;

        return $this;
    }

    /**
     * Gets sales_order_item
     *
     * @return string|null
     */
    public function getSalesOrderItem()
    {
        return $this->container['sales_order_item'];
    }

    /**
     * Sets sales_order_item
     *
     * @param string|null $sales_order_item Item number of the SD document
     *
     * @return self
     */
    public function setSalesOrderItem($sales_order_item)
    {
        if (is_null($sales_order_item)) {
            throw new \InvalidArgumentException('non-nullable sales_order_item cannot be null');
        }
        if ((mb_strlen($sales_order_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_item when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 6.');
        }

        $this->container['sales_order_item'] = $sales_order_item;

        return $this;
    }

    /**
     * Gets partner_function
     *
     * @return string|null
     */
    public function getPartnerFunction()
    {
        return $this->container['partner_function'];
    }

    /**
     * Sets partner_function
     *
     * @param string|null $partner_function partner_function
     *
     * @return self
     */
    public function setPartnerFunction($partner_function)
    {
        if (is_null($partner_function)) {
            throw new \InvalidArgumentException('non-nullable partner_function cannot be null');
        }
        if ((mb_strlen($partner_function) > 2)) {
            throw new \InvalidArgumentException('invalid length for $partner_function when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 2.');
        }

        $this->container['partner_function'] = $partner_function;

        return $this;
    }

    /**
     * Gets address_representation_code
     *
     * @return string|null
     */
    public function getAddressRepresentationCode()
    {
        return $this->container['address_representation_code'];
    }

    /**
     * Sets address_representation_code
     *
     * @param string|null $address_representation_code Version ID for International Addresses
     *
     * @return self
     */
    public function setAddressRepresentationCode($address_representation_code)
    {
        if (is_null($address_representation_code)) {
            throw new \InvalidArgumentException('non-nullable address_representation_code cannot be null');
        }
        if ((mb_strlen($address_representation_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $address_representation_code when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 1.');
        }

        $this->container['address_representation_code'] = $address_representation_code;

        return $this;
    }

    /**
     * Gets correspondence_language
     *
     * @return string|null
     */
    public function getCorrespondenceLanguage()
    {
        return $this->container['correspondence_language'];
    }

    /**
     * Sets correspondence_language
     *
     * @param string|null $correspondence_language correspondence_language
     *
     * @return self
     */
    public function setCorrespondenceLanguage($correspondence_language)
    {
        if (is_null($correspondence_language)) {
            array_push($this->openAPINullablesSetToNull, 'correspondence_language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('correspondence_language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($correspondence_language) && (mb_strlen($correspondence_language) > 2)) {
            throw new \InvalidArgumentException('invalid length for $correspondence_language when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 2.');
        }

        $this->container['correspondence_language'] = $correspondence_language;

        return $this;
    }

    /**
     * Gets addressee_full_name
     *
     * @return string|null
     */
    public function getAddresseeFullName()
    {
        return $this->container['addressee_full_name'];
    }

    /**
     * Sets addressee_full_name
     *
     * @param string|null $addressee_full_name Full Name of Person
     *
     * @return self
     */
    public function setAddresseeFullName($addressee_full_name)
    {
        if (is_null($addressee_full_name)) {
            array_push($this->openAPINullablesSetToNull, 'addressee_full_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addressee_full_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($addressee_full_name) && (mb_strlen($addressee_full_name) > 80)) {
            throw new \InvalidArgumentException('invalid length for $addressee_full_name when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 80.');
        }

        $this->container['addressee_full_name'] = $addressee_full_name;

        return $this;
    }

    /**
     * Gets organization_name1
     *
     * @return string|null
     */
    public function getOrganizationName1()
    {
        return $this->container['organization_name1'];
    }

    /**
     * Sets organization_name1
     *
     * @param string|null $organization_name1 Name 1
     *
     * @return self
     */
    public function setOrganizationName1($organization_name1)
    {
        if (is_null($organization_name1)) {
            array_push($this->openAPINullablesSetToNull, 'organization_name1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_name1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($organization_name1) && (mb_strlen($organization_name1) > 40)) {
            throw new \InvalidArgumentException('invalid length for $organization_name1 when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 40.');
        }

        $this->container['organization_name1'] = $organization_name1;

        return $this;
    }

    /**
     * Gets organization_name2
     *
     * @return string|null
     */
    public function getOrganizationName2()
    {
        return $this->container['organization_name2'];
    }

    /**
     * Sets organization_name2
     *
     * @param string|null $organization_name2 organization_name2
     *
     * @return self
     */
    public function setOrganizationName2($organization_name2)
    {
        if (is_null($organization_name2)) {
            array_push($this->openAPINullablesSetToNull, 'organization_name2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_name2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($organization_name2) && (mb_strlen($organization_name2) > 40)) {
            throw new \InvalidArgumentException('invalid length for $organization_name2 when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 40.');
        }

        $this->container['organization_name2'] = $organization_name2;

        return $this;
    }

    /**
     * Gets organization_name3
     *
     * @return string|null
     */
    public function getOrganizationName3()
    {
        return $this->container['organization_name3'];
    }

    /**
     * Sets organization_name3
     *
     * @param string|null $organization_name3 organization_name3
     *
     * @return self
     */
    public function setOrganizationName3($organization_name3)
    {
        if (is_null($organization_name3)) {
            array_push($this->openAPINullablesSetToNull, 'organization_name3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_name3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($organization_name3) && (mb_strlen($organization_name3) > 40)) {
            throw new \InvalidArgumentException('invalid length for $organization_name3 when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 40.');
        }

        $this->container['organization_name3'] = $organization_name3;

        return $this;
    }

    /**
     * Gets organization_name4
     *
     * @return string|null
     */
    public function getOrganizationName4()
    {
        return $this->container['organization_name4'];
    }

    /**
     * Sets organization_name4
     *
     * @param string|null $organization_name4 organization_name4
     *
     * @return self
     */
    public function setOrganizationName4($organization_name4)
    {
        if (is_null($organization_name4)) {
            array_push($this->openAPINullablesSetToNull, 'organization_name4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_name4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($organization_name4) && (mb_strlen($organization_name4) > 40)) {
            throw new \InvalidArgumentException('invalid length for $organization_name4 when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 40.');
        }

        $this->container['organization_name4'] = $organization_name4;

        return $this;
    }

    /**
     * Gets city_name
     *
     * @return string|null
     */
    public function getCityName()
    {
        return $this->container['city_name'];
    }

    /**
     * Sets city_name
     *
     * @param string|null $city_name city_name
     *
     * @return self
     */
    public function setCityName($city_name)
    {
        if (is_null($city_name)) {
            array_push($this->openAPINullablesSetToNull, 'city_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($city_name) && (mb_strlen($city_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $city_name when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 40.');
        }

        $this->container['city_name'] = $city_name;

        return $this;
    }

    /**
     * Gets district_name
     *
     * @return string|null
     */
    public function getDistrictName()
    {
        return $this->container['district_name'];
    }

    /**
     * Sets district_name
     *
     * @param string|null $district_name district_name
     *
     * @return self
     */
    public function setDistrictName($district_name)
    {
        if (is_null($district_name)) {
            array_push($this->openAPINullablesSetToNull, 'district_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('district_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($district_name) && (mb_strlen($district_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $district_name when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 40.');
        }

        $this->container['district_name'] = $district_name;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code City Postal Code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 10.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string|null
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string|null $street_name street_name
     *
     * @return self
     */
    public function setStreetName($street_name)
    {
        if (is_null($street_name)) {
            array_push($this->openAPINullablesSetToNull, 'street_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street_name) && (mb_strlen($street_name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $street_name when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 60.');
        }

        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets street_prefix_name1
     *
     * @return string|null
     */
    public function getStreetPrefixName1()
    {
        return $this->container['street_prefix_name1'];
    }

    /**
     * Sets street_prefix_name1
     *
     * @param string|null $street_prefix_name1 Street 2
     *
     * @return self
     */
    public function setStreetPrefixName1($street_prefix_name1)
    {
        if (is_null($street_prefix_name1)) {
            array_push($this->openAPINullablesSetToNull, 'street_prefix_name1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_prefix_name1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street_prefix_name1) && (mb_strlen($street_prefix_name1) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street_prefix_name1 when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 40.');
        }

        $this->container['street_prefix_name1'] = $street_prefix_name1;

        return $this;
    }

    /**
     * Gets street_prefix_name2
     *
     * @return string|null
     */
    public function getStreetPrefixName2()
    {
        return $this->container['street_prefix_name2'];
    }

    /**
     * Sets street_prefix_name2
     *
     * @param string|null $street_prefix_name2 street_prefix_name2
     *
     * @return self
     */
    public function setStreetPrefixName2($street_prefix_name2)
    {
        if (is_null($street_prefix_name2)) {
            array_push($this->openAPINullablesSetToNull, 'street_prefix_name2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_prefix_name2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street_prefix_name2) && (mb_strlen($street_prefix_name2) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street_prefix_name2 when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 40.');
        }

        $this->container['street_prefix_name2'] = $street_prefix_name2;

        return $this;
    }

    /**
     * Gets street_suffix_name1
     *
     * @return string|null
     */
    public function getStreetSuffixName1()
    {
        return $this->container['street_suffix_name1'];
    }

    /**
     * Sets street_suffix_name1
     *
     * @param string|null $street_suffix_name1 street_suffix_name1
     *
     * @return self
     */
    public function setStreetSuffixName1($street_suffix_name1)
    {
        if (is_null($street_suffix_name1)) {
            array_push($this->openAPINullablesSetToNull, 'street_suffix_name1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_suffix_name1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street_suffix_name1) && (mb_strlen($street_suffix_name1) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street_suffix_name1 when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 40.');
        }

        $this->container['street_suffix_name1'] = $street_suffix_name1;

        return $this;
    }

    /**
     * Gets street_suffix_name2
     *
     * @return string|null
     */
    public function getStreetSuffixName2()
    {
        return $this->container['street_suffix_name2'];
    }

    /**
     * Sets street_suffix_name2
     *
     * @param string|null $street_suffix_name2 street_suffix_name2
     *
     * @return self
     */
    public function setStreetSuffixName2($street_suffix_name2)
    {
        if (is_null($street_suffix_name2)) {
            array_push($this->openAPINullablesSetToNull, 'street_suffix_name2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_suffix_name2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street_suffix_name2) && (mb_strlen($street_suffix_name2) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street_suffix_name2 when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 40.');
        }

        $this->container['street_suffix_name2'] = $street_suffix_name2;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return string|null
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param string|null $house_number house_number
     *
     * @return self
     */
    public function setHouseNumber($house_number)
    {
        if (is_null($house_number)) {
            array_push($this->openAPINullablesSetToNull, 'house_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('house_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($house_number) && (mb_strlen($house_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $house_number when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 10.');
        }

        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($country) && (mb_strlen($country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 3.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region Region (State, Province, County)
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            array_push($this->openAPINullablesSetToNull, 'region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($region) && (mb_strlen($region) > 3)) {
            throw new \InvalidArgumentException('invalid length for $region when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 3.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets form_of_address
     *
     * @return string|null
     */
    public function getFormOfAddress()
    {
        return $this->container['form_of_address'];
    }

    /**
     * Sets form_of_address
     *
     * @param string|null $form_of_address Form-of-Address Key
     *
     * @return self
     */
    public function setFormOfAddress($form_of_address)
    {
        if (is_null($form_of_address)) {
            array_push($this->openAPINullablesSetToNull, 'form_of_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_of_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($form_of_address) && (mb_strlen($form_of_address) > 4)) {
            throw new \InvalidArgumentException('invalid length for $form_of_address when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 4.');
        }

        $this->container['form_of_address'] = $form_of_address;

        return $this;
    }

    /**
     * Gets tax_jurisdiction
     *
     * @return string|null
     */
    public function getTaxJurisdiction()
    {
        return $this->container['tax_jurisdiction'];
    }

    /**
     * Sets tax_jurisdiction
     *
     * @param string|null $tax_jurisdiction tax_jurisdiction
     *
     * @return self
     */
    public function setTaxJurisdiction($tax_jurisdiction)
    {
        if (is_null($tax_jurisdiction)) {
            array_push($this->openAPINullablesSetToNull, 'tax_jurisdiction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_jurisdiction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tax_jurisdiction) && (mb_strlen($tax_jurisdiction) > 15)) {
            throw new \InvalidArgumentException('invalid length for $tax_jurisdiction when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 15.');
        }

        $this->container['tax_jurisdiction'] = $tax_jurisdiction;

        return $this;
    }

    /**
     * Gets transport_zone
     *
     * @return string|null
     */
    public function getTransportZone()
    {
        return $this->container['transport_zone'];
    }

    /**
     * Sets transport_zone
     *
     * @param string|null $transport_zone Transportation zone to or from which the goods are delivered
     *
     * @return self
     */
    public function setTransportZone($transport_zone)
    {
        if (is_null($transport_zone)) {
            array_push($this->openAPINullablesSetToNull, 'transport_zone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transport_zone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transport_zone) && (mb_strlen($transport_zone) > 10)) {
            throw new \InvalidArgumentException('invalid length for $transport_zone when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 10.');
        }

        $this->container['transport_zone'] = $transport_zone;

        return $this;
    }

    /**
     * Gets po_box
     *
     * @return string|null
     */
    public function getPoBox()
    {
        return $this->container['po_box'];
    }

    /**
     * Sets po_box
     *
     * @param string|null $po_box po_box
     *
     * @return self
     */
    public function setPoBox($po_box)
    {
        if (is_null($po_box)) {
            array_push($this->openAPINullablesSetToNull, 'po_box');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($po_box) && (mb_strlen($po_box) > 10)) {
            throw new \InvalidArgumentException('invalid length for $po_box when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 10.');
        }

        $this->container['po_box'] = $po_box;

        return $this;
    }

    /**
     * Gets po_box_postal_code
     *
     * @return string|null
     */
    public function getPoBoxPostalCode()
    {
        return $this->container['po_box_postal_code'];
    }

    /**
     * Sets po_box_postal_code
     *
     * @param string|null $po_box_postal_code po_box_postal_code
     *
     * @return self
     */
    public function setPoBoxPostalCode($po_box_postal_code)
    {
        if (is_null($po_box_postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'po_box_postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box_postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($po_box_postal_code) && (mb_strlen($po_box_postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $po_box_postal_code when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 10.');
        }

        $this->container['po_box_postal_code'] = $po_box_postal_code;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address email_address
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        if (is_null($email_address)) {
            array_push($this->openAPINullablesSetToNull, 'email_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($email_address) && (mb_strlen($email_address) > 241)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 241.');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets mobile_phone_country
     *
     * @return string|null
     */
    public function getMobilePhoneCountry()
    {
        return $this->container['mobile_phone_country'];
    }

    /**
     * Sets mobile_phone_country
     *
     * @param string|null $mobile_phone_country Country/Region for Telephone/Fax Number
     *
     * @return self
     */
    public function setMobilePhoneCountry($mobile_phone_country)
    {
        if (is_null($mobile_phone_country)) {
            array_push($this->openAPINullablesSetToNull, 'mobile_phone_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mobile_phone_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($mobile_phone_country) && (mb_strlen($mobile_phone_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone_country when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 3.');
        }

        $this->container['mobile_phone_country'] = $mobile_phone_country;

        return $this;
    }

    /**
     * Gets mobile_number
     *
     * @return string|null
     */
    public function getMobileNumber()
    {
        return $this->container['mobile_number'];
    }

    /**
     * Sets mobile_number
     *
     * @param string|null $mobile_number Telephone No.: Dialing Code and Number
     *
     * @return self
     */
    public function setMobileNumber($mobile_number)
    {
        if (is_null($mobile_number)) {
            array_push($this->openAPINullablesSetToNull, 'mobile_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mobile_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($mobile_number) && (mb_strlen($mobile_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $mobile_number when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 30.');
        }

        $this->container['mobile_number'] = $mobile_number;

        return $this;
    }

    /**
     * Gets phone_number_country
     *
     * @return string|null
     */
    public function getPhoneNumberCountry()
    {
        return $this->container['phone_number_country'];
    }

    /**
     * Sets phone_number_country
     *
     * @param string|null $phone_number_country Country/Region for Telephone/Fax Number
     *
     * @return self
     */
    public function setPhoneNumberCountry($phone_number_country)
    {
        if (is_null($phone_number_country)) {
            array_push($this->openAPINullablesSetToNull, 'phone_number_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_number_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($phone_number_country) && (mb_strlen($phone_number_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $phone_number_country when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 3.');
        }

        $this->container['phone_number_country'] = $phone_number_country;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number Telephone No.: Dialing Code and Number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 30.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets phone_extension_number
     *
     * @return string|null
     */
    public function getPhoneExtensionNumber()
    {
        return $this->container['phone_extension_number'];
    }

    /**
     * Sets phone_extension_number
     *
     * @param string|null $phone_extension_number Telephone no.: Extension
     *
     * @return self
     */
    public function setPhoneExtensionNumber($phone_extension_number)
    {
        if (is_null($phone_extension_number)) {
            array_push($this->openAPINullablesSetToNull, 'phone_extension_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_extension_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($phone_extension_number) && (mb_strlen($phone_extension_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $phone_extension_number when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 10.');
        }

        $this->container['phone_extension_number'] = $phone_extension_number;

        return $this;
    }

    /**
     * Gets fax_number_country
     *
     * @return string|null
     */
    public function getFaxNumberCountry()
    {
        return $this->container['fax_number_country'];
    }

    /**
     * Sets fax_number_country
     *
     * @param string|null $fax_number_country Country/Region for Telephone/Fax Number
     *
     * @return self
     */
    public function setFaxNumberCountry($fax_number_country)
    {
        if (is_null($fax_number_country)) {
            array_push($this->openAPINullablesSetToNull, 'fax_number_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax_number_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fax_number_country) && (mb_strlen($fax_number_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $fax_number_country when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 3.');
        }

        $this->container['fax_number_country'] = $fax_number_country;

        return $this;
    }

    /**
     * Gets fax_area_code_subscriber_number
     *
     * @return string|null
     */
    public function getFaxAreaCodeSubscriberNumber()
    {
        return $this->container['fax_area_code_subscriber_number'];
    }

    /**
     * Sets fax_area_code_subscriber_number
     *
     * @param string|null $fax_area_code_subscriber_number Fax Number: Dialing Code and Number
     *
     * @return self
     */
    public function setFaxAreaCodeSubscriberNumber($fax_area_code_subscriber_number)
    {
        if (is_null($fax_area_code_subscriber_number)) {
            array_push($this->openAPINullablesSetToNull, 'fax_area_code_subscriber_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax_area_code_subscriber_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fax_area_code_subscriber_number) && (mb_strlen($fax_area_code_subscriber_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $fax_area_code_subscriber_number when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 30.');
        }

        $this->container['fax_area_code_subscriber_number'] = $fax_area_code_subscriber_number;

        return $this;
    }

    /**
     * Gets fax_extension_number
     *
     * @return string|null
     */
    public function getFaxExtensionNumber()
    {
        return $this->container['fax_extension_number'];
    }

    /**
     * Sets fax_extension_number
     *
     * @param string|null $fax_extension_number Fax no.: Extension
     *
     * @return self
     */
    public function setFaxExtensionNumber($fax_extension_number)
    {
        if (is_null($fax_extension_number)) {
            array_push($this->openAPINullablesSetToNull, 'fax_extension_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax_extension_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fax_extension_number) && (mb_strlen($fax_extension_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $fax_extension_number when calling APISALESORDERSRVASalesOrderItemPartnerAddressType., must be smaller than or equal to 10.');
        }

        $this->container['fax_extension_number'] = $fax_extension_number;

        return $this;
    }

    /**
     * Gets to_partner
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemPartnerType|null
     */
    public function getToPartner()
    {
        return $this->container['to_partner'];
    }

    /**
     * Sets to_partner
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemPartnerType|null $to_partner to_partner
     *
     * @return self
     */
    public function setToPartner($to_partner)
    {
        if (is_null($to_partner)) {
            throw new \InvalidArgumentException('non-nullable to_partner cannot be null');
        }
        $this->container['to_partner'] = $to_partner;

        return $this;
    }

    /**
     * Gets to_sales_order
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderType|null
     */
    public function getToSalesOrder()
    {
        return $this->container['to_sales_order'];
    }

    /**
     * Sets to_sales_order
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderType|null $to_sales_order to_sales_order
     *
     * @return self
     */
    public function setToSalesOrder($to_sales_order)
    {
        if (is_null($to_sales_order)) {
            throw new \InvalidArgumentException('non-nullable to_sales_order cannot be null');
        }
        $this->container['to_sales_order'] = $to_sales_order;

        return $this;
    }

    /**
     * Gets to_sales_order_item
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemType|null
     */
    public function getToSalesOrderItem()
    {
        return $this->container['to_sales_order_item'];
    }

    /**
     * Sets to_sales_order_item
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemType|null $to_sales_order_item to_sales_order_item
     *
     * @return self
     */
    public function setToSalesOrderItem($to_sales_order_item)
    {
        if (is_null($to_sales_order_item)) {
            throw new \InvalidArgumentException('non-nullable to_sales_order_item cannot be null');
        }
        $this->container['to_sales_order_item'] = $to_sales_order_item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


