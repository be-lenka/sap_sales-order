<?php
/**
 * APISALESORDERSRVASalesOrderType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\SalesOrder\Model;

use \ArrayAccess;
use \BeLenka\SAP\SalesOrder\ObjectSerializer;

/**
 * APISALESORDERSRVASalesOrderType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APISALESORDERSRVASalesOrderType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_SALES_ORDER_SRV.A_SalesOrderType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sales_order' => 'string',
        'sales_order_type' => 'string',
        'sales_order_type_internal_code' => 'string',
        'sales_organization' => 'string',
        'distribution_channel' => 'string',
        'organization_division' => 'string',
        'sales_group' => 'string',
        'sales_office' => 'string',
        'sales_district' => 'string',
        'sold_to_party' => 'string',
        'creation_date' => 'string',
        'created_by_user' => 'string',
        'last_change_date' => 'string',
        'sender_business_system_name' => 'string',
        'external_document_id' => 'string',
        'last_change_date_time' => 'string',
        'external_doc_last_change_date_time' => 'string',
        'purchase_order_by_customer' => 'string',
        'purchase_order_by_ship_to_party' => 'string',
        'customer_purchase_order_type' => 'string',
        'customer_purchase_order_date' => 'string',
        'sales_order_date' => 'string',
        'total_net_amount' => 'float',
        'overall_delivery_status' => 'string',
        'total_block_status' => 'string',
        'overall_ord_reltd_billg_status' => 'string',
        'overall_sd_doc_reference_status' => 'string',
        'transaction_currency' => 'string',
        'sd_document_reason' => 'string',
        'pricing_date' => 'string',
        'price_detn_exchange_rate' => 'float',
        'billing_plan' => 'string',
        'requested_delivery_date' => 'string',
        'shipping_condition' => 'string',
        'complete_delivery_is_defined' => 'bool',
        'shipping_type' => 'string',
        'header_billing_block_reason' => 'string',
        'delivery_block_reason' => 'string',
        'delivery_date_type_rule' => 'string',
        'incoterms_classification' => 'string',
        'incoterms_transfer_location' => 'string',
        'incoterms_location1' => 'string',
        'incoterms_location2' => 'string',
        'incoterms_version' => 'string',
        'customer_price_group' => 'string',
        'price_list_type' => 'string',
        'customer_payment_terms' => 'string',
        'payment_method' => 'string',
        'fixed_value_date' => 'string',
        'assignment_reference' => 'string',
        'reference_sd_document' => 'string',
        'reference_sd_document_category' => 'string',
        'accounting_doc_external_reference' => 'string',
        'customer_account_assignment_group' => 'string',
        'accounting_exchange_rate' => 'float',
        'customer_group' => 'string',
        'additional_customer_group1' => 'string',
        'additional_customer_group2' => 'string',
        'additional_customer_group3' => 'string',
        'additional_customer_group4' => 'string',
        'additional_customer_group5' => 'string',
        'sls_doc_is_rlvt_for_proof_of_deliv' => 'bool',
        'customer_tax_classification1' => 'string',
        'customer_tax_classification2' => 'string',
        'customer_tax_classification3' => 'string',
        'customer_tax_classification4' => 'string',
        'customer_tax_classification5' => 'string',
        'customer_tax_classification6' => 'string',
        'customer_tax_classification7' => 'string',
        'customer_tax_classification8' => 'string',
        'customer_tax_classification9' => 'string',
        'tax_departure_country' => 'string',
        'vat_registration_country' => 'string',
        'sales_order_approval_reason' => 'string',
        'sales_doc_approval_status' => 'string',
        'overall_sd_process_status' => 'string',
        'total_credit_check_status' => 'string',
        'overall_total_delivery_status' => 'string',
        'overall_sd_document_rejection_sts' => 'string',
        'billing_document_date' => 'string',
        'contract_account' => 'string',
        'additional_value_days' => 'string',
        'customer_purchase_order_suplmnt' => 'string',
        'services_rendered_date' => 'string',
        'to_billing_plan' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderBillingPlanType',
        'to_item' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToItem',
        'to_partner' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToPartner',
        'to_payment_plan_item_details' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToPaymentPlanItemDetails',
        'to_preceding_proc_flow_doc' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToPrecedingProcFlowDoc',
        'to_pricing_element' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToPricingElement',
        'to_related_object' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToRelatedObject',
        'to_subsequent_proc_flow_doc' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToSubsequentProcFlowDoc',
        'to_text' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToText'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sales_order' => null,
        'sales_order_type' => null,
        'sales_order_type_internal_code' => null,
        'sales_organization' => null,
        'distribution_channel' => null,
        'organization_division' => null,
        'sales_group' => null,
        'sales_office' => null,
        'sales_district' => null,
        'sold_to_party' => null,
        'creation_date' => null,
        'created_by_user' => null,
        'last_change_date' => null,
        'sender_business_system_name' => null,
        'external_document_id' => null,
        'last_change_date_time' => null,
        'external_doc_last_change_date_time' => null,
        'purchase_order_by_customer' => null,
        'purchase_order_by_ship_to_party' => null,
        'customer_purchase_order_type' => null,
        'customer_purchase_order_date' => null,
        'sales_order_date' => null,
        'total_net_amount' => 'decimal',
        'overall_delivery_status' => null,
        'total_block_status' => null,
        'overall_ord_reltd_billg_status' => null,
        'overall_sd_doc_reference_status' => null,
        'transaction_currency' => null,
        'sd_document_reason' => null,
        'pricing_date' => null,
        'price_detn_exchange_rate' => 'decimal',
        'billing_plan' => null,
        'requested_delivery_date' => null,
        'shipping_condition' => null,
        'complete_delivery_is_defined' => null,
        'shipping_type' => null,
        'header_billing_block_reason' => null,
        'delivery_block_reason' => null,
        'delivery_date_type_rule' => null,
        'incoterms_classification' => null,
        'incoterms_transfer_location' => null,
        'incoterms_location1' => null,
        'incoterms_location2' => null,
        'incoterms_version' => null,
        'customer_price_group' => null,
        'price_list_type' => null,
        'customer_payment_terms' => null,
        'payment_method' => null,
        'fixed_value_date' => null,
        'assignment_reference' => null,
        'reference_sd_document' => null,
        'reference_sd_document_category' => null,
        'accounting_doc_external_reference' => null,
        'customer_account_assignment_group' => null,
        'accounting_exchange_rate' => 'decimal',
        'customer_group' => null,
        'additional_customer_group1' => null,
        'additional_customer_group2' => null,
        'additional_customer_group3' => null,
        'additional_customer_group4' => null,
        'additional_customer_group5' => null,
        'sls_doc_is_rlvt_for_proof_of_deliv' => null,
        'customer_tax_classification1' => null,
        'customer_tax_classification2' => null,
        'customer_tax_classification3' => null,
        'customer_tax_classification4' => null,
        'customer_tax_classification5' => null,
        'customer_tax_classification6' => null,
        'customer_tax_classification7' => null,
        'customer_tax_classification8' => null,
        'customer_tax_classification9' => null,
        'tax_departure_country' => null,
        'vat_registration_country' => null,
        'sales_order_approval_reason' => null,
        'sales_doc_approval_status' => null,
        'overall_sd_process_status' => null,
        'total_credit_check_status' => null,
        'overall_total_delivery_status' => null,
        'overall_sd_document_rejection_sts' => null,
        'billing_document_date' => null,
        'contract_account' => null,
        'additional_value_days' => null,
        'customer_purchase_order_suplmnt' => null,
        'services_rendered_date' => null,
        'to_billing_plan' => null,
        'to_item' => null,
        'to_partner' => null,
        'to_payment_plan_item_details' => null,
        'to_preceding_proc_flow_doc' => null,
        'to_pricing_element' => null,
        'to_related_object' => null,
        'to_subsequent_proc_flow_doc' => null,
        'to_text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sales_order' => false,
		'sales_order_type' => true,
		'sales_order_type_internal_code' => true,
		'sales_organization' => true,
		'distribution_channel' => true,
		'organization_division' => true,
		'sales_group' => true,
		'sales_office' => true,
		'sales_district' => true,
		'sold_to_party' => true,
		'creation_date' => true,
		'created_by_user' => true,
		'last_change_date' => true,
		'sender_business_system_name' => true,
		'external_document_id' => true,
		'last_change_date_time' => true,
		'external_doc_last_change_date_time' => true,
		'purchase_order_by_customer' => true,
		'purchase_order_by_ship_to_party' => true,
		'customer_purchase_order_type' => true,
		'customer_purchase_order_date' => true,
		'sales_order_date' => true,
		'total_net_amount' => true,
		'overall_delivery_status' => true,
		'total_block_status' => true,
		'overall_ord_reltd_billg_status' => true,
		'overall_sd_doc_reference_status' => true,
		'transaction_currency' => true,
		'sd_document_reason' => true,
		'pricing_date' => true,
		'price_detn_exchange_rate' => true,
		'billing_plan' => true,
		'requested_delivery_date' => true,
		'shipping_condition' => true,
		'complete_delivery_is_defined' => true,
		'shipping_type' => true,
		'header_billing_block_reason' => true,
		'delivery_block_reason' => true,
		'delivery_date_type_rule' => true,
		'incoterms_classification' => true,
		'incoterms_transfer_location' => true,
		'incoterms_location1' => true,
		'incoterms_location2' => true,
		'incoterms_version' => true,
		'customer_price_group' => true,
		'price_list_type' => true,
		'customer_payment_terms' => true,
		'payment_method' => true,
		'fixed_value_date' => true,
		'assignment_reference' => true,
		'reference_sd_document' => true,
		'reference_sd_document_category' => true,
		'accounting_doc_external_reference' => true,
		'customer_account_assignment_group' => true,
		'accounting_exchange_rate' => true,
		'customer_group' => true,
		'additional_customer_group1' => true,
		'additional_customer_group2' => true,
		'additional_customer_group3' => true,
		'additional_customer_group4' => true,
		'additional_customer_group5' => true,
		'sls_doc_is_rlvt_for_proof_of_deliv' => true,
		'customer_tax_classification1' => true,
		'customer_tax_classification2' => true,
		'customer_tax_classification3' => true,
		'customer_tax_classification4' => true,
		'customer_tax_classification5' => true,
		'customer_tax_classification6' => true,
		'customer_tax_classification7' => true,
		'customer_tax_classification8' => true,
		'customer_tax_classification9' => true,
		'tax_departure_country' => true,
		'vat_registration_country' => true,
		'sales_order_approval_reason' => true,
		'sales_doc_approval_status' => true,
		'overall_sd_process_status' => true,
		'total_credit_check_status' => true,
		'overall_total_delivery_status' => true,
		'overall_sd_document_rejection_sts' => true,
		'billing_document_date' => true,
		'contract_account' => true,
		'additional_value_days' => true,
		'customer_purchase_order_suplmnt' => true,
		'services_rendered_date' => true,
		'to_billing_plan' => true,
		'to_item' => false,
		'to_partner' => false,
		'to_payment_plan_item_details' => false,
		'to_preceding_proc_flow_doc' => false,
		'to_pricing_element' => false,
		'to_related_object' => false,
		'to_subsequent_proc_flow_doc' => false,
		'to_text' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sales_order' => 'SalesOrder',
        'sales_order_type' => 'SalesOrderType',
        'sales_order_type_internal_code' => 'SalesOrderTypeInternalCode',
        'sales_organization' => 'SalesOrganization',
        'distribution_channel' => 'DistributionChannel',
        'organization_division' => 'OrganizationDivision',
        'sales_group' => 'SalesGroup',
        'sales_office' => 'SalesOffice',
        'sales_district' => 'SalesDistrict',
        'sold_to_party' => 'SoldToParty',
        'creation_date' => 'CreationDate',
        'created_by_user' => 'CreatedByUser',
        'last_change_date' => 'LastChangeDate',
        'sender_business_system_name' => 'SenderBusinessSystemName',
        'external_document_id' => 'ExternalDocumentID',
        'last_change_date_time' => 'LastChangeDateTime',
        'external_doc_last_change_date_time' => 'ExternalDocLastChangeDateTime',
        'purchase_order_by_customer' => 'PurchaseOrderByCustomer',
        'purchase_order_by_ship_to_party' => 'PurchaseOrderByShipToParty',
        'customer_purchase_order_type' => 'CustomerPurchaseOrderType',
        'customer_purchase_order_date' => 'CustomerPurchaseOrderDate',
        'sales_order_date' => 'SalesOrderDate',
        'total_net_amount' => 'TotalNetAmount',
        'overall_delivery_status' => 'OverallDeliveryStatus',
        'total_block_status' => 'TotalBlockStatus',
        'overall_ord_reltd_billg_status' => 'OverallOrdReltdBillgStatus',
        'overall_sd_doc_reference_status' => 'OverallSDDocReferenceStatus',
        'transaction_currency' => 'TransactionCurrency',
        'sd_document_reason' => 'SDDocumentReason',
        'pricing_date' => 'PricingDate',
        'price_detn_exchange_rate' => 'PriceDetnExchangeRate',
        'billing_plan' => 'BillingPlan',
        'requested_delivery_date' => 'RequestedDeliveryDate',
        'shipping_condition' => 'ShippingCondition',
        'complete_delivery_is_defined' => 'CompleteDeliveryIsDefined',
        'shipping_type' => 'ShippingType',
        'header_billing_block_reason' => 'HeaderBillingBlockReason',
        'delivery_block_reason' => 'DeliveryBlockReason',
        'delivery_date_type_rule' => 'DeliveryDateTypeRule',
        'incoterms_classification' => 'IncotermsClassification',
        'incoterms_transfer_location' => 'IncotermsTransferLocation',
        'incoterms_location1' => 'IncotermsLocation1',
        'incoterms_location2' => 'IncotermsLocation2',
        'incoterms_version' => 'IncotermsVersion',
        'customer_price_group' => 'CustomerPriceGroup',
        'price_list_type' => 'PriceListType',
        'customer_payment_terms' => 'CustomerPaymentTerms',
        'payment_method' => 'PaymentMethod',
        'fixed_value_date' => 'FixedValueDate',
        'assignment_reference' => 'AssignmentReference',
        'reference_sd_document' => 'ReferenceSDDocument',
        'reference_sd_document_category' => 'ReferenceSDDocumentCategory',
        'accounting_doc_external_reference' => 'AccountingDocExternalReference',
        'customer_account_assignment_group' => 'CustomerAccountAssignmentGroup',
        'accounting_exchange_rate' => 'AccountingExchangeRate',
        'customer_group' => 'CustomerGroup',
        'additional_customer_group1' => 'AdditionalCustomerGroup1',
        'additional_customer_group2' => 'AdditionalCustomerGroup2',
        'additional_customer_group3' => 'AdditionalCustomerGroup3',
        'additional_customer_group4' => 'AdditionalCustomerGroup4',
        'additional_customer_group5' => 'AdditionalCustomerGroup5',
        'sls_doc_is_rlvt_for_proof_of_deliv' => 'SlsDocIsRlvtForProofOfDeliv',
        'customer_tax_classification1' => 'CustomerTaxClassification1',
        'customer_tax_classification2' => 'CustomerTaxClassification2',
        'customer_tax_classification3' => 'CustomerTaxClassification3',
        'customer_tax_classification4' => 'CustomerTaxClassification4',
        'customer_tax_classification5' => 'CustomerTaxClassification5',
        'customer_tax_classification6' => 'CustomerTaxClassification6',
        'customer_tax_classification7' => 'CustomerTaxClassification7',
        'customer_tax_classification8' => 'CustomerTaxClassification8',
        'customer_tax_classification9' => 'CustomerTaxClassification9',
        'tax_departure_country' => 'TaxDepartureCountry',
        'vat_registration_country' => 'VATRegistrationCountry',
        'sales_order_approval_reason' => 'SalesOrderApprovalReason',
        'sales_doc_approval_status' => 'SalesDocApprovalStatus',
        'overall_sd_process_status' => 'OverallSDProcessStatus',
        'total_credit_check_status' => 'TotalCreditCheckStatus',
        'overall_total_delivery_status' => 'OverallTotalDeliveryStatus',
        'overall_sd_document_rejection_sts' => 'OverallSDDocumentRejectionSts',
        'billing_document_date' => 'BillingDocumentDate',
        'contract_account' => 'ContractAccount',
        'additional_value_days' => 'AdditionalValueDays',
        'customer_purchase_order_suplmnt' => 'CustomerPurchaseOrderSuplmnt',
        'services_rendered_date' => 'ServicesRenderedDate',
        'to_billing_plan' => 'to_BillingPlan',
        'to_item' => 'to_Item',
        'to_partner' => 'to_Partner',
        'to_payment_plan_item_details' => 'to_PaymentPlanItemDetails',
        'to_preceding_proc_flow_doc' => 'to_PrecedingProcFlowDoc',
        'to_pricing_element' => 'to_PricingElement',
        'to_related_object' => 'to_RelatedObject',
        'to_subsequent_proc_flow_doc' => 'to_SubsequentProcFlowDoc',
        'to_text' => 'to_Text'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sales_order' => 'setSalesOrder',
        'sales_order_type' => 'setSalesOrderType',
        'sales_order_type_internal_code' => 'setSalesOrderTypeInternalCode',
        'sales_organization' => 'setSalesOrganization',
        'distribution_channel' => 'setDistributionChannel',
        'organization_division' => 'setOrganizationDivision',
        'sales_group' => 'setSalesGroup',
        'sales_office' => 'setSalesOffice',
        'sales_district' => 'setSalesDistrict',
        'sold_to_party' => 'setSoldToParty',
        'creation_date' => 'setCreationDate',
        'created_by_user' => 'setCreatedByUser',
        'last_change_date' => 'setLastChangeDate',
        'sender_business_system_name' => 'setSenderBusinessSystemName',
        'external_document_id' => 'setExternalDocumentId',
        'last_change_date_time' => 'setLastChangeDateTime',
        'external_doc_last_change_date_time' => 'setExternalDocLastChangeDateTime',
        'purchase_order_by_customer' => 'setPurchaseOrderByCustomer',
        'purchase_order_by_ship_to_party' => 'setPurchaseOrderByShipToParty',
        'customer_purchase_order_type' => 'setCustomerPurchaseOrderType',
        'customer_purchase_order_date' => 'setCustomerPurchaseOrderDate',
        'sales_order_date' => 'setSalesOrderDate',
        'total_net_amount' => 'setTotalNetAmount',
        'overall_delivery_status' => 'setOverallDeliveryStatus',
        'total_block_status' => 'setTotalBlockStatus',
        'overall_ord_reltd_billg_status' => 'setOverallOrdReltdBillgStatus',
        'overall_sd_doc_reference_status' => 'setOverallSdDocReferenceStatus',
        'transaction_currency' => 'setTransactionCurrency',
        'sd_document_reason' => 'setSdDocumentReason',
        'pricing_date' => 'setPricingDate',
        'price_detn_exchange_rate' => 'setPriceDetnExchangeRate',
        'billing_plan' => 'setBillingPlan',
        'requested_delivery_date' => 'setRequestedDeliveryDate',
        'shipping_condition' => 'setShippingCondition',
        'complete_delivery_is_defined' => 'setCompleteDeliveryIsDefined',
        'shipping_type' => 'setShippingType',
        'header_billing_block_reason' => 'setHeaderBillingBlockReason',
        'delivery_block_reason' => 'setDeliveryBlockReason',
        'delivery_date_type_rule' => 'setDeliveryDateTypeRule',
        'incoterms_classification' => 'setIncotermsClassification',
        'incoterms_transfer_location' => 'setIncotermsTransferLocation',
        'incoterms_location1' => 'setIncotermsLocation1',
        'incoterms_location2' => 'setIncotermsLocation2',
        'incoterms_version' => 'setIncotermsVersion',
        'customer_price_group' => 'setCustomerPriceGroup',
        'price_list_type' => 'setPriceListType',
        'customer_payment_terms' => 'setCustomerPaymentTerms',
        'payment_method' => 'setPaymentMethod',
        'fixed_value_date' => 'setFixedValueDate',
        'assignment_reference' => 'setAssignmentReference',
        'reference_sd_document' => 'setReferenceSdDocument',
        'reference_sd_document_category' => 'setReferenceSdDocumentCategory',
        'accounting_doc_external_reference' => 'setAccountingDocExternalReference',
        'customer_account_assignment_group' => 'setCustomerAccountAssignmentGroup',
        'accounting_exchange_rate' => 'setAccountingExchangeRate',
        'customer_group' => 'setCustomerGroup',
        'additional_customer_group1' => 'setAdditionalCustomerGroup1',
        'additional_customer_group2' => 'setAdditionalCustomerGroup2',
        'additional_customer_group3' => 'setAdditionalCustomerGroup3',
        'additional_customer_group4' => 'setAdditionalCustomerGroup4',
        'additional_customer_group5' => 'setAdditionalCustomerGroup5',
        'sls_doc_is_rlvt_for_proof_of_deliv' => 'setSlsDocIsRlvtForProofOfDeliv',
        'customer_tax_classification1' => 'setCustomerTaxClassification1',
        'customer_tax_classification2' => 'setCustomerTaxClassification2',
        'customer_tax_classification3' => 'setCustomerTaxClassification3',
        'customer_tax_classification4' => 'setCustomerTaxClassification4',
        'customer_tax_classification5' => 'setCustomerTaxClassification5',
        'customer_tax_classification6' => 'setCustomerTaxClassification6',
        'customer_tax_classification7' => 'setCustomerTaxClassification7',
        'customer_tax_classification8' => 'setCustomerTaxClassification8',
        'customer_tax_classification9' => 'setCustomerTaxClassification9',
        'tax_departure_country' => 'setTaxDepartureCountry',
        'vat_registration_country' => 'setVatRegistrationCountry',
        'sales_order_approval_reason' => 'setSalesOrderApprovalReason',
        'sales_doc_approval_status' => 'setSalesDocApprovalStatus',
        'overall_sd_process_status' => 'setOverallSdProcessStatus',
        'total_credit_check_status' => 'setTotalCreditCheckStatus',
        'overall_total_delivery_status' => 'setOverallTotalDeliveryStatus',
        'overall_sd_document_rejection_sts' => 'setOverallSdDocumentRejectionSts',
        'billing_document_date' => 'setBillingDocumentDate',
        'contract_account' => 'setContractAccount',
        'additional_value_days' => 'setAdditionalValueDays',
        'customer_purchase_order_suplmnt' => 'setCustomerPurchaseOrderSuplmnt',
        'services_rendered_date' => 'setServicesRenderedDate',
        'to_billing_plan' => 'setToBillingPlan',
        'to_item' => 'setToItem',
        'to_partner' => 'setToPartner',
        'to_payment_plan_item_details' => 'setToPaymentPlanItemDetails',
        'to_preceding_proc_flow_doc' => 'setToPrecedingProcFlowDoc',
        'to_pricing_element' => 'setToPricingElement',
        'to_related_object' => 'setToRelatedObject',
        'to_subsequent_proc_flow_doc' => 'setToSubsequentProcFlowDoc',
        'to_text' => 'setToText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sales_order' => 'getSalesOrder',
        'sales_order_type' => 'getSalesOrderType',
        'sales_order_type_internal_code' => 'getSalesOrderTypeInternalCode',
        'sales_organization' => 'getSalesOrganization',
        'distribution_channel' => 'getDistributionChannel',
        'organization_division' => 'getOrganizationDivision',
        'sales_group' => 'getSalesGroup',
        'sales_office' => 'getSalesOffice',
        'sales_district' => 'getSalesDistrict',
        'sold_to_party' => 'getSoldToParty',
        'creation_date' => 'getCreationDate',
        'created_by_user' => 'getCreatedByUser',
        'last_change_date' => 'getLastChangeDate',
        'sender_business_system_name' => 'getSenderBusinessSystemName',
        'external_document_id' => 'getExternalDocumentId',
        'last_change_date_time' => 'getLastChangeDateTime',
        'external_doc_last_change_date_time' => 'getExternalDocLastChangeDateTime',
        'purchase_order_by_customer' => 'getPurchaseOrderByCustomer',
        'purchase_order_by_ship_to_party' => 'getPurchaseOrderByShipToParty',
        'customer_purchase_order_type' => 'getCustomerPurchaseOrderType',
        'customer_purchase_order_date' => 'getCustomerPurchaseOrderDate',
        'sales_order_date' => 'getSalesOrderDate',
        'total_net_amount' => 'getTotalNetAmount',
        'overall_delivery_status' => 'getOverallDeliveryStatus',
        'total_block_status' => 'getTotalBlockStatus',
        'overall_ord_reltd_billg_status' => 'getOverallOrdReltdBillgStatus',
        'overall_sd_doc_reference_status' => 'getOverallSdDocReferenceStatus',
        'transaction_currency' => 'getTransactionCurrency',
        'sd_document_reason' => 'getSdDocumentReason',
        'pricing_date' => 'getPricingDate',
        'price_detn_exchange_rate' => 'getPriceDetnExchangeRate',
        'billing_plan' => 'getBillingPlan',
        'requested_delivery_date' => 'getRequestedDeliveryDate',
        'shipping_condition' => 'getShippingCondition',
        'complete_delivery_is_defined' => 'getCompleteDeliveryIsDefined',
        'shipping_type' => 'getShippingType',
        'header_billing_block_reason' => 'getHeaderBillingBlockReason',
        'delivery_block_reason' => 'getDeliveryBlockReason',
        'delivery_date_type_rule' => 'getDeliveryDateTypeRule',
        'incoterms_classification' => 'getIncotermsClassification',
        'incoterms_transfer_location' => 'getIncotermsTransferLocation',
        'incoterms_location1' => 'getIncotermsLocation1',
        'incoterms_location2' => 'getIncotermsLocation2',
        'incoterms_version' => 'getIncotermsVersion',
        'customer_price_group' => 'getCustomerPriceGroup',
        'price_list_type' => 'getPriceListType',
        'customer_payment_terms' => 'getCustomerPaymentTerms',
        'payment_method' => 'getPaymentMethod',
        'fixed_value_date' => 'getFixedValueDate',
        'assignment_reference' => 'getAssignmentReference',
        'reference_sd_document' => 'getReferenceSdDocument',
        'reference_sd_document_category' => 'getReferenceSdDocumentCategory',
        'accounting_doc_external_reference' => 'getAccountingDocExternalReference',
        'customer_account_assignment_group' => 'getCustomerAccountAssignmentGroup',
        'accounting_exchange_rate' => 'getAccountingExchangeRate',
        'customer_group' => 'getCustomerGroup',
        'additional_customer_group1' => 'getAdditionalCustomerGroup1',
        'additional_customer_group2' => 'getAdditionalCustomerGroup2',
        'additional_customer_group3' => 'getAdditionalCustomerGroup3',
        'additional_customer_group4' => 'getAdditionalCustomerGroup4',
        'additional_customer_group5' => 'getAdditionalCustomerGroup5',
        'sls_doc_is_rlvt_for_proof_of_deliv' => 'getSlsDocIsRlvtForProofOfDeliv',
        'customer_tax_classification1' => 'getCustomerTaxClassification1',
        'customer_tax_classification2' => 'getCustomerTaxClassification2',
        'customer_tax_classification3' => 'getCustomerTaxClassification3',
        'customer_tax_classification4' => 'getCustomerTaxClassification4',
        'customer_tax_classification5' => 'getCustomerTaxClassification5',
        'customer_tax_classification6' => 'getCustomerTaxClassification6',
        'customer_tax_classification7' => 'getCustomerTaxClassification7',
        'customer_tax_classification8' => 'getCustomerTaxClassification8',
        'customer_tax_classification9' => 'getCustomerTaxClassification9',
        'tax_departure_country' => 'getTaxDepartureCountry',
        'vat_registration_country' => 'getVatRegistrationCountry',
        'sales_order_approval_reason' => 'getSalesOrderApprovalReason',
        'sales_doc_approval_status' => 'getSalesDocApprovalStatus',
        'overall_sd_process_status' => 'getOverallSdProcessStatus',
        'total_credit_check_status' => 'getTotalCreditCheckStatus',
        'overall_total_delivery_status' => 'getOverallTotalDeliveryStatus',
        'overall_sd_document_rejection_sts' => 'getOverallSdDocumentRejectionSts',
        'billing_document_date' => 'getBillingDocumentDate',
        'contract_account' => 'getContractAccount',
        'additional_value_days' => 'getAdditionalValueDays',
        'customer_purchase_order_suplmnt' => 'getCustomerPurchaseOrderSuplmnt',
        'services_rendered_date' => 'getServicesRenderedDate',
        'to_billing_plan' => 'getToBillingPlan',
        'to_item' => 'getToItem',
        'to_partner' => 'getToPartner',
        'to_payment_plan_item_details' => 'getToPaymentPlanItemDetails',
        'to_preceding_proc_flow_doc' => 'getToPrecedingProcFlowDoc',
        'to_pricing_element' => 'getToPricingElement',
        'to_related_object' => 'getToRelatedObject',
        'to_subsequent_proc_flow_doc' => 'getToSubsequentProcFlowDoc',
        'to_text' => 'getToText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sales_order', $data ?? [], null);
        $this->setIfExists('sales_order_type', $data ?? [], null);
        $this->setIfExists('sales_order_type_internal_code', $data ?? [], null);
        $this->setIfExists('sales_organization', $data ?? [], null);
        $this->setIfExists('distribution_channel', $data ?? [], null);
        $this->setIfExists('organization_division', $data ?? [], null);
        $this->setIfExists('sales_group', $data ?? [], null);
        $this->setIfExists('sales_office', $data ?? [], null);
        $this->setIfExists('sales_district', $data ?? [], null);
        $this->setIfExists('sold_to_party', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('created_by_user', $data ?? [], null);
        $this->setIfExists('last_change_date', $data ?? [], null);
        $this->setIfExists('sender_business_system_name', $data ?? [], null);
        $this->setIfExists('external_document_id', $data ?? [], null);
        $this->setIfExists('last_change_date_time', $data ?? [], null);
        $this->setIfExists('external_doc_last_change_date_time', $data ?? [], null);
        $this->setIfExists('purchase_order_by_customer', $data ?? [], null);
        $this->setIfExists('purchase_order_by_ship_to_party', $data ?? [], null);
        $this->setIfExists('customer_purchase_order_type', $data ?? [], null);
        $this->setIfExists('customer_purchase_order_date', $data ?? [], null);
        $this->setIfExists('sales_order_date', $data ?? [], null);
        $this->setIfExists('total_net_amount', $data ?? [], null);
        $this->setIfExists('overall_delivery_status', $data ?? [], null);
        $this->setIfExists('total_block_status', $data ?? [], null);
        $this->setIfExists('overall_ord_reltd_billg_status', $data ?? [], null);
        $this->setIfExists('overall_sd_doc_reference_status', $data ?? [], null);
        $this->setIfExists('transaction_currency', $data ?? [], null);
        $this->setIfExists('sd_document_reason', $data ?? [], null);
        $this->setIfExists('pricing_date', $data ?? [], null);
        $this->setIfExists('price_detn_exchange_rate', $data ?? [], null);
        $this->setIfExists('billing_plan', $data ?? [], null);
        $this->setIfExists('requested_delivery_date', $data ?? [], null);
        $this->setIfExists('shipping_condition', $data ?? [], null);
        $this->setIfExists('complete_delivery_is_defined', $data ?? [], null);
        $this->setIfExists('shipping_type', $data ?? [], null);
        $this->setIfExists('header_billing_block_reason', $data ?? [], null);
        $this->setIfExists('delivery_block_reason', $data ?? [], null);
        $this->setIfExists('delivery_date_type_rule', $data ?? [], null);
        $this->setIfExists('incoterms_classification', $data ?? [], null);
        $this->setIfExists('incoterms_transfer_location', $data ?? [], null);
        $this->setIfExists('incoterms_location1', $data ?? [], null);
        $this->setIfExists('incoterms_location2', $data ?? [], null);
        $this->setIfExists('incoterms_version', $data ?? [], null);
        $this->setIfExists('customer_price_group', $data ?? [], null);
        $this->setIfExists('price_list_type', $data ?? [], null);
        $this->setIfExists('customer_payment_terms', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('fixed_value_date', $data ?? [], null);
        $this->setIfExists('assignment_reference', $data ?? [], null);
        $this->setIfExists('reference_sd_document', $data ?? [], null);
        $this->setIfExists('reference_sd_document_category', $data ?? [], null);
        $this->setIfExists('accounting_doc_external_reference', $data ?? [], null);
        $this->setIfExists('customer_account_assignment_group', $data ?? [], null);
        $this->setIfExists('accounting_exchange_rate', $data ?? [], null);
        $this->setIfExists('customer_group', $data ?? [], null);
        $this->setIfExists('additional_customer_group1', $data ?? [], null);
        $this->setIfExists('additional_customer_group2', $data ?? [], null);
        $this->setIfExists('additional_customer_group3', $data ?? [], null);
        $this->setIfExists('additional_customer_group4', $data ?? [], null);
        $this->setIfExists('additional_customer_group5', $data ?? [], null);
        $this->setIfExists('sls_doc_is_rlvt_for_proof_of_deliv', $data ?? [], null);
        $this->setIfExists('customer_tax_classification1', $data ?? [], null);
        $this->setIfExists('customer_tax_classification2', $data ?? [], null);
        $this->setIfExists('customer_tax_classification3', $data ?? [], null);
        $this->setIfExists('customer_tax_classification4', $data ?? [], null);
        $this->setIfExists('customer_tax_classification5', $data ?? [], null);
        $this->setIfExists('customer_tax_classification6', $data ?? [], null);
        $this->setIfExists('customer_tax_classification7', $data ?? [], null);
        $this->setIfExists('customer_tax_classification8', $data ?? [], null);
        $this->setIfExists('customer_tax_classification9', $data ?? [], null);
        $this->setIfExists('tax_departure_country', $data ?? [], null);
        $this->setIfExists('vat_registration_country', $data ?? [], null);
        $this->setIfExists('sales_order_approval_reason', $data ?? [], null);
        $this->setIfExists('sales_doc_approval_status', $data ?? [], null);
        $this->setIfExists('overall_sd_process_status', $data ?? [], null);
        $this->setIfExists('total_credit_check_status', $data ?? [], null);
        $this->setIfExists('overall_total_delivery_status', $data ?? [], null);
        $this->setIfExists('overall_sd_document_rejection_sts', $data ?? [], null);
        $this->setIfExists('billing_document_date', $data ?? [], null);
        $this->setIfExists('contract_account', $data ?? [], null);
        $this->setIfExists('additional_value_days', $data ?? [], null);
        $this->setIfExists('customer_purchase_order_suplmnt', $data ?? [], null);
        $this->setIfExists('services_rendered_date', $data ?? [], null);
        $this->setIfExists('to_billing_plan', $data ?? [], null);
        $this->setIfExists('to_item', $data ?? [], null);
        $this->setIfExists('to_partner', $data ?? [], null);
        $this->setIfExists('to_payment_plan_item_details', $data ?? [], null);
        $this->setIfExists('to_preceding_proc_flow_doc', $data ?? [], null);
        $this->setIfExists('to_pricing_element', $data ?? [], null);
        $this->setIfExists('to_related_object', $data ?? [], null);
        $this->setIfExists('to_subsequent_proc_flow_doc', $data ?? [], null);
        $this->setIfExists('to_text', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sales_order']) && (mb_strlen($this->container['sales_order']) > 10)) {
            $invalidProperties[] = "invalid value for 'sales_order', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_order_type']) && (mb_strlen($this->container['sales_order_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_order_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_order_type_internal_code']) && (mb_strlen($this->container['sales_order_type_internal_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_order_type_internal_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_organization']) && (mb_strlen($this->container['sales_organization']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_organization', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['distribution_channel']) && (mb_strlen($this->container['distribution_channel']) > 2)) {
            $invalidProperties[] = "invalid value for 'distribution_channel', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['organization_division']) && (mb_strlen($this->container['organization_division']) > 2)) {
            $invalidProperties[] = "invalid value for 'organization_division', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['sales_group']) && (mb_strlen($this->container['sales_group']) > 3)) {
            $invalidProperties[] = "invalid value for 'sales_group', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['sales_office']) && (mb_strlen($this->container['sales_office']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_office', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_district']) && (mb_strlen($this->container['sales_district']) > 6)) {
            $invalidProperties[] = "invalid value for 'sales_district', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sold_to_party']) && (mb_strlen($this->container['sold_to_party']) > 10)) {
            $invalidProperties[] = "invalid value for 'sold_to_party', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['created_by_user']) && (mb_strlen($this->container['created_by_user']) > 12)) {
            $invalidProperties[] = "invalid value for 'created_by_user', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['sender_business_system_name']) && (mb_strlen($this->container['sender_business_system_name']) > 60)) {
            $invalidProperties[] = "invalid value for 'sender_business_system_name', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['external_document_id']) && (mb_strlen($this->container['external_document_id']) > 40)) {
            $invalidProperties[] = "invalid value for 'external_document_id', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['purchase_order_by_customer']) && (mb_strlen($this->container['purchase_order_by_customer']) > 35)) {
            $invalidProperties[] = "invalid value for 'purchase_order_by_customer', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['purchase_order_by_ship_to_party']) && (mb_strlen($this->container['purchase_order_by_ship_to_party']) > 35)) {
            $invalidProperties[] = "invalid value for 'purchase_order_by_ship_to_party', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['customer_purchase_order_type']) && (mb_strlen($this->container['customer_purchase_order_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'customer_purchase_order_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['overall_delivery_status']) && (mb_strlen($this->container['overall_delivery_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_delivery_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['total_block_status']) && (mb_strlen($this->container['total_block_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'total_block_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_ord_reltd_billg_status']) && (mb_strlen($this->container['overall_ord_reltd_billg_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_ord_reltd_billg_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_sd_doc_reference_status']) && (mb_strlen($this->container['overall_sd_doc_reference_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_sd_doc_reference_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['transaction_currency']) && (mb_strlen($this->container['transaction_currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'transaction_currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['sd_document_reason']) && (mb_strlen($this->container['sd_document_reason']) > 3)) {
            $invalidProperties[] = "invalid value for 'sd_document_reason', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['billing_plan']) && (mb_strlen($this->container['billing_plan']) > 10)) {
            $invalidProperties[] = "invalid value for 'billing_plan', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['shipping_condition']) && (mb_strlen($this->container['shipping_condition']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipping_condition', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['shipping_type']) && (mb_strlen($this->container['shipping_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipping_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['header_billing_block_reason']) && (mb_strlen($this->container['header_billing_block_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'header_billing_block_reason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_block_reason']) && (mb_strlen($this->container['delivery_block_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_block_reason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_date_type_rule']) && (mb_strlen($this->container['delivery_date_type_rule']) > 1)) {
            $invalidProperties[] = "invalid value for 'delivery_date_type_rule', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['incoterms_classification']) && (mb_strlen($this->container['incoterms_classification']) > 3)) {
            $invalidProperties[] = "invalid value for 'incoterms_classification', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['incoterms_transfer_location']) && (mb_strlen($this->container['incoterms_transfer_location']) > 28)) {
            $invalidProperties[] = "invalid value for 'incoterms_transfer_location', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['incoterms_location1']) && (mb_strlen($this->container['incoterms_location1']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location1', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['incoterms_location2']) && (mb_strlen($this->container['incoterms_location2']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location2', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['incoterms_version']) && (mb_strlen($this->container['incoterms_version']) > 4)) {
            $invalidProperties[] = "invalid value for 'incoterms_version', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['customer_price_group']) && (mb_strlen($this->container['customer_price_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_price_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['price_list_type']) && (mb_strlen($this->container['price_list_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'price_list_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_payment_terms']) && (mb_strlen($this->container['customer_payment_terms']) > 4)) {
            $invalidProperties[] = "invalid value for 'customer_payment_terms', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['payment_method']) && (mb_strlen($this->container['payment_method']) > 1)) {
            $invalidProperties[] = "invalid value for 'payment_method', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['assignment_reference']) && (mb_strlen($this->container['assignment_reference']) > 18)) {
            $invalidProperties[] = "invalid value for 'assignment_reference', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['reference_sd_document']) && (mb_strlen($this->container['reference_sd_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['reference_sd_document_category']) && (mb_strlen($this->container['reference_sd_document_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['accounting_doc_external_reference']) && (mb_strlen($this->container['accounting_doc_external_reference']) > 16)) {
            $invalidProperties[] = "invalid value for 'accounting_doc_external_reference', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['customer_account_assignment_group']) && (mb_strlen($this->container['customer_account_assignment_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_account_assignment_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_group']) && (mb_strlen($this->container['customer_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['additional_customer_group1']) && (mb_strlen($this->container['additional_customer_group1']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group1', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group2']) && (mb_strlen($this->container['additional_customer_group2']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group2', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group3']) && (mb_strlen($this->container['additional_customer_group3']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group3', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group4']) && (mb_strlen($this->container['additional_customer_group4']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group4', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group5']) && (mb_strlen($this->container['additional_customer_group5']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group5', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['customer_tax_classification1']) && (mb_strlen($this->container['customer_tax_classification1']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification1', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification2']) && (mb_strlen($this->container['customer_tax_classification2']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification2', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification3']) && (mb_strlen($this->container['customer_tax_classification3']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification3', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification4']) && (mb_strlen($this->container['customer_tax_classification4']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification4', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification5']) && (mb_strlen($this->container['customer_tax_classification5']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification5', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification6']) && (mb_strlen($this->container['customer_tax_classification6']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification6', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification7']) && (mb_strlen($this->container['customer_tax_classification7']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification7', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification8']) && (mb_strlen($this->container['customer_tax_classification8']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification8', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_tax_classification9']) && (mb_strlen($this->container['customer_tax_classification9']) > 1)) {
            $invalidProperties[] = "invalid value for 'customer_tax_classification9', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['tax_departure_country']) && (mb_strlen($this->container['tax_departure_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'tax_departure_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['vat_registration_country']) && (mb_strlen($this->container['vat_registration_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'vat_registration_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['sales_order_approval_reason']) && (mb_strlen($this->container['sales_order_approval_reason']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_order_approval_reason', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_doc_approval_status']) && (mb_strlen($this->container['sales_doc_approval_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'sales_doc_approval_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_sd_process_status']) && (mb_strlen($this->container['overall_sd_process_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_sd_process_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['total_credit_check_status']) && (mb_strlen($this->container['total_credit_check_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'total_credit_check_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_total_delivery_status']) && (mb_strlen($this->container['overall_total_delivery_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_total_delivery_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['overall_sd_document_rejection_sts']) && (mb_strlen($this->container['overall_sd_document_rejection_sts']) > 1)) {
            $invalidProperties[] = "invalid value for 'overall_sd_document_rejection_sts', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['contract_account']) && (mb_strlen($this->container['contract_account']) > 12)) {
            $invalidProperties[] = "invalid value for 'contract_account', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['additional_value_days']) && (mb_strlen($this->container['additional_value_days']) > 2)) {
            $invalidProperties[] = "invalid value for 'additional_value_days', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_purchase_order_suplmnt']) && (mb_strlen($this->container['customer_purchase_order_suplmnt']) > 4)) {
            $invalidProperties[] = "invalid value for 'customer_purchase_order_suplmnt', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sales_order
     *
     * @return string|null
     */
    public function getSalesOrder()
    {
        return $this->container['sales_order'];
    }

    /**
     * Sets sales_order
     *
     * @param string|null $sales_order sales_order
     *
     * @return self
     */
    public function setSalesOrder($sales_order)
    {
        if (is_null($sales_order)) {
            throw new \InvalidArgumentException('non-nullable sales_order cannot be null');
        }
        if ((mb_strlen($sales_order) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sales_order when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 10.');
        }

        $this->container['sales_order'] = $sales_order;

        return $this;
    }

    /**
     * Gets sales_order_type
     *
     * @return string|null
     */
    public function getSalesOrderType()
    {
        return $this->container['sales_order_type'];
    }

    /**
     * Sets sales_order_type
     *
     * @param string|null $sales_order_type sales_order_type
     *
     * @return self
     */
    public function setSalesOrderType($sales_order_type)
    {
        if (is_null($sales_order_type)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_order_type) && (mb_strlen($sales_order_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_type when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 4.');
        }

        $this->container['sales_order_type'] = $sales_order_type;

        return $this;
    }

    /**
     * Gets sales_order_type_internal_code
     *
     * @return string|null
     */
    public function getSalesOrderTypeInternalCode()
    {
        return $this->container['sales_order_type_internal_code'];
    }

    /**
     * Sets sales_order_type_internal_code
     *
     * @param string|null $sales_order_type_internal_code Language key for sales document type
     *
     * @return self
     */
    public function setSalesOrderTypeInternalCode($sales_order_type_internal_code)
    {
        if (is_null($sales_order_type_internal_code)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_type_internal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_type_internal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_order_type_internal_code) && (mb_strlen($sales_order_type_internal_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_type_internal_code when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 4.');
        }

        $this->container['sales_order_type_internal_code'] = $sales_order_type_internal_code;

        return $this;
    }

    /**
     * Gets sales_organization
     *
     * @return string|null
     */
    public function getSalesOrganization()
    {
        return $this->container['sales_organization'];
    }

    /**
     * Sets sales_organization
     *
     * @param string|null $sales_organization sales_organization
     *
     * @return self
     */
    public function setSalesOrganization($sales_organization)
    {
        if (is_null($sales_organization)) {
            array_push($this->openAPINullablesSetToNull, 'sales_organization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_organization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_organization) && (mb_strlen($sales_organization) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_organization when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 4.');
        }

        $this->container['sales_organization'] = $sales_organization;

        return $this;
    }

    /**
     * Gets distribution_channel
     *
     * @return string|null
     */
    public function getDistributionChannel()
    {
        return $this->container['distribution_channel'];
    }

    /**
     * Sets distribution_channel
     *
     * @param string|null $distribution_channel distribution_channel
     *
     * @return self
     */
    public function setDistributionChannel($distribution_channel)
    {
        if (is_null($distribution_channel)) {
            array_push($this->openAPINullablesSetToNull, 'distribution_channel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('distribution_channel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($distribution_channel) && (mb_strlen($distribution_channel) > 2)) {
            throw new \InvalidArgumentException('invalid length for $distribution_channel when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 2.');
        }

        $this->container['distribution_channel'] = $distribution_channel;

        return $this;
    }

    /**
     * Gets organization_division
     *
     * @return string|null
     */
    public function getOrganizationDivision()
    {
        return $this->container['organization_division'];
    }

    /**
     * Sets organization_division
     *
     * @param string|null $organization_division organization_division
     *
     * @return self
     */
    public function setOrganizationDivision($organization_division)
    {
        if (is_null($organization_division)) {
            array_push($this->openAPINullablesSetToNull, 'organization_division');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_division', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($organization_division) && (mb_strlen($organization_division) > 2)) {
            throw new \InvalidArgumentException('invalid length for $organization_division when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 2.');
        }

        $this->container['organization_division'] = $organization_division;

        return $this;
    }

    /**
     * Gets sales_group
     *
     * @return string|null
     */
    public function getSalesGroup()
    {
        return $this->container['sales_group'];
    }

    /**
     * Sets sales_group
     *
     * @param string|null $sales_group sales_group
     *
     * @return self
     */
    public function setSalesGroup($sales_group)
    {
        if (is_null($sales_group)) {
            array_push($this->openAPINullablesSetToNull, 'sales_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_group) && (mb_strlen($sales_group) > 3)) {
            throw new \InvalidArgumentException('invalid length for $sales_group when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 3.');
        }

        $this->container['sales_group'] = $sales_group;

        return $this;
    }

    /**
     * Gets sales_office
     *
     * @return string|null
     */
    public function getSalesOffice()
    {
        return $this->container['sales_office'];
    }

    /**
     * Sets sales_office
     *
     * @param string|null $sales_office sales_office
     *
     * @return self
     */
    public function setSalesOffice($sales_office)
    {
        if (is_null($sales_office)) {
            array_push($this->openAPINullablesSetToNull, 'sales_office');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_office', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_office) && (mb_strlen($sales_office) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_office when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 4.');
        }

        $this->container['sales_office'] = $sales_office;

        return $this;
    }

    /**
     * Gets sales_district
     *
     * @return string|null
     */
    public function getSalesDistrict()
    {
        return $this->container['sales_district'];
    }

    /**
     * Sets sales_district
     *
     * @param string|null $sales_district sales_district
     *
     * @return self
     */
    public function setSalesDistrict($sales_district)
    {
        if (is_null($sales_district)) {
            array_push($this->openAPINullablesSetToNull, 'sales_district');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_district', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_district) && (mb_strlen($sales_district) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sales_district when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 6.');
        }

        $this->container['sales_district'] = $sales_district;

        return $this;
    }

    /**
     * Gets sold_to_party
     *
     * @return string|null
     */
    public function getSoldToParty()
    {
        return $this->container['sold_to_party'];
    }

    /**
     * Sets sold_to_party
     *
     * @param string|null $sold_to_party sold_to_party
     *
     * @return self
     */
    public function setSoldToParty($sold_to_party)
    {
        if (is_null($sold_to_party)) {
            array_push($this->openAPINullablesSetToNull, 'sold_to_party');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sold_to_party', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sold_to_party) && (mb_strlen($sold_to_party) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sold_to_party when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 10.');
        }

        $this->container['sold_to_party'] = $sold_to_party;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string|null $creation_date Record Creation Date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            array_push($this->openAPINullablesSetToNull, 'creation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return string|null
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param string|null $created_by_user Name of Person Responsible for Creating the Object
     *
     * @return self
     */
    public function setCreatedByUser($created_by_user)
    {
        if (is_null($created_by_user)) {
            array_push($this->openAPINullablesSetToNull, 'created_by_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($created_by_user) && (mb_strlen($created_by_user) > 12)) {
            throw new \InvalidArgumentException('invalid length for $created_by_user when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 12.');
        }

        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets last_change_date
     *
     * @return string|null
     */
    public function getLastChangeDate()
    {
        return $this->container['last_change_date'];
    }

    /**
     * Sets last_change_date
     *
     * @param string|null $last_change_date Last Changed On
     *
     * @return self
     */
    public function setLastChangeDate($last_change_date)
    {
        if (is_null($last_change_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_change_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_change_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_change_date'] = $last_change_date;

        return $this;
    }

    /**
     * Gets sender_business_system_name
     *
     * @return string|null
     */
    public function getSenderBusinessSystemName()
    {
        return $this->container['sender_business_system_name'];
    }

    /**
     * Sets sender_business_system_name
     *
     * @param string|null $sender_business_system_name External Business System ID
     *
     * @return self
     */
    public function setSenderBusinessSystemName($sender_business_system_name)
    {
        if (is_null($sender_business_system_name)) {
            array_push($this->openAPINullablesSetToNull, 'sender_business_system_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sender_business_system_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sender_business_system_name) && (mb_strlen($sender_business_system_name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $sender_business_system_name when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 60.');
        }

        $this->container['sender_business_system_name'] = $sender_business_system_name;

        return $this;
    }

    /**
     * Gets external_document_id
     *
     * @return string|null
     */
    public function getExternalDocumentId()
    {
        return $this->container['external_document_id'];
    }

    /**
     * Sets external_document_id
     *
     * @param string|null $external_document_id external_document_id
     *
     * @return self
     */
    public function setExternalDocumentId($external_document_id)
    {
        if (is_null($external_document_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_document_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_document_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($external_document_id) && (mb_strlen($external_document_id) > 40)) {
            throw new \InvalidArgumentException('invalid length for $external_document_id when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 40.');
        }

        $this->container['external_document_id'] = $external_document_id;

        return $this;
    }

    /**
     * Gets last_change_date_time
     *
     * @return string|null
     */
    public function getLastChangeDateTime()
    {
        return $this->container['last_change_date_time'];
    }

    /**
     * Sets last_change_date_time
     *
     * @param string|null $last_change_date_time UTC Time Stamp in Long Form (YYYYMMDDhhmmssmmmuuun)
     *
     * @return self
     */
    public function setLastChangeDateTime($last_change_date_time)
    {
        if (is_null($last_change_date_time)) {
            array_push($this->openAPINullablesSetToNull, 'last_change_date_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_change_date_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_change_date_time'] = $last_change_date_time;

        return $this;
    }

    /**
     * Gets external_doc_last_change_date_time
     *
     * @return string|null
     */
    public function getExternalDocLastChangeDateTime()
    {
        return $this->container['external_doc_last_change_date_time'];
    }

    /**
     * Sets external_doc_last_change_date_time
     *
     * @param string|null $external_doc_last_change_date_time Timestamp for Revision of External Calls
     *
     * @return self
     */
    public function setExternalDocLastChangeDateTime($external_doc_last_change_date_time)
    {
        if (is_null($external_doc_last_change_date_time)) {
            array_push($this->openAPINullablesSetToNull, 'external_doc_last_change_date_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_doc_last_change_date_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_doc_last_change_date_time'] = $external_doc_last_change_date_time;

        return $this;
    }

    /**
     * Gets purchase_order_by_customer
     *
     * @return string|null
     */
    public function getPurchaseOrderByCustomer()
    {
        return $this->container['purchase_order_by_customer'];
    }

    /**
     * Sets purchase_order_by_customer
     *
     * @param string|null $purchase_order_by_customer purchase_order_by_customer
     *
     * @return self
     */
    public function setPurchaseOrderByCustomer($purchase_order_by_customer)
    {
        if (is_null($purchase_order_by_customer)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_order_by_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_order_by_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($purchase_order_by_customer) && (mb_strlen($purchase_order_by_customer) > 35)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_by_customer when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 35.');
        }

        $this->container['purchase_order_by_customer'] = $purchase_order_by_customer;

        return $this;
    }

    /**
     * Gets purchase_order_by_ship_to_party
     *
     * @return string|null
     */
    public function getPurchaseOrderByShipToParty()
    {
        return $this->container['purchase_order_by_ship_to_party'];
    }

    /**
     * Sets purchase_order_by_ship_to_party
     *
     * @param string|null $purchase_order_by_ship_to_party Ship-to Party's Customer Reference
     *
     * @return self
     */
    public function setPurchaseOrderByShipToParty($purchase_order_by_ship_to_party)
    {
        if (is_null($purchase_order_by_ship_to_party)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_order_by_ship_to_party');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_order_by_ship_to_party', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($purchase_order_by_ship_to_party) && (mb_strlen($purchase_order_by_ship_to_party) > 35)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_by_ship_to_party when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 35.');
        }

        $this->container['purchase_order_by_ship_to_party'] = $purchase_order_by_ship_to_party;

        return $this;
    }

    /**
     * Gets customer_purchase_order_type
     *
     * @return string|null
     */
    public function getCustomerPurchaseOrderType()
    {
        return $this->container['customer_purchase_order_type'];
    }

    /**
     * Sets customer_purchase_order_type
     *
     * @param string|null $customer_purchase_order_type Customer Purchase Order Type
     *
     * @return self
     */
    public function setCustomerPurchaseOrderType($customer_purchase_order_type)
    {
        if (is_null($customer_purchase_order_type)) {
            array_push($this->openAPINullablesSetToNull, 'customer_purchase_order_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_purchase_order_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_purchase_order_type) && (mb_strlen($customer_purchase_order_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $customer_purchase_order_type when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 4.');
        }

        $this->container['customer_purchase_order_type'] = $customer_purchase_order_type;

        return $this;
    }

    /**
     * Gets customer_purchase_order_date
     *
     * @return string|null
     */
    public function getCustomerPurchaseOrderDate()
    {
        return $this->container['customer_purchase_order_date'];
    }

    /**
     * Sets customer_purchase_order_date
     *
     * @param string|null $customer_purchase_order_date customer_purchase_order_date
     *
     * @return self
     */
    public function setCustomerPurchaseOrderDate($customer_purchase_order_date)
    {
        if (is_null($customer_purchase_order_date)) {
            array_push($this->openAPINullablesSetToNull, 'customer_purchase_order_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_purchase_order_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_purchase_order_date'] = $customer_purchase_order_date;

        return $this;
    }

    /**
     * Gets sales_order_date
     *
     * @return string|null
     */
    public function getSalesOrderDate()
    {
        return $this->container['sales_order_date'];
    }

    /**
     * Sets sales_order_date
     *
     * @param string|null $sales_order_date Document Date (Date Received/Sent)
     *
     * @return self
     */
    public function setSalesOrderDate($sales_order_date)
    {
        if (is_null($sales_order_date)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sales_order_date'] = $sales_order_date;

        return $this;
    }

    /**
     * Gets total_net_amount
     *
     * @return float|null
     */
    public function getTotalNetAmount()
    {
        return $this->container['total_net_amount'];
    }

    /**
     * Sets total_net_amount
     *
     * @param float|null $total_net_amount Net Value of the Sales Document in Document Currency
     *
     * @return self
     */
    public function setTotalNetAmount($total_net_amount)
    {
        if (is_null($total_net_amount)) {
            array_push($this->openAPINullablesSetToNull, 'total_net_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_net_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['total_net_amount'] = $total_net_amount;

        return $this;
    }

    /**
     * Gets overall_delivery_status
     *
     * @return string|null
     */
    public function getOverallDeliveryStatus()
    {
        return $this->container['overall_delivery_status'];
    }

    /**
     * Sets overall_delivery_status
     *
     * @param string|null $overall_delivery_status Delivery Status (All Items)
     *
     * @return self
     */
    public function setOverallDeliveryStatus($overall_delivery_status)
    {
        if (is_null($overall_delivery_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_delivery_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_delivery_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_delivery_status) && (mb_strlen($overall_delivery_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_delivery_status when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['overall_delivery_status'] = $overall_delivery_status;

        return $this;
    }

    /**
     * Gets total_block_status
     *
     * @return string|null
     */
    public function getTotalBlockStatus()
    {
        return $this->container['total_block_status'];
    }

    /**
     * Sets total_block_status
     *
     * @param string|null $total_block_status Overall Block Status (Header)
     *
     * @return self
     */
    public function setTotalBlockStatus($total_block_status)
    {
        if (is_null($total_block_status)) {
            array_push($this->openAPINullablesSetToNull, 'total_block_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_block_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($total_block_status) && (mb_strlen($total_block_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $total_block_status when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['total_block_status'] = $total_block_status;

        return $this;
    }

    /**
     * Gets overall_ord_reltd_billg_status
     *
     * @return string|null
     */
    public function getOverallOrdReltdBillgStatus()
    {
        return $this->container['overall_ord_reltd_billg_status'];
    }

    /**
     * Sets overall_ord_reltd_billg_status
     *
     * @param string|null $overall_ord_reltd_billg_status Order-Related Billing Status (All Items)
     *
     * @return self
     */
    public function setOverallOrdReltdBillgStatus($overall_ord_reltd_billg_status)
    {
        if (is_null($overall_ord_reltd_billg_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_ord_reltd_billg_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_ord_reltd_billg_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_ord_reltd_billg_status) && (mb_strlen($overall_ord_reltd_billg_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_ord_reltd_billg_status when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['overall_ord_reltd_billg_status'] = $overall_ord_reltd_billg_status;

        return $this;
    }

    /**
     * Gets overall_sd_doc_reference_status
     *
     * @return string|null
     */
    public function getOverallSdDocReferenceStatus()
    {
        return $this->container['overall_sd_doc_reference_status'];
    }

    /**
     * Sets overall_sd_doc_reference_status
     *
     * @param string|null $overall_sd_doc_reference_status Reference Status (All Items)
     *
     * @return self
     */
    public function setOverallSdDocReferenceStatus($overall_sd_doc_reference_status)
    {
        if (is_null($overall_sd_doc_reference_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_sd_doc_reference_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_sd_doc_reference_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_sd_doc_reference_status) && (mb_strlen($overall_sd_doc_reference_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_sd_doc_reference_status when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['overall_sd_doc_reference_status'] = $overall_sd_doc_reference_status;

        return $this;
    }

    /**
     * Gets transaction_currency
     *
     * @return string|null
     */
    public function getTransactionCurrency()
    {
        return $this->container['transaction_currency'];
    }

    /**
     * Sets transaction_currency
     *
     * @param string|null $transaction_currency SD Document Currency
     *
     * @return self
     */
    public function setTransactionCurrency($transaction_currency)
    {
        if (is_null($transaction_currency)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transaction_currency) && (mb_strlen($transaction_currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $transaction_currency when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 5.');
        }

        $this->container['transaction_currency'] = $transaction_currency;

        return $this;
    }

    /**
     * Gets sd_document_reason
     *
     * @return string|null
     */
    public function getSdDocumentReason()
    {
        return $this->container['sd_document_reason'];
    }

    /**
     * Sets sd_document_reason
     *
     * @param string|null $sd_document_reason Order Reason (Reason for the Business Transaction)
     *
     * @return self
     */
    public function setSdDocumentReason($sd_document_reason)
    {
        if (is_null($sd_document_reason)) {
            array_push($this->openAPINullablesSetToNull, 'sd_document_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sd_document_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sd_document_reason) && (mb_strlen($sd_document_reason) > 3)) {
            throw new \InvalidArgumentException('invalid length for $sd_document_reason when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 3.');
        }

        $this->container['sd_document_reason'] = $sd_document_reason;

        return $this;
    }

    /**
     * Gets pricing_date
     *
     * @return string|null
     */
    public function getPricingDate()
    {
        return $this->container['pricing_date'];
    }

    /**
     * Sets pricing_date
     *
     * @param string|null $pricing_date Date for Pricing and Exchange Rate
     *
     * @return self
     */
    public function setPricingDate($pricing_date)
    {
        if (is_null($pricing_date)) {
            array_push($this->openAPINullablesSetToNull, 'pricing_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pricing_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pricing_date'] = $pricing_date;

        return $this;
    }

    /**
     * Gets price_detn_exchange_rate
     *
     * @return float|null
     */
    public function getPriceDetnExchangeRate()
    {
        return $this->container['price_detn_exchange_rate'];
    }

    /**
     * Sets price_detn_exchange_rate
     *
     * @param float|null $price_detn_exchange_rate Exchange Rate for Price Determination
     *
     * @return self
     */
    public function setPriceDetnExchangeRate($price_detn_exchange_rate)
    {
        if (is_null($price_detn_exchange_rate)) {
            array_push($this->openAPINullablesSetToNull, 'price_detn_exchange_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_detn_exchange_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['price_detn_exchange_rate'] = $price_detn_exchange_rate;

        return $this;
    }

    /**
     * Gets billing_plan
     *
     * @return string|null
     */
    public function getBillingPlan()
    {
        return $this->container['billing_plan'];
    }

    /**
     * Sets billing_plan
     *
     * @param string|null $billing_plan Billing Plan Number / Invoicing Plan Number
     *
     * @return self
     */
    public function setBillingPlan($billing_plan)
    {
        if (is_null($billing_plan)) {
            array_push($this->openAPINullablesSetToNull, 'billing_plan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_plan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_plan) && (mb_strlen($billing_plan) > 10)) {
            throw new \InvalidArgumentException('invalid length for $billing_plan when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 10.');
        }

        $this->container['billing_plan'] = $billing_plan;

        return $this;
    }

    /**
     * Gets requested_delivery_date
     *
     * @return string|null
     */
    public function getRequestedDeliveryDate()
    {
        return $this->container['requested_delivery_date'];
    }

    /**
     * Sets requested_delivery_date
     *
     * @param string|null $requested_delivery_date requested_delivery_date
     *
     * @return self
     */
    public function setRequestedDeliveryDate($requested_delivery_date)
    {
        if (is_null($requested_delivery_date)) {
            array_push($this->openAPINullablesSetToNull, 'requested_delivery_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_delivery_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requested_delivery_date'] = $requested_delivery_date;

        return $this;
    }

    /**
     * Gets shipping_condition
     *
     * @return string|null
     */
    public function getShippingCondition()
    {
        return $this->container['shipping_condition'];
    }

    /**
     * Sets shipping_condition
     *
     * @param string|null $shipping_condition shipping_condition
     *
     * @return self
     */
    public function setShippingCondition($shipping_condition)
    {
        if (is_null($shipping_condition)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_condition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_condition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_condition) && (mb_strlen($shipping_condition) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipping_condition when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 2.');
        }

        $this->container['shipping_condition'] = $shipping_condition;

        return $this;
    }

    /**
     * Gets complete_delivery_is_defined
     *
     * @return bool|null
     */
    public function getCompleteDeliveryIsDefined()
    {
        return $this->container['complete_delivery_is_defined'];
    }

    /**
     * Sets complete_delivery_is_defined
     *
     * @param bool|null $complete_delivery_is_defined Complete Delivery Defined for Each Sales Order
     *
     * @return self
     */
    public function setCompleteDeliveryIsDefined($complete_delivery_is_defined)
    {
        if (is_null($complete_delivery_is_defined)) {
            array_push($this->openAPINullablesSetToNull, 'complete_delivery_is_defined');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('complete_delivery_is_defined', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['complete_delivery_is_defined'] = $complete_delivery_is_defined;

        return $this;
    }

    /**
     * Gets shipping_type
     *
     * @return string|null
     */
    public function getShippingType()
    {
        return $this->container['shipping_type'];
    }

    /**
     * Sets shipping_type
     *
     * @param string|null $shipping_type shipping_type
     *
     * @return self
     */
    public function setShippingType($shipping_type)
    {
        if (is_null($shipping_type)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_type) && (mb_strlen($shipping_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipping_type when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 2.');
        }

        $this->container['shipping_type'] = $shipping_type;

        return $this;
    }

    /**
     * Gets header_billing_block_reason
     *
     * @return string|null
     */
    public function getHeaderBillingBlockReason()
    {
        return $this->container['header_billing_block_reason'];
    }

    /**
     * Sets header_billing_block_reason
     *
     * @param string|null $header_billing_block_reason Billing Block in SD Document
     *
     * @return self
     */
    public function setHeaderBillingBlockReason($header_billing_block_reason)
    {
        if (is_null($header_billing_block_reason)) {
            array_push($this->openAPINullablesSetToNull, 'header_billing_block_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('header_billing_block_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($header_billing_block_reason) && (mb_strlen($header_billing_block_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $header_billing_block_reason when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 2.');
        }

        $this->container['header_billing_block_reason'] = $header_billing_block_reason;

        return $this;
    }

    /**
     * Gets delivery_block_reason
     *
     * @return string|null
     */
    public function getDeliveryBlockReason()
    {
        return $this->container['delivery_block_reason'];
    }

    /**
     * Sets delivery_block_reason
     *
     * @param string|null $delivery_block_reason Delivery Block (Document Header)
     *
     * @return self
     */
    public function setDeliveryBlockReason($delivery_block_reason)
    {
        if (is_null($delivery_block_reason)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_block_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_block_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_block_reason) && (mb_strlen($delivery_block_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_block_reason when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 2.');
        }

        $this->container['delivery_block_reason'] = $delivery_block_reason;

        return $this;
    }

    /**
     * Gets delivery_date_type_rule
     *
     * @return string|null
     */
    public function getDeliveryDateTypeRule()
    {
        return $this->container['delivery_date_type_rule'];
    }

    /**
     * Sets delivery_date_type_rule
     *
     * @param string|null $delivery_date_type_rule delivery_date_type_rule
     *
     * @return self
     */
    public function setDeliveryDateTypeRule($delivery_date_type_rule)
    {
        if (is_null($delivery_date_type_rule)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_date_type_rule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_date_type_rule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_date_type_rule) && (mb_strlen($delivery_date_type_rule) > 1)) {
            throw new \InvalidArgumentException('invalid length for $delivery_date_type_rule when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['delivery_date_type_rule'] = $delivery_date_type_rule;

        return $this;
    }

    /**
     * Gets incoterms_classification
     *
     * @return string|null
     */
    public function getIncotermsClassification()
    {
        return $this->container['incoterms_classification'];
    }

    /**
     * Sets incoterms_classification
     *
     * @param string|null $incoterms_classification Incoterms (Part 1)
     *
     * @return self
     */
    public function setIncotermsClassification($incoterms_classification)
    {
        if (is_null($incoterms_classification)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_classification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_classification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_classification) && (mb_strlen($incoterms_classification) > 3)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_classification when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 3.');
        }

        $this->container['incoterms_classification'] = $incoterms_classification;

        return $this;
    }

    /**
     * Gets incoterms_transfer_location
     *
     * @return string|null
     */
    public function getIncotermsTransferLocation()
    {
        return $this->container['incoterms_transfer_location'];
    }

    /**
     * Sets incoterms_transfer_location
     *
     * @param string|null $incoterms_transfer_location incoterms_transfer_location
     *
     * @return self
     */
    public function setIncotermsTransferLocation($incoterms_transfer_location)
    {
        if (is_null($incoterms_transfer_location)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_transfer_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_transfer_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_transfer_location) && (mb_strlen($incoterms_transfer_location) > 28)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_transfer_location when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 28.');
        }

        $this->container['incoterms_transfer_location'] = $incoterms_transfer_location;

        return $this;
    }

    /**
     * Gets incoterms_location1
     *
     * @return string|null
     */
    public function getIncotermsLocation1()
    {
        return $this->container['incoterms_location1'];
    }

    /**
     * Sets incoterms_location1
     *
     * @param string|null $incoterms_location1 incoterms_location1
     *
     * @return self
     */
    public function setIncotermsLocation1($incoterms_location1)
    {
        if (is_null($incoterms_location1)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location1) && (mb_strlen($incoterms_location1) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location1 when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location1'] = $incoterms_location1;

        return $this;
    }

    /**
     * Gets incoterms_location2
     *
     * @return string|null
     */
    public function getIncotermsLocation2()
    {
        return $this->container['incoterms_location2'];
    }

    /**
     * Sets incoterms_location2
     *
     * @param string|null $incoterms_location2 incoterms_location2
     *
     * @return self
     */
    public function setIncotermsLocation2($incoterms_location2)
    {
        if (is_null($incoterms_location2)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location2) && (mb_strlen($incoterms_location2) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location2 when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location2'] = $incoterms_location2;

        return $this;
    }

    /**
     * Gets incoterms_version
     *
     * @return string|null
     */
    public function getIncotermsVersion()
    {
        return $this->container['incoterms_version'];
    }

    /**
     * Sets incoterms_version
     *
     * @param string|null $incoterms_version incoterms_version
     *
     * @return self
     */
    public function setIncotermsVersion($incoterms_version)
    {
        if (is_null($incoterms_version)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_version) && (mb_strlen($incoterms_version) > 4)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_version when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 4.');
        }

        $this->container['incoterms_version'] = $incoterms_version;

        return $this;
    }

    /**
     * Gets customer_price_group
     *
     * @return string|null
     */
    public function getCustomerPriceGroup()
    {
        return $this->container['customer_price_group'];
    }

    /**
     * Sets customer_price_group
     *
     * @param string|null $customer_price_group customer_price_group
     *
     * @return self
     */
    public function setCustomerPriceGroup($customer_price_group)
    {
        if (is_null($customer_price_group)) {
            array_push($this->openAPINullablesSetToNull, 'customer_price_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_price_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_price_group) && (mb_strlen($customer_price_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_price_group when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 2.');
        }

        $this->container['customer_price_group'] = $customer_price_group;

        return $this;
    }

    /**
     * Gets price_list_type
     *
     * @return string|null
     */
    public function getPriceListType()
    {
        return $this->container['price_list_type'];
    }

    /**
     * Sets price_list_type
     *
     * @param string|null $price_list_type price_list_type
     *
     * @return self
     */
    public function setPriceListType($price_list_type)
    {
        if (is_null($price_list_type)) {
            array_push($this->openAPINullablesSetToNull, 'price_list_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_list_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($price_list_type) && (mb_strlen($price_list_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $price_list_type when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 2.');
        }

        $this->container['price_list_type'] = $price_list_type;

        return $this;
    }

    /**
     * Gets customer_payment_terms
     *
     * @return string|null
     */
    public function getCustomerPaymentTerms()
    {
        return $this->container['customer_payment_terms'];
    }

    /**
     * Sets customer_payment_terms
     *
     * @param string|null $customer_payment_terms Key for Terms of Payment
     *
     * @return self
     */
    public function setCustomerPaymentTerms($customer_payment_terms)
    {
        if (is_null($customer_payment_terms)) {
            array_push($this->openAPINullablesSetToNull, 'customer_payment_terms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_payment_terms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_payment_terms) && (mb_strlen($customer_payment_terms) > 4)) {
            throw new \InvalidArgumentException('invalid length for $customer_payment_terms when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 4.');
        }

        $this->container['customer_payment_terms'] = $customer_payment_terms;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string|null $payment_method payment_method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            array_push($this->openAPINullablesSetToNull, 'payment_method');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_method', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_method) && (mb_strlen($payment_method) > 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_method when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets fixed_value_date
     *
     * @return string|null
     */
    public function getFixedValueDate()
    {
        return $this->container['fixed_value_date'];
    }

    /**
     * Sets fixed_value_date
     *
     * @param string|null $fixed_value_date fixed_value_date
     *
     * @return self
     */
    public function setFixedValueDate($fixed_value_date)
    {
        if (is_null($fixed_value_date)) {
            array_push($this->openAPINullablesSetToNull, 'fixed_value_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fixed_value_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fixed_value_date'] = $fixed_value_date;

        return $this;
    }

    /**
     * Gets assignment_reference
     *
     * @return string|null
     */
    public function getAssignmentReference()
    {
        return $this->container['assignment_reference'];
    }

    /**
     * Sets assignment_reference
     *
     * @param string|null $assignment_reference Assignment Number
     *
     * @return self
     */
    public function setAssignmentReference($assignment_reference)
    {
        if (is_null($assignment_reference)) {
            array_push($this->openAPINullablesSetToNull, 'assignment_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assignment_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($assignment_reference) && (mb_strlen($assignment_reference) > 18)) {
            throw new \InvalidArgumentException('invalid length for $assignment_reference when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 18.');
        }

        $this->container['assignment_reference'] = $assignment_reference;

        return $this;
    }

    /**
     * Gets reference_sd_document
     *
     * @return string|null
     */
    public function getReferenceSdDocument()
    {
        return $this->container['reference_sd_document'];
    }

    /**
     * Sets reference_sd_document
     *
     * @param string|null $reference_sd_document Document Number of Reference Document
     *
     * @return self
     */
    public function setReferenceSdDocument($reference_sd_document)
    {
        if (is_null($reference_sd_document)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document) && (mb_strlen($reference_sd_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 10.');
        }

        $this->container['reference_sd_document'] = $reference_sd_document;

        return $this;
    }

    /**
     * Gets reference_sd_document_category
     *
     * @return string|null
     */
    public function getReferenceSdDocumentCategory()
    {
        return $this->container['reference_sd_document_category'];
    }

    /**
     * Sets reference_sd_document_category
     *
     * @param string|null $reference_sd_document_category Document Category of Preceding SD Document
     *
     * @return self
     */
    public function setReferenceSdDocumentCategory($reference_sd_document_category)
    {
        if (is_null($reference_sd_document_category)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document_category) && (mb_strlen($reference_sd_document_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document_category when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 4.');
        }

        $this->container['reference_sd_document_category'] = $reference_sd_document_category;

        return $this;
    }

    /**
     * Gets accounting_doc_external_reference
     *
     * @return string|null
     */
    public function getAccountingDocExternalReference()
    {
        return $this->container['accounting_doc_external_reference'];
    }

    /**
     * Sets accounting_doc_external_reference
     *
     * @param string|null $accounting_doc_external_reference Reference Document Number
     *
     * @return self
     */
    public function setAccountingDocExternalReference($accounting_doc_external_reference)
    {
        if (is_null($accounting_doc_external_reference)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_doc_external_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_doc_external_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accounting_doc_external_reference) && (mb_strlen($accounting_doc_external_reference) > 16)) {
            throw new \InvalidArgumentException('invalid length for $accounting_doc_external_reference when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 16.');
        }

        $this->container['accounting_doc_external_reference'] = $accounting_doc_external_reference;

        return $this;
    }

    /**
     * Gets customer_account_assignment_group
     *
     * @return string|null
     */
    public function getCustomerAccountAssignmentGroup()
    {
        return $this->container['customer_account_assignment_group'];
    }

    /**
     * Sets customer_account_assignment_group
     *
     * @param string|null $customer_account_assignment_group customer_account_assignment_group
     *
     * @return self
     */
    public function setCustomerAccountAssignmentGroup($customer_account_assignment_group)
    {
        if (is_null($customer_account_assignment_group)) {
            array_push($this->openAPINullablesSetToNull, 'customer_account_assignment_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_account_assignment_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_account_assignment_group) && (mb_strlen($customer_account_assignment_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_account_assignment_group when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 2.');
        }

        $this->container['customer_account_assignment_group'] = $customer_account_assignment_group;

        return $this;
    }

    /**
     * Gets accounting_exchange_rate
     *
     * @return float|null
     */
    public function getAccountingExchangeRate()
    {
        return $this->container['accounting_exchange_rate'];
    }

    /**
     * Sets accounting_exchange_rate
     *
     * @param float|null $accounting_exchange_rate Exchange Rate for Postings to Financial Accounting
     *
     * @return self
     */
    public function setAccountingExchangeRate($accounting_exchange_rate)
    {
        if (is_null($accounting_exchange_rate)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_exchange_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_exchange_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['accounting_exchange_rate'] = $accounting_exchange_rate;

        return $this;
    }

    /**
     * Gets customer_group
     *
     * @return string|null
     */
    public function getCustomerGroup()
    {
        return $this->container['customer_group'];
    }

    /**
     * Sets customer_group
     *
     * @param string|null $customer_group customer_group
     *
     * @return self
     */
    public function setCustomerGroup($customer_group)
    {
        if (is_null($customer_group)) {
            array_push($this->openAPINullablesSetToNull, 'customer_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_group) && (mb_strlen($customer_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_group when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 2.');
        }

        $this->container['customer_group'] = $customer_group;

        return $this;
    }

    /**
     * Gets additional_customer_group1
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup1()
    {
        return $this->container['additional_customer_group1'];
    }

    /**
     * Sets additional_customer_group1
     *
     * @param string|null $additional_customer_group1 additional_customer_group1
     *
     * @return self
     */
    public function setAdditionalCustomerGroup1($additional_customer_group1)
    {
        if (is_null($additional_customer_group1)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group1) && (mb_strlen($additional_customer_group1) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group1 when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group1'] = $additional_customer_group1;

        return $this;
    }

    /**
     * Gets additional_customer_group2
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup2()
    {
        return $this->container['additional_customer_group2'];
    }

    /**
     * Sets additional_customer_group2
     *
     * @param string|null $additional_customer_group2 additional_customer_group2
     *
     * @return self
     */
    public function setAdditionalCustomerGroup2($additional_customer_group2)
    {
        if (is_null($additional_customer_group2)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group2) && (mb_strlen($additional_customer_group2) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group2 when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group2'] = $additional_customer_group2;

        return $this;
    }

    /**
     * Gets additional_customer_group3
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup3()
    {
        return $this->container['additional_customer_group3'];
    }

    /**
     * Sets additional_customer_group3
     *
     * @param string|null $additional_customer_group3 additional_customer_group3
     *
     * @return self
     */
    public function setAdditionalCustomerGroup3($additional_customer_group3)
    {
        if (is_null($additional_customer_group3)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group3) && (mb_strlen($additional_customer_group3) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group3 when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group3'] = $additional_customer_group3;

        return $this;
    }

    /**
     * Gets additional_customer_group4
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup4()
    {
        return $this->container['additional_customer_group4'];
    }

    /**
     * Sets additional_customer_group4
     *
     * @param string|null $additional_customer_group4 additional_customer_group4
     *
     * @return self
     */
    public function setAdditionalCustomerGroup4($additional_customer_group4)
    {
        if (is_null($additional_customer_group4)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group4) && (mb_strlen($additional_customer_group4) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group4 when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group4'] = $additional_customer_group4;

        return $this;
    }

    /**
     * Gets additional_customer_group5
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup5()
    {
        return $this->container['additional_customer_group5'];
    }

    /**
     * Sets additional_customer_group5
     *
     * @param string|null $additional_customer_group5 additional_customer_group5
     *
     * @return self
     */
    public function setAdditionalCustomerGroup5($additional_customer_group5)
    {
        if (is_null($additional_customer_group5)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group5) && (mb_strlen($additional_customer_group5) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group5 when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group5'] = $additional_customer_group5;

        return $this;
    }

    /**
     * Gets sls_doc_is_rlvt_for_proof_of_deliv
     *
     * @return bool|null
     */
    public function getSlsDocIsRlvtForProofOfDeliv()
    {
        return $this->container['sls_doc_is_rlvt_for_proof_of_deliv'];
    }

    /**
     * Sets sls_doc_is_rlvt_for_proof_of_deliv
     *
     * @param bool|null $sls_doc_is_rlvt_for_proof_of_deliv sls_doc_is_rlvt_for_proof_of_deliv
     *
     * @return self
     */
    public function setSlsDocIsRlvtForProofOfDeliv($sls_doc_is_rlvt_for_proof_of_deliv)
    {
        if (is_null($sls_doc_is_rlvt_for_proof_of_deliv)) {
            array_push($this->openAPINullablesSetToNull, 'sls_doc_is_rlvt_for_proof_of_deliv');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sls_doc_is_rlvt_for_proof_of_deliv', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sls_doc_is_rlvt_for_proof_of_deliv'] = $sls_doc_is_rlvt_for_proof_of_deliv;

        return $this;
    }

    /**
     * Gets customer_tax_classification1
     *
     * @return string|null
     */
    public function getCustomerTaxClassification1()
    {
        return $this->container['customer_tax_classification1'];
    }

    /**
     * Sets customer_tax_classification1
     *
     * @param string|null $customer_tax_classification1 Alternative Tax Classification
     *
     * @return self
     */
    public function setCustomerTaxClassification1($customer_tax_classification1)
    {
        if (is_null($customer_tax_classification1)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification1) && (mb_strlen($customer_tax_classification1) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification1 when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification1'] = $customer_tax_classification1;

        return $this;
    }

    /**
     * Gets customer_tax_classification2
     *
     * @return string|null
     */
    public function getCustomerTaxClassification2()
    {
        return $this->container['customer_tax_classification2'];
    }

    /**
     * Sets customer_tax_classification2
     *
     * @param string|null $customer_tax_classification2 Tax Classification 2 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification2($customer_tax_classification2)
    {
        if (is_null($customer_tax_classification2)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification2) && (mb_strlen($customer_tax_classification2) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification2 when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification2'] = $customer_tax_classification2;

        return $this;
    }

    /**
     * Gets customer_tax_classification3
     *
     * @return string|null
     */
    public function getCustomerTaxClassification3()
    {
        return $this->container['customer_tax_classification3'];
    }

    /**
     * Sets customer_tax_classification3
     *
     * @param string|null $customer_tax_classification3 Tax Classification 3 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification3($customer_tax_classification3)
    {
        if (is_null($customer_tax_classification3)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification3) && (mb_strlen($customer_tax_classification3) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification3 when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification3'] = $customer_tax_classification3;

        return $this;
    }

    /**
     * Gets customer_tax_classification4
     *
     * @return string|null
     */
    public function getCustomerTaxClassification4()
    {
        return $this->container['customer_tax_classification4'];
    }

    /**
     * Sets customer_tax_classification4
     *
     * @param string|null $customer_tax_classification4 Tax Classification 4 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification4($customer_tax_classification4)
    {
        if (is_null($customer_tax_classification4)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification4) && (mb_strlen($customer_tax_classification4) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification4 when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification4'] = $customer_tax_classification4;

        return $this;
    }

    /**
     * Gets customer_tax_classification5
     *
     * @return string|null
     */
    public function getCustomerTaxClassification5()
    {
        return $this->container['customer_tax_classification5'];
    }

    /**
     * Sets customer_tax_classification5
     *
     * @param string|null $customer_tax_classification5 Tax Classification 5 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification5($customer_tax_classification5)
    {
        if (is_null($customer_tax_classification5)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification5) && (mb_strlen($customer_tax_classification5) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification5 when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification5'] = $customer_tax_classification5;

        return $this;
    }

    /**
     * Gets customer_tax_classification6
     *
     * @return string|null
     */
    public function getCustomerTaxClassification6()
    {
        return $this->container['customer_tax_classification6'];
    }

    /**
     * Sets customer_tax_classification6
     *
     * @param string|null $customer_tax_classification6 Tax Classification 6 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification6($customer_tax_classification6)
    {
        if (is_null($customer_tax_classification6)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification6) && (mb_strlen($customer_tax_classification6) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification6 when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification6'] = $customer_tax_classification6;

        return $this;
    }

    /**
     * Gets customer_tax_classification7
     *
     * @return string|null
     */
    public function getCustomerTaxClassification7()
    {
        return $this->container['customer_tax_classification7'];
    }

    /**
     * Sets customer_tax_classification7
     *
     * @param string|null $customer_tax_classification7 Tax Classification 7 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification7($customer_tax_classification7)
    {
        if (is_null($customer_tax_classification7)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification7) && (mb_strlen($customer_tax_classification7) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification7 when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification7'] = $customer_tax_classification7;

        return $this;
    }

    /**
     * Gets customer_tax_classification8
     *
     * @return string|null
     */
    public function getCustomerTaxClassification8()
    {
        return $this->container['customer_tax_classification8'];
    }

    /**
     * Sets customer_tax_classification8
     *
     * @param string|null $customer_tax_classification8 Tax Classification 8 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification8($customer_tax_classification8)
    {
        if (is_null($customer_tax_classification8)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification8) && (mb_strlen($customer_tax_classification8) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification8 when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification8'] = $customer_tax_classification8;

        return $this;
    }

    /**
     * Gets customer_tax_classification9
     *
     * @return string|null
     */
    public function getCustomerTaxClassification9()
    {
        return $this->container['customer_tax_classification9'];
    }

    /**
     * Sets customer_tax_classification9
     *
     * @param string|null $customer_tax_classification9 Tax Classification 9 for Customer
     *
     * @return self
     */
    public function setCustomerTaxClassification9($customer_tax_classification9)
    {
        if (is_null($customer_tax_classification9)) {
            array_push($this->openAPINullablesSetToNull, 'customer_tax_classification9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_tax_classification9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_tax_classification9) && (mb_strlen($customer_tax_classification9) > 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_tax_classification9 when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['customer_tax_classification9'] = $customer_tax_classification9;

        return $this;
    }

    /**
     * Gets tax_departure_country
     *
     * @return string|null
     */
    public function getTaxDepartureCountry()
    {
        return $this->container['tax_departure_country'];
    }

    /**
     * Sets tax_departure_country
     *
     * @param string|null $tax_departure_country tax_departure_country
     *
     * @return self
     */
    public function setTaxDepartureCountry($tax_departure_country)
    {
        if (is_null($tax_departure_country)) {
            array_push($this->openAPINullablesSetToNull, 'tax_departure_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_departure_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tax_departure_country) && (mb_strlen($tax_departure_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $tax_departure_country when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 3.');
        }

        $this->container['tax_departure_country'] = $tax_departure_country;

        return $this;
    }

    /**
     * Gets vat_registration_country
     *
     * @return string|null
     */
    public function getVatRegistrationCountry()
    {
        return $this->container['vat_registration_country'];
    }

    /**
     * Sets vat_registration_country
     *
     * @param string|null $vat_registration_country vat_registration_country
     *
     * @return self
     */
    public function setVatRegistrationCountry($vat_registration_country)
    {
        if (is_null($vat_registration_country)) {
            array_push($this->openAPINullablesSetToNull, 'vat_registration_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vat_registration_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vat_registration_country) && (mb_strlen($vat_registration_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $vat_registration_country when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 3.');
        }

        $this->container['vat_registration_country'] = $vat_registration_country;

        return $this;
    }

    /**
     * Gets sales_order_approval_reason
     *
     * @return string|null
     */
    public function getSalesOrderApprovalReason()
    {
        return $this->container['sales_order_approval_reason'];
    }

    /**
     * Sets sales_order_approval_reason
     *
     * @param string|null $sales_order_approval_reason Approval Request Reason ID
     *
     * @return self
     */
    public function setSalesOrderApprovalReason($sales_order_approval_reason)
    {
        if (is_null($sales_order_approval_reason)) {
            array_push($this->openAPINullablesSetToNull, 'sales_order_approval_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_order_approval_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_order_approval_reason) && (mb_strlen($sales_order_approval_reason) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_approval_reason when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 4.');
        }

        $this->container['sales_order_approval_reason'] = $sales_order_approval_reason;

        return $this;
    }

    /**
     * Gets sales_doc_approval_status
     *
     * @return string|null
     */
    public function getSalesDocApprovalStatus()
    {
        return $this->container['sales_doc_approval_status'];
    }

    /**
     * Sets sales_doc_approval_status
     *
     * @param string|null $sales_doc_approval_status Document Approval Status
     *
     * @return self
     */
    public function setSalesDocApprovalStatus($sales_doc_approval_status)
    {
        if (is_null($sales_doc_approval_status)) {
            array_push($this->openAPINullablesSetToNull, 'sales_doc_approval_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_doc_approval_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_doc_approval_status) && (mb_strlen($sales_doc_approval_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $sales_doc_approval_status when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['sales_doc_approval_status'] = $sales_doc_approval_status;

        return $this;
    }

    /**
     * Gets overall_sd_process_status
     *
     * @return string|null
     */
    public function getOverallSdProcessStatus()
    {
        return $this->container['overall_sd_process_status'];
    }

    /**
     * Sets overall_sd_process_status
     *
     * @param string|null $overall_sd_process_status Overall Processing Status (Header/All Items)
     *
     * @return self
     */
    public function setOverallSdProcessStatus($overall_sd_process_status)
    {
        if (is_null($overall_sd_process_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_sd_process_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_sd_process_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_sd_process_status) && (mb_strlen($overall_sd_process_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_sd_process_status when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['overall_sd_process_status'] = $overall_sd_process_status;

        return $this;
    }

    /**
     * Gets total_credit_check_status
     *
     * @return string|null
     */
    public function getTotalCreditCheckStatus()
    {
        return $this->container['total_credit_check_status'];
    }

    /**
     * Sets total_credit_check_status
     *
     * @param string|null $total_credit_check_status Overall Status of Credit Checks
     *
     * @return self
     */
    public function setTotalCreditCheckStatus($total_credit_check_status)
    {
        if (is_null($total_credit_check_status)) {
            array_push($this->openAPINullablesSetToNull, 'total_credit_check_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_credit_check_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($total_credit_check_status) && (mb_strlen($total_credit_check_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $total_credit_check_status when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['total_credit_check_status'] = $total_credit_check_status;

        return $this;
    }

    /**
     * Gets overall_total_delivery_status
     *
     * @return string|null
     */
    public function getOverallTotalDeliveryStatus()
    {
        return $this->container['overall_total_delivery_status'];
    }

    /**
     * Sets overall_total_delivery_status
     *
     * @param string|null $overall_total_delivery_status Overall Delivery Status (All Items)
     *
     * @return self
     */
    public function setOverallTotalDeliveryStatus($overall_total_delivery_status)
    {
        if (is_null($overall_total_delivery_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_total_delivery_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_total_delivery_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_total_delivery_status) && (mb_strlen($overall_total_delivery_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_total_delivery_status when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['overall_total_delivery_status'] = $overall_total_delivery_status;

        return $this;
    }

    /**
     * Gets overall_sd_document_rejection_sts
     *
     * @return string|null
     */
    public function getOverallSdDocumentRejectionSts()
    {
        return $this->container['overall_sd_document_rejection_sts'];
    }

    /**
     * Sets overall_sd_document_rejection_sts
     *
     * @param string|null $overall_sd_document_rejection_sts Rejection Status (All Items)
     *
     * @return self
     */
    public function setOverallSdDocumentRejectionSts($overall_sd_document_rejection_sts)
    {
        if (is_null($overall_sd_document_rejection_sts)) {
            array_push($this->openAPINullablesSetToNull, 'overall_sd_document_rejection_sts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_sd_document_rejection_sts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($overall_sd_document_rejection_sts) && (mb_strlen($overall_sd_document_rejection_sts) > 1)) {
            throw new \InvalidArgumentException('invalid length for $overall_sd_document_rejection_sts when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 1.');
        }

        $this->container['overall_sd_document_rejection_sts'] = $overall_sd_document_rejection_sts;

        return $this;
    }

    /**
     * Gets billing_document_date
     *
     * @return string|null
     */
    public function getBillingDocumentDate()
    {
        return $this->container['billing_document_date'];
    }

    /**
     * Sets billing_document_date
     *
     * @param string|null $billing_document_date billing_document_date
     *
     * @return self
     */
    public function setBillingDocumentDate($billing_document_date)
    {
        if (is_null($billing_document_date)) {
            array_push($this->openAPINullablesSetToNull, 'billing_document_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_document_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_document_date'] = $billing_document_date;

        return $this;
    }

    /**
     * Gets contract_account
     *
     * @return string|null
     */
    public function getContractAccount()
    {
        return $this->container['contract_account'];
    }

    /**
     * Sets contract_account
     *
     * @param string|null $contract_account Contract Account Number
     *
     * @return self
     */
    public function setContractAccount($contract_account)
    {
        if (is_null($contract_account)) {
            array_push($this->openAPINullablesSetToNull, 'contract_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contract_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contract_account) && (mb_strlen($contract_account) > 12)) {
            throw new \InvalidArgumentException('invalid length for $contract_account when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 12.');
        }

        $this->container['contract_account'] = $contract_account;

        return $this;
    }

    /**
     * Gets additional_value_days
     *
     * @return string|null
     */
    public function getAdditionalValueDays()
    {
        return $this->container['additional_value_days'];
    }

    /**
     * Sets additional_value_days
     *
     * @param string|null $additional_value_days Additional Value Days
     *
     * @return self
     */
    public function setAdditionalValueDays($additional_value_days)
    {
        if (is_null($additional_value_days)) {
            array_push($this->openAPINullablesSetToNull, 'additional_value_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_value_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_value_days) && (mb_strlen($additional_value_days) > 2)) {
            throw new \InvalidArgumentException('invalid length for $additional_value_days when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 2.');
        }

        $this->container['additional_value_days'] = $additional_value_days;

        return $this;
    }

    /**
     * Gets customer_purchase_order_suplmnt
     *
     * @return string|null
     */
    public function getCustomerPurchaseOrderSuplmnt()
    {
        return $this->container['customer_purchase_order_suplmnt'];
    }

    /**
     * Sets customer_purchase_order_suplmnt
     *
     * @param string|null $customer_purchase_order_suplmnt Purchase order number supplement
     *
     * @return self
     */
    public function setCustomerPurchaseOrderSuplmnt($customer_purchase_order_suplmnt)
    {
        if (is_null($customer_purchase_order_suplmnt)) {
            array_push($this->openAPINullablesSetToNull, 'customer_purchase_order_suplmnt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_purchase_order_suplmnt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_purchase_order_suplmnt) && (mb_strlen($customer_purchase_order_suplmnt) > 4)) {
            throw new \InvalidArgumentException('invalid length for $customer_purchase_order_suplmnt when calling APISALESORDERSRVASalesOrderType., must be smaller than or equal to 4.');
        }

        $this->container['customer_purchase_order_suplmnt'] = $customer_purchase_order_suplmnt;

        return $this;
    }

    /**
     * Gets services_rendered_date
     *
     * @return string|null
     */
    public function getServicesRenderedDate()
    {
        return $this->container['services_rendered_date'];
    }

    /**
     * Sets services_rendered_date
     *
     * @param string|null $services_rendered_date Date on which services are rendered
     *
     * @return self
     */
    public function setServicesRenderedDate($services_rendered_date)
    {
        if (is_null($services_rendered_date)) {
            array_push($this->openAPINullablesSetToNull, 'services_rendered_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('services_rendered_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['services_rendered_date'] = $services_rendered_date;

        return $this;
    }

    /**
     * Gets to_billing_plan
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderBillingPlanType|null
     */
    public function getToBillingPlan()
    {
        return $this->container['to_billing_plan'];
    }

    /**
     * Sets to_billing_plan
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderBillingPlanType|null $to_billing_plan to_billing_plan
     *
     * @return self
     */
    public function setToBillingPlan($to_billing_plan)
    {
        if (is_null($to_billing_plan)) {
            array_push($this->openAPINullablesSetToNull, 'to_billing_plan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to_billing_plan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['to_billing_plan'] = $to_billing_plan;

        return $this;
    }

    /**
     * Gets to_item
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToItem|null
     */
    public function getToItem()
    {
        return $this->container['to_item'];
    }

    /**
     * Sets to_item
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToItem|null $to_item to_item
     *
     * @return self
     */
    public function setToItem($to_item)
    {
        if (is_null($to_item)) {
            throw new \InvalidArgumentException('non-nullable to_item cannot be null');
        }
        $this->container['to_item'] = $to_item;

        return $this;
    }

    /**
     * Gets to_partner
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToPartner|null
     */
    public function getToPartner()
    {
        return $this->container['to_partner'];
    }

    /**
     * Sets to_partner
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToPartner|null $to_partner to_partner
     *
     * @return self
     */
    public function setToPartner($to_partner)
    {
        if (is_null($to_partner)) {
            throw new \InvalidArgumentException('non-nullable to_partner cannot be null');
        }
        $this->container['to_partner'] = $to_partner;

        return $this;
    }

    /**
     * Gets to_payment_plan_item_details
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToPaymentPlanItemDetails|null
     */
    public function getToPaymentPlanItemDetails()
    {
        return $this->container['to_payment_plan_item_details'];
    }

    /**
     * Sets to_payment_plan_item_details
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToPaymentPlanItemDetails|null $to_payment_plan_item_details to_payment_plan_item_details
     *
     * @return self
     */
    public function setToPaymentPlanItemDetails($to_payment_plan_item_details)
    {
        if (is_null($to_payment_plan_item_details)) {
            throw new \InvalidArgumentException('non-nullable to_payment_plan_item_details cannot be null');
        }
        $this->container['to_payment_plan_item_details'] = $to_payment_plan_item_details;

        return $this;
    }

    /**
     * Gets to_preceding_proc_flow_doc
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToPrecedingProcFlowDoc|null
     */
    public function getToPrecedingProcFlowDoc()
    {
        return $this->container['to_preceding_proc_flow_doc'];
    }

    /**
     * Sets to_preceding_proc_flow_doc
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToPrecedingProcFlowDoc|null $to_preceding_proc_flow_doc to_preceding_proc_flow_doc
     *
     * @return self
     */
    public function setToPrecedingProcFlowDoc($to_preceding_proc_flow_doc)
    {
        if (is_null($to_preceding_proc_flow_doc)) {
            throw new \InvalidArgumentException('non-nullable to_preceding_proc_flow_doc cannot be null');
        }
        $this->container['to_preceding_proc_flow_doc'] = $to_preceding_proc_flow_doc;

        return $this;
    }

    /**
     * Gets to_pricing_element
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToPricingElement|null
     */
    public function getToPricingElement()
    {
        return $this->container['to_pricing_element'];
    }

    /**
     * Sets to_pricing_element
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToPricingElement|null $to_pricing_element to_pricing_element
     *
     * @return self
     */
    public function setToPricingElement($to_pricing_element)
    {
        if (is_null($to_pricing_element)) {
            throw new \InvalidArgumentException('non-nullable to_pricing_element cannot be null');
        }
        $this->container['to_pricing_element'] = $to_pricing_element;

        return $this;
    }

    /**
     * Gets to_related_object
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToRelatedObject|null
     */
    public function getToRelatedObject()
    {
        return $this->container['to_related_object'];
    }

    /**
     * Sets to_related_object
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToRelatedObject|null $to_related_object to_related_object
     *
     * @return self
     */
    public function setToRelatedObject($to_related_object)
    {
        if (is_null($to_related_object)) {
            throw new \InvalidArgumentException('non-nullable to_related_object cannot be null');
        }
        $this->container['to_related_object'] = $to_related_object;

        return $this;
    }

    /**
     * Gets to_subsequent_proc_flow_doc
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToSubsequentProcFlowDoc|null
     */
    public function getToSubsequentProcFlowDoc()
    {
        return $this->container['to_subsequent_proc_flow_doc'];
    }

    /**
     * Sets to_subsequent_proc_flow_doc
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToSubsequentProcFlowDoc|null $to_subsequent_proc_flow_doc to_subsequent_proc_flow_doc
     *
     * @return self
     */
    public function setToSubsequentProcFlowDoc($to_subsequent_proc_flow_doc)
    {
        if (is_null($to_subsequent_proc_flow_doc)) {
            throw new \InvalidArgumentException('non-nullable to_subsequent_proc_flow_doc cannot be null');
        }
        $this->container['to_subsequent_proc_flow_doc'] = $to_subsequent_proc_flow_doc;

        return $this;
    }

    /**
     * Gets to_text
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToText|null
     */
    public function getToText()
    {
        return $this->container['to_text'];
    }

    /**
     * Sets to_text
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeToText|null $to_text to_text
     *
     * @return self
     */
    public function setToText($to_text)
    {
        if (is_null($to_text)) {
            throw new \InvalidArgumentException('non-nullable to_text cannot be null');
        }
        $this->container['to_text'] = $to_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


