<?php
/**
 * APISALESORDERSRVASalesOrderHeaderPrElementType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\SalesOrder\Model;

use \ArrayAccess;
use \BeLenka\SAP\SalesOrder\ObjectSerializer;

/**
 * APISALESORDERSRVASalesOrderHeaderPrElementType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APISALESORDERSRVASalesOrderHeaderPrElementType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_SALES_ORDER_SRV.A_SalesOrderHeaderPrElementType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sales_order' => 'string',
        'pricing_procedure_step' => 'string',
        'pricing_procedure_counter' => 'string',
        'condition_type' => 'string',
        'pricing_date_time' => 'string',
        'price_condition_determination_dte' => 'string',
        'condition_calculation_type' => 'string',
        'condition_base_value' => 'float',
        'condition_rate_value' => 'float',
        'condition_currency' => 'string',
        'condition_quantity' => 'float',
        'condition_quantity_unit' => 'string',
        'condition_quantity_sap_unit' => 'string',
        'condition_quantity_iso_unit' => 'string',
        'condition_category' => 'string',
        'condition_is_for_statistics' => 'bool',
        'pricing_scale_type' => 'string',
        'condition_origin' => 'string',
        'is_group_condition' => 'string',
        'condition_record' => 'string',
        'condition_sequential_number' => 'string',
        'tax_code' => 'string',
        'withholding_tax_code' => 'string',
        'cndn_rounding_off_diff_amount' => 'float',
        'condition_amount' => 'float',
        'transaction_currency' => 'string',
        'condition_control' => 'string',
        'condition_inactive_reason' => 'string',
        'condition_class' => 'string',
        'prcg_procedure_counter_for_header' => 'string',
        'factor_for_condition_basis_value' => '\BeLenka\SAP\SalesOrder\Model\ConditionFactor',
        'structure_condition' => 'string',
        'period_factor_for_cndn_basis_value' => '\BeLenka\SAP\SalesOrder\Model\ConditionFactor1',
        'pricing_scale_basis' => 'string',
        'condition_scale_basis_value' => 'float',
        'condition_scale_basis_unit' => 'string',
        'condition_scale_basis_currency' => 'string',
        'cndn_is_relevant_for_intco_billing' => 'bool',
        'condition_is_manually_changed' => 'bool',
        'condition_is_for_configuration' => 'bool',
        'variant_condition' => 'string',
        'to_sales_order' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sales_order' => null,
        'pricing_procedure_step' => null,
        'pricing_procedure_counter' => null,
        'condition_type' => null,
        'pricing_date_time' => null,
        'price_condition_determination_dte' => null,
        'condition_calculation_type' => null,
        'condition_base_value' => 'decimal',
        'condition_rate_value' => 'decimal',
        'condition_currency' => null,
        'condition_quantity' => 'decimal',
        'condition_quantity_unit' => null,
        'condition_quantity_sap_unit' => null,
        'condition_quantity_iso_unit' => null,
        'condition_category' => null,
        'condition_is_for_statistics' => null,
        'pricing_scale_type' => null,
        'condition_origin' => null,
        'is_group_condition' => null,
        'condition_record' => null,
        'condition_sequential_number' => null,
        'tax_code' => null,
        'withholding_tax_code' => null,
        'cndn_rounding_off_diff_amount' => 'decimal',
        'condition_amount' => 'decimal',
        'transaction_currency' => null,
        'condition_control' => null,
        'condition_inactive_reason' => null,
        'condition_class' => null,
        'prcg_procedure_counter_for_header' => null,
        'factor_for_condition_basis_value' => null,
        'structure_condition' => null,
        'period_factor_for_cndn_basis_value' => null,
        'pricing_scale_basis' => null,
        'condition_scale_basis_value' => 'decimal',
        'condition_scale_basis_unit' => null,
        'condition_scale_basis_currency' => null,
        'cndn_is_relevant_for_intco_billing' => null,
        'condition_is_manually_changed' => null,
        'condition_is_for_configuration' => null,
        'variant_condition' => null,
        'to_sales_order' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sales_order' => false,
		'pricing_procedure_step' => false,
		'pricing_procedure_counter' => false,
		'condition_type' => true,
		'pricing_date_time' => true,
		'price_condition_determination_dte' => true,
		'condition_calculation_type' => true,
		'condition_base_value' => true,
		'condition_rate_value' => true,
		'condition_currency' => true,
		'condition_quantity' => true,
		'condition_quantity_unit' => true,
		'condition_quantity_sap_unit' => true,
		'condition_quantity_iso_unit' => true,
		'condition_category' => true,
		'condition_is_for_statistics' => true,
		'pricing_scale_type' => true,
		'condition_origin' => true,
		'is_group_condition' => true,
		'condition_record' => true,
		'condition_sequential_number' => true,
		'tax_code' => true,
		'withholding_tax_code' => true,
		'cndn_rounding_off_diff_amount' => true,
		'condition_amount' => true,
		'transaction_currency' => true,
		'condition_control' => true,
		'condition_inactive_reason' => true,
		'condition_class' => true,
		'prcg_procedure_counter_for_header' => true,
		'factor_for_condition_basis_value' => true,
		'structure_condition' => true,
		'period_factor_for_cndn_basis_value' => true,
		'pricing_scale_basis' => true,
		'condition_scale_basis_value' => true,
		'condition_scale_basis_unit' => true,
		'condition_scale_basis_currency' => true,
		'cndn_is_relevant_for_intco_billing' => true,
		'condition_is_manually_changed' => true,
		'condition_is_for_configuration' => true,
		'variant_condition' => true,
		'to_sales_order' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sales_order' => 'SalesOrder',
        'pricing_procedure_step' => 'PricingProcedureStep',
        'pricing_procedure_counter' => 'PricingProcedureCounter',
        'condition_type' => 'ConditionType',
        'pricing_date_time' => 'PricingDateTime',
        'price_condition_determination_dte' => 'PriceConditionDeterminationDte',
        'condition_calculation_type' => 'ConditionCalculationType',
        'condition_base_value' => 'ConditionBaseValue',
        'condition_rate_value' => 'ConditionRateValue',
        'condition_currency' => 'ConditionCurrency',
        'condition_quantity' => 'ConditionQuantity',
        'condition_quantity_unit' => 'ConditionQuantityUnit',
        'condition_quantity_sap_unit' => 'ConditionQuantitySAPUnit',
        'condition_quantity_iso_unit' => 'ConditionQuantityISOUnit',
        'condition_category' => 'ConditionCategory',
        'condition_is_for_statistics' => 'ConditionIsForStatistics',
        'pricing_scale_type' => 'PricingScaleType',
        'condition_origin' => 'ConditionOrigin',
        'is_group_condition' => 'IsGroupCondition',
        'condition_record' => 'ConditionRecord',
        'condition_sequential_number' => 'ConditionSequentialNumber',
        'tax_code' => 'TaxCode',
        'withholding_tax_code' => 'WithholdingTaxCode',
        'cndn_rounding_off_diff_amount' => 'CndnRoundingOffDiffAmount',
        'condition_amount' => 'ConditionAmount',
        'transaction_currency' => 'TransactionCurrency',
        'condition_control' => 'ConditionControl',
        'condition_inactive_reason' => 'ConditionInactiveReason',
        'condition_class' => 'ConditionClass',
        'prcg_procedure_counter_for_header' => 'PrcgProcedureCounterForHeader',
        'factor_for_condition_basis_value' => 'FactorForConditionBasisValue',
        'structure_condition' => 'StructureCondition',
        'period_factor_for_cndn_basis_value' => 'PeriodFactorForCndnBasisValue',
        'pricing_scale_basis' => 'PricingScaleBasis',
        'condition_scale_basis_value' => 'ConditionScaleBasisValue',
        'condition_scale_basis_unit' => 'ConditionScaleBasisUnit',
        'condition_scale_basis_currency' => 'ConditionScaleBasisCurrency',
        'cndn_is_relevant_for_intco_billing' => 'CndnIsRelevantForIntcoBilling',
        'condition_is_manually_changed' => 'ConditionIsManuallyChanged',
        'condition_is_for_configuration' => 'ConditionIsForConfiguration',
        'variant_condition' => 'VariantCondition',
        'to_sales_order' => 'to_SalesOrder'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sales_order' => 'setSalesOrder',
        'pricing_procedure_step' => 'setPricingProcedureStep',
        'pricing_procedure_counter' => 'setPricingProcedureCounter',
        'condition_type' => 'setConditionType',
        'pricing_date_time' => 'setPricingDateTime',
        'price_condition_determination_dte' => 'setPriceConditionDeterminationDte',
        'condition_calculation_type' => 'setConditionCalculationType',
        'condition_base_value' => 'setConditionBaseValue',
        'condition_rate_value' => 'setConditionRateValue',
        'condition_currency' => 'setConditionCurrency',
        'condition_quantity' => 'setConditionQuantity',
        'condition_quantity_unit' => 'setConditionQuantityUnit',
        'condition_quantity_sap_unit' => 'setConditionQuantitySapUnit',
        'condition_quantity_iso_unit' => 'setConditionQuantityIsoUnit',
        'condition_category' => 'setConditionCategory',
        'condition_is_for_statistics' => 'setConditionIsForStatistics',
        'pricing_scale_type' => 'setPricingScaleType',
        'condition_origin' => 'setConditionOrigin',
        'is_group_condition' => 'setIsGroupCondition',
        'condition_record' => 'setConditionRecord',
        'condition_sequential_number' => 'setConditionSequentialNumber',
        'tax_code' => 'setTaxCode',
        'withholding_tax_code' => 'setWithholdingTaxCode',
        'cndn_rounding_off_diff_amount' => 'setCndnRoundingOffDiffAmount',
        'condition_amount' => 'setConditionAmount',
        'transaction_currency' => 'setTransactionCurrency',
        'condition_control' => 'setConditionControl',
        'condition_inactive_reason' => 'setConditionInactiveReason',
        'condition_class' => 'setConditionClass',
        'prcg_procedure_counter_for_header' => 'setPrcgProcedureCounterForHeader',
        'factor_for_condition_basis_value' => 'setFactorForConditionBasisValue',
        'structure_condition' => 'setStructureCondition',
        'period_factor_for_cndn_basis_value' => 'setPeriodFactorForCndnBasisValue',
        'pricing_scale_basis' => 'setPricingScaleBasis',
        'condition_scale_basis_value' => 'setConditionScaleBasisValue',
        'condition_scale_basis_unit' => 'setConditionScaleBasisUnit',
        'condition_scale_basis_currency' => 'setConditionScaleBasisCurrency',
        'cndn_is_relevant_for_intco_billing' => 'setCndnIsRelevantForIntcoBilling',
        'condition_is_manually_changed' => 'setConditionIsManuallyChanged',
        'condition_is_for_configuration' => 'setConditionIsForConfiguration',
        'variant_condition' => 'setVariantCondition',
        'to_sales_order' => 'setToSalesOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sales_order' => 'getSalesOrder',
        'pricing_procedure_step' => 'getPricingProcedureStep',
        'pricing_procedure_counter' => 'getPricingProcedureCounter',
        'condition_type' => 'getConditionType',
        'pricing_date_time' => 'getPricingDateTime',
        'price_condition_determination_dte' => 'getPriceConditionDeterminationDte',
        'condition_calculation_type' => 'getConditionCalculationType',
        'condition_base_value' => 'getConditionBaseValue',
        'condition_rate_value' => 'getConditionRateValue',
        'condition_currency' => 'getConditionCurrency',
        'condition_quantity' => 'getConditionQuantity',
        'condition_quantity_unit' => 'getConditionQuantityUnit',
        'condition_quantity_sap_unit' => 'getConditionQuantitySapUnit',
        'condition_quantity_iso_unit' => 'getConditionQuantityIsoUnit',
        'condition_category' => 'getConditionCategory',
        'condition_is_for_statistics' => 'getConditionIsForStatistics',
        'pricing_scale_type' => 'getPricingScaleType',
        'condition_origin' => 'getConditionOrigin',
        'is_group_condition' => 'getIsGroupCondition',
        'condition_record' => 'getConditionRecord',
        'condition_sequential_number' => 'getConditionSequentialNumber',
        'tax_code' => 'getTaxCode',
        'withholding_tax_code' => 'getWithholdingTaxCode',
        'cndn_rounding_off_diff_amount' => 'getCndnRoundingOffDiffAmount',
        'condition_amount' => 'getConditionAmount',
        'transaction_currency' => 'getTransactionCurrency',
        'condition_control' => 'getConditionControl',
        'condition_inactive_reason' => 'getConditionInactiveReason',
        'condition_class' => 'getConditionClass',
        'prcg_procedure_counter_for_header' => 'getPrcgProcedureCounterForHeader',
        'factor_for_condition_basis_value' => 'getFactorForConditionBasisValue',
        'structure_condition' => 'getStructureCondition',
        'period_factor_for_cndn_basis_value' => 'getPeriodFactorForCndnBasisValue',
        'pricing_scale_basis' => 'getPricingScaleBasis',
        'condition_scale_basis_value' => 'getConditionScaleBasisValue',
        'condition_scale_basis_unit' => 'getConditionScaleBasisUnit',
        'condition_scale_basis_currency' => 'getConditionScaleBasisCurrency',
        'cndn_is_relevant_for_intco_billing' => 'getCndnIsRelevantForIntcoBilling',
        'condition_is_manually_changed' => 'getConditionIsManuallyChanged',
        'condition_is_for_configuration' => 'getConditionIsForConfiguration',
        'variant_condition' => 'getVariantCondition',
        'to_sales_order' => 'getToSalesOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sales_order', $data ?? [], null);
        $this->setIfExists('pricing_procedure_step', $data ?? [], null);
        $this->setIfExists('pricing_procedure_counter', $data ?? [], null);
        $this->setIfExists('condition_type', $data ?? [], null);
        $this->setIfExists('pricing_date_time', $data ?? [], null);
        $this->setIfExists('price_condition_determination_dte', $data ?? [], null);
        $this->setIfExists('condition_calculation_type', $data ?? [], null);
        $this->setIfExists('condition_base_value', $data ?? [], null);
        $this->setIfExists('condition_rate_value', $data ?? [], null);
        $this->setIfExists('condition_currency', $data ?? [], null);
        $this->setIfExists('condition_quantity', $data ?? [], null);
        $this->setIfExists('condition_quantity_unit', $data ?? [], null);
        $this->setIfExists('condition_quantity_sap_unit', $data ?? [], null);
        $this->setIfExists('condition_quantity_iso_unit', $data ?? [], null);
        $this->setIfExists('condition_category', $data ?? [], null);
        $this->setIfExists('condition_is_for_statistics', $data ?? [], null);
        $this->setIfExists('pricing_scale_type', $data ?? [], null);
        $this->setIfExists('condition_origin', $data ?? [], null);
        $this->setIfExists('is_group_condition', $data ?? [], null);
        $this->setIfExists('condition_record', $data ?? [], null);
        $this->setIfExists('condition_sequential_number', $data ?? [], null);
        $this->setIfExists('tax_code', $data ?? [], null);
        $this->setIfExists('withholding_tax_code', $data ?? [], null);
        $this->setIfExists('cndn_rounding_off_diff_amount', $data ?? [], null);
        $this->setIfExists('condition_amount', $data ?? [], null);
        $this->setIfExists('transaction_currency', $data ?? [], null);
        $this->setIfExists('condition_control', $data ?? [], null);
        $this->setIfExists('condition_inactive_reason', $data ?? [], null);
        $this->setIfExists('condition_class', $data ?? [], null);
        $this->setIfExists('prcg_procedure_counter_for_header', $data ?? [], null);
        $this->setIfExists('factor_for_condition_basis_value', $data ?? [], null);
        $this->setIfExists('structure_condition', $data ?? [], null);
        $this->setIfExists('period_factor_for_cndn_basis_value', $data ?? [], null);
        $this->setIfExists('pricing_scale_basis', $data ?? [], null);
        $this->setIfExists('condition_scale_basis_value', $data ?? [], null);
        $this->setIfExists('condition_scale_basis_unit', $data ?? [], null);
        $this->setIfExists('condition_scale_basis_currency', $data ?? [], null);
        $this->setIfExists('cndn_is_relevant_for_intco_billing', $data ?? [], null);
        $this->setIfExists('condition_is_manually_changed', $data ?? [], null);
        $this->setIfExists('condition_is_for_configuration', $data ?? [], null);
        $this->setIfExists('variant_condition', $data ?? [], null);
        $this->setIfExists('to_sales_order', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sales_order']) && (mb_strlen($this->container['sales_order']) > 10)) {
            $invalidProperties[] = "invalid value for 'sales_order', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['pricing_procedure_step']) && (mb_strlen($this->container['pricing_procedure_step']) > 3)) {
            $invalidProperties[] = "invalid value for 'pricing_procedure_step', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['pricing_procedure_counter']) && (mb_strlen($this->container['pricing_procedure_counter']) > 3)) {
            $invalidProperties[] = "invalid value for 'pricing_procedure_counter', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['condition_type']) && (mb_strlen($this->container['condition_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'condition_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['pricing_date_time']) && (mb_strlen($this->container['pricing_date_time']) > 14)) {
            $invalidProperties[] = "invalid value for 'pricing_date_time', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['condition_calculation_type']) && (mb_strlen($this->container['condition_calculation_type']) > 3)) {
            $invalidProperties[] = "invalid value for 'condition_calculation_type', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['condition_currency']) && (mb_strlen($this->container['condition_currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'condition_currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['condition_quantity_unit']) && (mb_strlen($this->container['condition_quantity_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'condition_quantity_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['condition_quantity_sap_unit']) && (mb_strlen($this->container['condition_quantity_sap_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'condition_quantity_sap_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['condition_quantity_iso_unit']) && (mb_strlen($this->container['condition_quantity_iso_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'condition_quantity_iso_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['condition_category']) && (mb_strlen($this->container['condition_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'condition_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['pricing_scale_type']) && (mb_strlen($this->container['pricing_scale_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'pricing_scale_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['condition_origin']) && (mb_strlen($this->container['condition_origin']) > 1)) {
            $invalidProperties[] = "invalid value for 'condition_origin', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['is_group_condition']) && (mb_strlen($this->container['is_group_condition']) > 1)) {
            $invalidProperties[] = "invalid value for 'is_group_condition', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['condition_record']) && (mb_strlen($this->container['condition_record']) > 10)) {
            $invalidProperties[] = "invalid value for 'condition_record', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['condition_sequential_number']) && (mb_strlen($this->container['condition_sequential_number']) > 3)) {
            $invalidProperties[] = "invalid value for 'condition_sequential_number', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['tax_code']) && (mb_strlen($this->container['tax_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'tax_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['withholding_tax_code']) && (mb_strlen($this->container['withholding_tax_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'withholding_tax_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['transaction_currency']) && (mb_strlen($this->container['transaction_currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'transaction_currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['condition_control']) && (mb_strlen($this->container['condition_control']) > 1)) {
            $invalidProperties[] = "invalid value for 'condition_control', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['condition_inactive_reason']) && (mb_strlen($this->container['condition_inactive_reason']) > 1)) {
            $invalidProperties[] = "invalid value for 'condition_inactive_reason', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['condition_class']) && (mb_strlen($this->container['condition_class']) > 1)) {
            $invalidProperties[] = "invalid value for 'condition_class', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['prcg_procedure_counter_for_header']) && (mb_strlen($this->container['prcg_procedure_counter_for_header']) > 3)) {
            $invalidProperties[] = "invalid value for 'prcg_procedure_counter_for_header', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['structure_condition']) && (mb_strlen($this->container['structure_condition']) > 1)) {
            $invalidProperties[] = "invalid value for 'structure_condition', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['pricing_scale_basis']) && (mb_strlen($this->container['pricing_scale_basis']) > 3)) {
            $invalidProperties[] = "invalid value for 'pricing_scale_basis', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['condition_scale_basis_unit']) && (mb_strlen($this->container['condition_scale_basis_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'condition_scale_basis_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['condition_scale_basis_currency']) && (mb_strlen($this->container['condition_scale_basis_currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'condition_scale_basis_currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['variant_condition']) && (mb_strlen($this->container['variant_condition']) > 26)) {
            $invalidProperties[] = "invalid value for 'variant_condition', the character length must be smaller than or equal to 26.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sales_order
     *
     * @return string|null
     */
    public function getSalesOrder()
    {
        return $this->container['sales_order'];
    }

    /**
     * Sets sales_order
     *
     * @param string|null $sales_order sales_order
     *
     * @return self
     */
    public function setSalesOrder($sales_order)
    {
        if (is_null($sales_order)) {
            throw new \InvalidArgumentException('non-nullable sales_order cannot be null');
        }
        if ((mb_strlen($sales_order) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sales_order when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 10.');
        }

        $this->container['sales_order'] = $sales_order;

        return $this;
    }

    /**
     * Gets pricing_procedure_step
     *
     * @return string|null
     */
    public function getPricingProcedureStep()
    {
        return $this->container['pricing_procedure_step'];
    }

    /**
     * Sets pricing_procedure_step
     *
     * @param string|null $pricing_procedure_step pricing_procedure_step
     *
     * @return self
     */
    public function setPricingProcedureStep($pricing_procedure_step)
    {
        if (is_null($pricing_procedure_step)) {
            throw new \InvalidArgumentException('non-nullable pricing_procedure_step cannot be null');
        }
        if ((mb_strlen($pricing_procedure_step) > 3)) {
            throw new \InvalidArgumentException('invalid length for $pricing_procedure_step when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 3.');
        }

        $this->container['pricing_procedure_step'] = $pricing_procedure_step;

        return $this;
    }

    /**
     * Gets pricing_procedure_counter
     *
     * @return string|null
     */
    public function getPricingProcedureCounter()
    {
        return $this->container['pricing_procedure_counter'];
    }

    /**
     * Sets pricing_procedure_counter
     *
     * @param string|null $pricing_procedure_counter Condition Counter
     *
     * @return self
     */
    public function setPricingProcedureCounter($pricing_procedure_counter)
    {
        if (is_null($pricing_procedure_counter)) {
            throw new \InvalidArgumentException('non-nullable pricing_procedure_counter cannot be null');
        }
        if ((mb_strlen($pricing_procedure_counter) > 3)) {
            throw new \InvalidArgumentException('invalid length for $pricing_procedure_counter when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 3.');
        }

        $this->container['pricing_procedure_counter'] = $pricing_procedure_counter;

        return $this;
    }

    /**
     * Gets condition_type
     *
     * @return string|null
     */
    public function getConditionType()
    {
        return $this->container['condition_type'];
    }

    /**
     * Sets condition_type
     *
     * @param string|null $condition_type condition_type
     *
     * @return self
     */
    public function setConditionType($condition_type)
    {
        if (is_null($condition_type)) {
            array_push($this->openAPINullablesSetToNull, 'condition_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($condition_type) && (mb_strlen($condition_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $condition_type when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 4.');
        }

        $this->container['condition_type'] = $condition_type;

        return $this;
    }

    /**
     * Gets pricing_date_time
     *
     * @return string|null
     */
    public function getPricingDateTime()
    {
        return $this->container['pricing_date_time'];
    }

    /**
     * Sets pricing_date_time
     *
     * @param string|null $pricing_date_time Timestamp for Pricing
     *
     * @return self
     */
    public function setPricingDateTime($pricing_date_time)
    {
        if (is_null($pricing_date_time)) {
            array_push($this->openAPINullablesSetToNull, 'pricing_date_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pricing_date_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($pricing_date_time) && (mb_strlen($pricing_date_time) > 14)) {
            throw new \InvalidArgumentException('invalid length for $pricing_date_time when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 14.');
        }

        $this->container['pricing_date_time'] = $pricing_date_time;

        return $this;
    }

    /**
     * Gets price_condition_determination_dte
     *
     * @return string|null
     */
    public function getPriceConditionDeterminationDte()
    {
        return $this->container['price_condition_determination_dte'];
    }

    /**
     * Sets price_condition_determination_dte
     *
     * @param string|null $price_condition_determination_dte Condition Pricing Date
     *
     * @return self
     */
    public function setPriceConditionDeterminationDte($price_condition_determination_dte)
    {
        if (is_null($price_condition_determination_dte)) {
            array_push($this->openAPINullablesSetToNull, 'price_condition_determination_dte');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_condition_determination_dte', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price_condition_determination_dte'] = $price_condition_determination_dte;

        return $this;
    }

    /**
     * Gets condition_calculation_type
     *
     * @return string|null
     */
    public function getConditionCalculationType()
    {
        return $this->container['condition_calculation_type'];
    }

    /**
     * Sets condition_calculation_type
     *
     * @param string|null $condition_calculation_type Calculation Type for Condition
     *
     * @return self
     */
    public function setConditionCalculationType($condition_calculation_type)
    {
        if (is_null($condition_calculation_type)) {
            array_push($this->openAPINullablesSetToNull, 'condition_calculation_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_calculation_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($condition_calculation_type) && (mb_strlen($condition_calculation_type) > 3)) {
            throw new \InvalidArgumentException('invalid length for $condition_calculation_type when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 3.');
        }

        $this->container['condition_calculation_type'] = $condition_calculation_type;

        return $this;
    }

    /**
     * Gets condition_base_value
     *
     * @return float|null
     */
    public function getConditionBaseValue()
    {
        return $this->container['condition_base_value'];
    }

    /**
     * Sets condition_base_value
     *
     * @param float|null $condition_base_value condition_base_value
     *
     * @return self
     */
    public function setConditionBaseValue($condition_base_value)
    {
        if (is_null($condition_base_value)) {
            array_push($this->openAPINullablesSetToNull, 'condition_base_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_base_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['condition_base_value'] = $condition_base_value;

        return $this;
    }

    /**
     * Gets condition_rate_value
     *
     * @return float|null
     */
    public function getConditionRateValue()
    {
        return $this->container['condition_rate_value'];
    }

    /**
     * Sets condition_rate_value
     *
     * @param float|null $condition_rate_value Condition Amount or Percentage
     *
     * @return self
     */
    public function setConditionRateValue($condition_rate_value)
    {
        if (is_null($condition_rate_value)) {
            array_push($this->openAPINullablesSetToNull, 'condition_rate_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_rate_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['condition_rate_value'] = $condition_rate_value;

        return $this;
    }

    /**
     * Gets condition_currency
     *
     * @return string|null
     */
    public function getConditionCurrency()
    {
        return $this->container['condition_currency'];
    }

    /**
     * Sets condition_currency
     *
     * @param string|null $condition_currency Currency Key
     *
     * @return self
     */
    public function setConditionCurrency($condition_currency)
    {
        if (is_null($condition_currency)) {
            array_push($this->openAPINullablesSetToNull, 'condition_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($condition_currency) && (mb_strlen($condition_currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $condition_currency when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 5.');
        }

        $this->container['condition_currency'] = $condition_currency;

        return $this;
    }

    /**
     * Gets condition_quantity
     *
     * @return float|null
     */
    public function getConditionQuantity()
    {
        return $this->container['condition_quantity'];
    }

    /**
     * Sets condition_quantity
     *
     * @param float|null $condition_quantity Condition Pricing Unit
     *
     * @return self
     */
    public function setConditionQuantity($condition_quantity)
    {
        if (is_null($condition_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'condition_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['condition_quantity'] = $condition_quantity;

        return $this;
    }

    /**
     * Gets condition_quantity_unit
     *
     * @return string|null
     */
    public function getConditionQuantityUnit()
    {
        return $this->container['condition_quantity_unit'];
    }

    /**
     * Sets condition_quantity_unit
     *
     * @param string|null $condition_quantity_unit Condition Unit in the Document
     *
     * @return self
     */
    public function setConditionQuantityUnit($condition_quantity_unit)
    {
        if (is_null($condition_quantity_unit)) {
            array_push($this->openAPINullablesSetToNull, 'condition_quantity_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_quantity_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($condition_quantity_unit) && (mb_strlen($condition_quantity_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $condition_quantity_unit when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 3.');
        }

        $this->container['condition_quantity_unit'] = $condition_quantity_unit;

        return $this;
    }

    /**
     * Gets condition_quantity_sap_unit
     *
     * @return string|null
     */
    public function getConditionQuantitySapUnit()
    {
        return $this->container['condition_quantity_sap_unit'];
    }

    /**
     * Sets condition_quantity_sap_unit
     *
     * @param string|null $condition_quantity_sap_unit SAP Unit Code for Condition Quantity
     *
     * @return self
     */
    public function setConditionQuantitySapUnit($condition_quantity_sap_unit)
    {
        if (is_null($condition_quantity_sap_unit)) {
            array_push($this->openAPINullablesSetToNull, 'condition_quantity_sap_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_quantity_sap_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($condition_quantity_sap_unit) && (mb_strlen($condition_quantity_sap_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $condition_quantity_sap_unit when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 3.');
        }

        $this->container['condition_quantity_sap_unit'] = $condition_quantity_sap_unit;

        return $this;
    }

    /**
     * Gets condition_quantity_iso_unit
     *
     * @return string|null
     */
    public function getConditionQuantityIsoUnit()
    {
        return $this->container['condition_quantity_iso_unit'];
    }

    /**
     * Sets condition_quantity_iso_unit
     *
     * @param string|null $condition_quantity_iso_unit ISO Unit Code for Condition Quantity
     *
     * @return self
     */
    public function setConditionQuantityIsoUnit($condition_quantity_iso_unit)
    {
        if (is_null($condition_quantity_iso_unit)) {
            array_push($this->openAPINullablesSetToNull, 'condition_quantity_iso_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_quantity_iso_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($condition_quantity_iso_unit) && (mb_strlen($condition_quantity_iso_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $condition_quantity_iso_unit when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 3.');
        }

        $this->container['condition_quantity_iso_unit'] = $condition_quantity_iso_unit;

        return $this;
    }

    /**
     * Gets condition_category
     *
     * @return string|null
     */
    public function getConditionCategory()
    {
        return $this->container['condition_category'];
    }

    /**
     * Sets condition_category
     *
     * @param string|null $condition_category Condition Category (Examples: Tax, Freight, Price, Cost)
     *
     * @return self
     */
    public function setConditionCategory($condition_category)
    {
        if (is_null($condition_category)) {
            array_push($this->openAPINullablesSetToNull, 'condition_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($condition_category) && (mb_strlen($condition_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $condition_category when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 1.');
        }

        $this->container['condition_category'] = $condition_category;

        return $this;
    }

    /**
     * Gets condition_is_for_statistics
     *
     * @return bool|null
     */
    public function getConditionIsForStatistics()
    {
        return $this->container['condition_is_for_statistics'];
    }

    /**
     * Sets condition_is_for_statistics
     *
     * @param bool|null $condition_is_for_statistics Condition is used for statistics
     *
     * @return self
     */
    public function setConditionIsForStatistics($condition_is_for_statistics)
    {
        if (is_null($condition_is_for_statistics)) {
            array_push($this->openAPINullablesSetToNull, 'condition_is_for_statistics');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_is_for_statistics', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['condition_is_for_statistics'] = $condition_is_for_statistics;

        return $this;
    }

    /**
     * Gets pricing_scale_type
     *
     * @return string|null
     */
    public function getPricingScaleType()
    {
        return $this->container['pricing_scale_type'];
    }

    /**
     * Sets pricing_scale_type
     *
     * @param string|null $pricing_scale_type pricing_scale_type
     *
     * @return self
     */
    public function setPricingScaleType($pricing_scale_type)
    {
        if (is_null($pricing_scale_type)) {
            array_push($this->openAPINullablesSetToNull, 'pricing_scale_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pricing_scale_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($pricing_scale_type) && (mb_strlen($pricing_scale_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $pricing_scale_type when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 1.');
        }

        $this->container['pricing_scale_type'] = $pricing_scale_type;

        return $this;
    }

    /**
     * Gets condition_origin
     *
     * @return string|null
     */
    public function getConditionOrigin()
    {
        return $this->container['condition_origin'];
    }

    /**
     * Sets condition_origin
     *
     * @param string|null $condition_origin Origin of the Condition
     *
     * @return self
     */
    public function setConditionOrigin($condition_origin)
    {
        if (is_null($condition_origin)) {
            array_push($this->openAPINullablesSetToNull, 'condition_origin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_origin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($condition_origin) && (mb_strlen($condition_origin) > 1)) {
            throw new \InvalidArgumentException('invalid length for $condition_origin when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 1.');
        }

        $this->container['condition_origin'] = $condition_origin;

        return $this;
    }

    /**
     * Gets is_group_condition
     *
     * @return string|null
     */
    public function getIsGroupCondition()
    {
        return $this->container['is_group_condition'];
    }

    /**
     * Sets is_group_condition
     *
     * @param string|null $is_group_condition is_group_condition
     *
     * @return self
     */
    public function setIsGroupCondition($is_group_condition)
    {
        if (is_null($is_group_condition)) {
            array_push($this->openAPINullablesSetToNull, 'is_group_condition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_group_condition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($is_group_condition) && (mb_strlen($is_group_condition) > 1)) {
            throw new \InvalidArgumentException('invalid length for $is_group_condition when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 1.');
        }

        $this->container['is_group_condition'] = $is_group_condition;

        return $this;
    }

    /**
     * Gets condition_record
     *
     * @return string|null
     */
    public function getConditionRecord()
    {
        return $this->container['condition_record'];
    }

    /**
     * Sets condition_record
     *
     * @param string|null $condition_record Number of Condition Record
     *
     * @return self
     */
    public function setConditionRecord($condition_record)
    {
        if (is_null($condition_record)) {
            array_push($this->openAPINullablesSetToNull, 'condition_record');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_record', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($condition_record) && (mb_strlen($condition_record) > 10)) {
            throw new \InvalidArgumentException('invalid length for $condition_record when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 10.');
        }

        $this->container['condition_record'] = $condition_record;

        return $this;
    }

    /**
     * Gets condition_sequential_number
     *
     * @return string|null
     */
    public function getConditionSequentialNumber()
    {
        return $this->container['condition_sequential_number'];
    }

    /**
     * Sets condition_sequential_number
     *
     * @param string|null $condition_sequential_number Sequential Number of the Condition
     *
     * @return self
     */
    public function setConditionSequentialNumber($condition_sequential_number)
    {
        if (is_null($condition_sequential_number)) {
            array_push($this->openAPINullablesSetToNull, 'condition_sequential_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_sequential_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($condition_sequential_number) && (mb_strlen($condition_sequential_number) > 3)) {
            throw new \InvalidArgumentException('invalid length for $condition_sequential_number when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 3.');
        }

        $this->container['condition_sequential_number'] = $condition_sequential_number;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string|null
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string|null $tax_code Tax on Sales/Purchases Code
     *
     * @return self
     */
    public function setTaxCode($tax_code)
    {
        if (is_null($tax_code)) {
            array_push($this->openAPINullablesSetToNull, 'tax_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tax_code) && (mb_strlen($tax_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $tax_code when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 2.');
        }

        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets withholding_tax_code
     *
     * @return string|null
     */
    public function getWithholdingTaxCode()
    {
        return $this->container['withholding_tax_code'];
    }

    /**
     * Sets withholding_tax_code
     *
     * @param string|null $withholding_tax_code Withholding Tax Code
     *
     * @return self
     */
    public function setWithholdingTaxCode($withholding_tax_code)
    {
        if (is_null($withholding_tax_code)) {
            array_push($this->openAPINullablesSetToNull, 'withholding_tax_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('withholding_tax_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($withholding_tax_code) && (mb_strlen($withholding_tax_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $withholding_tax_code when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 2.');
        }

        $this->container['withholding_tax_code'] = $withholding_tax_code;

        return $this;
    }

    /**
     * Gets cndn_rounding_off_diff_amount
     *
     * @return float|null
     */
    public function getCndnRoundingOffDiffAmount()
    {
        return $this->container['cndn_rounding_off_diff_amount'];
    }

    /**
     * Sets cndn_rounding_off_diff_amount
     *
     * @param float|null $cndn_rounding_off_diff_amount Rounding-Off Difference of the Condition
     *
     * @return self
     */
    public function setCndnRoundingOffDiffAmount($cndn_rounding_off_diff_amount)
    {
        if (is_null($cndn_rounding_off_diff_amount)) {
            array_push($this->openAPINullablesSetToNull, 'cndn_rounding_off_diff_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cndn_rounding_off_diff_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['cndn_rounding_off_diff_amount'] = $cndn_rounding_off_diff_amount;

        return $this;
    }

    /**
     * Gets condition_amount
     *
     * @return float|null
     */
    public function getConditionAmount()
    {
        return $this->container['condition_amount'];
    }

    /**
     * Sets condition_amount
     *
     * @param float|null $condition_amount condition_amount
     *
     * @return self
     */
    public function setConditionAmount($condition_amount)
    {
        if (is_null($condition_amount)) {
            array_push($this->openAPINullablesSetToNull, 'condition_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['condition_amount'] = $condition_amount;

        return $this;
    }

    /**
     * Gets transaction_currency
     *
     * @return string|null
     */
    public function getTransactionCurrency()
    {
        return $this->container['transaction_currency'];
    }

    /**
     * Sets transaction_currency
     *
     * @param string|null $transaction_currency SD Document Currency
     *
     * @return self
     */
    public function setTransactionCurrency($transaction_currency)
    {
        if (is_null($transaction_currency)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transaction_currency) && (mb_strlen($transaction_currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $transaction_currency when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 5.');
        }

        $this->container['transaction_currency'] = $transaction_currency;

        return $this;
    }

    /**
     * Gets condition_control
     *
     * @return string|null
     */
    public function getConditionControl()
    {
        return $this->container['condition_control'];
    }

    /**
     * Sets condition_control
     *
     * @param string|null $condition_control condition_control
     *
     * @return self
     */
    public function setConditionControl($condition_control)
    {
        if (is_null($condition_control)) {
            array_push($this->openAPINullablesSetToNull, 'condition_control');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_control', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($condition_control) && (mb_strlen($condition_control) > 1)) {
            throw new \InvalidArgumentException('invalid length for $condition_control when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 1.');
        }

        $this->container['condition_control'] = $condition_control;

        return $this;
    }

    /**
     * Gets condition_inactive_reason
     *
     * @return string|null
     */
    public function getConditionInactiveReason()
    {
        return $this->container['condition_inactive_reason'];
    }

    /**
     * Sets condition_inactive_reason
     *
     * @param string|null $condition_inactive_reason Condition is Inactive
     *
     * @return self
     */
    public function setConditionInactiveReason($condition_inactive_reason)
    {
        if (is_null($condition_inactive_reason)) {
            array_push($this->openAPINullablesSetToNull, 'condition_inactive_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_inactive_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($condition_inactive_reason) && (mb_strlen($condition_inactive_reason) > 1)) {
            throw new \InvalidArgumentException('invalid length for $condition_inactive_reason when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 1.');
        }

        $this->container['condition_inactive_reason'] = $condition_inactive_reason;

        return $this;
    }

    /**
     * Gets condition_class
     *
     * @return string|null
     */
    public function getConditionClass()
    {
        return $this->container['condition_class'];
    }

    /**
     * Sets condition_class
     *
     * @param string|null $condition_class condition_class
     *
     * @return self
     */
    public function setConditionClass($condition_class)
    {
        if (is_null($condition_class)) {
            array_push($this->openAPINullablesSetToNull, 'condition_class');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_class', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($condition_class) && (mb_strlen($condition_class) > 1)) {
            throw new \InvalidArgumentException('invalid length for $condition_class when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 1.');
        }

        $this->container['condition_class'] = $condition_class;

        return $this;
    }

    /**
     * Gets prcg_procedure_counter_for_header
     *
     * @return string|null
     */
    public function getPrcgProcedureCounterForHeader()
    {
        return $this->container['prcg_procedure_counter_for_header'];
    }

    /**
     * Sets prcg_procedure_counter_for_header
     *
     * @param string|null $prcg_procedure_counter_for_header Condition Counter (Header)
     *
     * @return self
     */
    public function setPrcgProcedureCounterForHeader($prcg_procedure_counter_for_header)
    {
        if (is_null($prcg_procedure_counter_for_header)) {
            array_push($this->openAPINullablesSetToNull, 'prcg_procedure_counter_for_header');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prcg_procedure_counter_for_header', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($prcg_procedure_counter_for_header) && (mb_strlen($prcg_procedure_counter_for_header) > 3)) {
            throw new \InvalidArgumentException('invalid length for $prcg_procedure_counter_for_header when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 3.');
        }

        $this->container['prcg_procedure_counter_for_header'] = $prcg_procedure_counter_for_header;

        return $this;
    }

    /**
     * Gets factor_for_condition_basis_value
     *
     * @return \BeLenka\SAP\SalesOrder\Model\ConditionFactor|null
     */
    public function getFactorForConditionBasisValue()
    {
        return $this->container['factor_for_condition_basis_value'];
    }

    /**
     * Sets factor_for_condition_basis_value
     *
     * @param \BeLenka\SAP\SalesOrder\Model\ConditionFactor|null $factor_for_condition_basis_value factor_for_condition_basis_value
     *
     * @return self
     */
    public function setFactorForConditionBasisValue($factor_for_condition_basis_value)
    {
        if (is_null($factor_for_condition_basis_value)) {
            array_push($this->openAPINullablesSetToNull, 'factor_for_condition_basis_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('factor_for_condition_basis_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['factor_for_condition_basis_value'] = $factor_for_condition_basis_value;

        return $this;
    }

    /**
     * Gets structure_condition
     *
     * @return string|null
     */
    public function getStructureCondition()
    {
        return $this->container['structure_condition'];
    }

    /**
     * Sets structure_condition
     *
     * @param string|null $structure_condition structure_condition
     *
     * @return self
     */
    public function setStructureCondition($structure_condition)
    {
        if (is_null($structure_condition)) {
            array_push($this->openAPINullablesSetToNull, 'structure_condition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('structure_condition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($structure_condition) && (mb_strlen($structure_condition) > 1)) {
            throw new \InvalidArgumentException('invalid length for $structure_condition when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 1.');
        }

        $this->container['structure_condition'] = $structure_condition;

        return $this;
    }

    /**
     * Gets period_factor_for_cndn_basis_value
     *
     * @return \BeLenka\SAP\SalesOrder\Model\ConditionFactor1|null
     */
    public function getPeriodFactorForCndnBasisValue()
    {
        return $this->container['period_factor_for_cndn_basis_value'];
    }

    /**
     * Sets period_factor_for_cndn_basis_value
     *
     * @param \BeLenka\SAP\SalesOrder\Model\ConditionFactor1|null $period_factor_for_cndn_basis_value period_factor_for_cndn_basis_value
     *
     * @return self
     */
    public function setPeriodFactorForCndnBasisValue($period_factor_for_cndn_basis_value)
    {
        if (is_null($period_factor_for_cndn_basis_value)) {
            array_push($this->openAPINullablesSetToNull, 'period_factor_for_cndn_basis_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('period_factor_for_cndn_basis_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['period_factor_for_cndn_basis_value'] = $period_factor_for_cndn_basis_value;

        return $this;
    }

    /**
     * Gets pricing_scale_basis
     *
     * @return string|null
     */
    public function getPricingScaleBasis()
    {
        return $this->container['pricing_scale_basis'];
    }

    /**
     * Sets pricing_scale_basis
     *
     * @param string|null $pricing_scale_basis Scale Basis Indicator
     *
     * @return self
     */
    public function setPricingScaleBasis($pricing_scale_basis)
    {
        if (is_null($pricing_scale_basis)) {
            array_push($this->openAPINullablesSetToNull, 'pricing_scale_basis');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pricing_scale_basis', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($pricing_scale_basis) && (mb_strlen($pricing_scale_basis) > 3)) {
            throw new \InvalidArgumentException('invalid length for $pricing_scale_basis when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 3.');
        }

        $this->container['pricing_scale_basis'] = $pricing_scale_basis;

        return $this;
    }

    /**
     * Gets condition_scale_basis_value
     *
     * @return float|null
     */
    public function getConditionScaleBasisValue()
    {
        return $this->container['condition_scale_basis_value'];
    }

    /**
     * Sets condition_scale_basis_value
     *
     * @param float|null $condition_scale_basis_value Scale Base Value
     *
     * @return self
     */
    public function setConditionScaleBasisValue($condition_scale_basis_value)
    {
        if (is_null($condition_scale_basis_value)) {
            array_push($this->openAPINullablesSetToNull, 'condition_scale_basis_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_scale_basis_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['condition_scale_basis_value'] = $condition_scale_basis_value;

        return $this;
    }

    /**
     * Gets condition_scale_basis_unit
     *
     * @return string|null
     */
    public function getConditionScaleBasisUnit()
    {
        return $this->container['condition_scale_basis_unit'];
    }

    /**
     * Sets condition_scale_basis_unit
     *
     * @param string|null $condition_scale_basis_unit Condition Scale Unit of Measure
     *
     * @return self
     */
    public function setConditionScaleBasisUnit($condition_scale_basis_unit)
    {
        if (is_null($condition_scale_basis_unit)) {
            array_push($this->openAPINullablesSetToNull, 'condition_scale_basis_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_scale_basis_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($condition_scale_basis_unit) && (mb_strlen($condition_scale_basis_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $condition_scale_basis_unit when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 3.');
        }

        $this->container['condition_scale_basis_unit'] = $condition_scale_basis_unit;

        return $this;
    }

    /**
     * Gets condition_scale_basis_currency
     *
     * @return string|null
     */
    public function getConditionScaleBasisCurrency()
    {
        return $this->container['condition_scale_basis_currency'];
    }

    /**
     * Sets condition_scale_basis_currency
     *
     * @param string|null $condition_scale_basis_currency condition_scale_basis_currency
     *
     * @return self
     */
    public function setConditionScaleBasisCurrency($condition_scale_basis_currency)
    {
        if (is_null($condition_scale_basis_currency)) {
            array_push($this->openAPINullablesSetToNull, 'condition_scale_basis_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_scale_basis_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($condition_scale_basis_currency) && (mb_strlen($condition_scale_basis_currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $condition_scale_basis_currency when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 5.');
        }

        $this->container['condition_scale_basis_currency'] = $condition_scale_basis_currency;

        return $this;
    }

    /**
     * Gets cndn_is_relevant_for_intco_billing
     *
     * @return bool|null
     */
    public function getCndnIsRelevantForIntcoBilling()
    {
        return $this->container['cndn_is_relevant_for_intco_billing'];
    }

    /**
     * Sets cndn_is_relevant_for_intco_billing
     *
     * @param bool|null $cndn_is_relevant_for_intco_billing Condition for Intercompany Billing
     *
     * @return self
     */
    public function setCndnIsRelevantForIntcoBilling($cndn_is_relevant_for_intco_billing)
    {
        if (is_null($cndn_is_relevant_for_intco_billing)) {
            array_push($this->openAPINullablesSetToNull, 'cndn_is_relevant_for_intco_billing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cndn_is_relevant_for_intco_billing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cndn_is_relevant_for_intco_billing'] = $cndn_is_relevant_for_intco_billing;

        return $this;
    }

    /**
     * Gets condition_is_manually_changed
     *
     * @return bool|null
     */
    public function getConditionIsManuallyChanged()
    {
        return $this->container['condition_is_manually_changed'];
    }

    /**
     * Sets condition_is_manually_changed
     *
     * @param bool|null $condition_is_manually_changed Condition Changed Manually
     *
     * @return self
     */
    public function setConditionIsManuallyChanged($condition_is_manually_changed)
    {
        if (is_null($condition_is_manually_changed)) {
            array_push($this->openAPINullablesSetToNull, 'condition_is_manually_changed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_is_manually_changed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['condition_is_manually_changed'] = $condition_is_manually_changed;

        return $this;
    }

    /**
     * Gets condition_is_for_configuration
     *
     * @return bool|null
     */
    public function getConditionIsForConfiguration()
    {
        return $this->container['condition_is_for_configuration'];
    }

    /**
     * Sets condition_is_for_configuration
     *
     * @param bool|null $condition_is_for_configuration Condition Used for Variant Configuration
     *
     * @return self
     */
    public function setConditionIsForConfiguration($condition_is_for_configuration)
    {
        if (is_null($condition_is_for_configuration)) {
            array_push($this->openAPINullablesSetToNull, 'condition_is_for_configuration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('condition_is_for_configuration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['condition_is_for_configuration'] = $condition_is_for_configuration;

        return $this;
    }

    /**
     * Gets variant_condition
     *
     * @return string|null
     */
    public function getVariantCondition()
    {
        return $this->container['variant_condition'];
    }

    /**
     * Sets variant_condition
     *
     * @param string|null $variant_condition Variant Condition Key
     *
     * @return self
     */
    public function setVariantCondition($variant_condition)
    {
        if (is_null($variant_condition)) {
            array_push($this->openAPINullablesSetToNull, 'variant_condition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('variant_condition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($variant_condition) && (mb_strlen($variant_condition) > 26)) {
            throw new \InvalidArgumentException('invalid length for $variant_condition when calling APISALESORDERSRVASalesOrderHeaderPrElementType., must be smaller than or equal to 26.');
        }

        $this->container['variant_condition'] = $variant_condition;

        return $this;
    }

    /**
     * Gets to_sales_order
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderType|null
     */
    public function getToSalesOrder()
    {
        return $this->container['to_sales_order'];
    }

    /**
     * Sets to_sales_order
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderType|null $to_sales_order to_sales_order
     *
     * @return self
     */
    public function setToSalesOrder($to_sales_order)
    {
        if (is_null($to_sales_order)) {
            throw new \InvalidArgumentException('non-nullable to_sales_order cannot be null');
        }
        $this->container['to_sales_order'] = $to_sales_order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


