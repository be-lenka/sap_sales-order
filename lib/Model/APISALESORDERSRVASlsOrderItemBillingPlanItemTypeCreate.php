<?php
/**
 * APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\SalesOrder\Model;

use \ArrayAccess;
use \BeLenka\SAP\SalesOrder\ObjectSerializer;

/**
 * APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_SALES_ORDER_SRV.A_SlsOrderItemBillingPlanItemType-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'billing_plan_date_category' => 'string',
        'billing_plan_billing_date' => 'string',
        'billing_plan_amount' => 'float',
        'billing_plan_amount_percent' => 'float',
        'customer_payment_terms' => 'string',
        'proposed_billing_document_type' => 'string',
        'billing_plan_date_description_code' => 'string',
        'billing_block_reason' => 'string',
        'to_billing_plan' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemBillingPlanTypeCreate',
        'to_sales_order' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeCreate',
        'to_sales_order_item' => '\BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeCreate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'billing_plan_date_category' => null,
        'billing_plan_billing_date' => null,
        'billing_plan_amount' => 'decimal',
        'billing_plan_amount_percent' => 'decimal',
        'customer_payment_terms' => null,
        'proposed_billing_document_type' => null,
        'billing_plan_date_description_code' => null,
        'billing_block_reason' => null,
        'to_billing_plan' => null,
        'to_sales_order' => null,
        'to_sales_order_item' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'billing_plan_date_category' => true,
		'billing_plan_billing_date' => true,
		'billing_plan_amount' => true,
		'billing_plan_amount_percent' => true,
		'customer_payment_terms' => true,
		'proposed_billing_document_type' => true,
		'billing_plan_date_description_code' => true,
		'billing_block_reason' => true,
		'to_billing_plan' => false,
		'to_sales_order' => false,
		'to_sales_order_item' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_plan_date_category' => 'BillingPlanDateCategory',
        'billing_plan_billing_date' => 'BillingPlanBillingDate',
        'billing_plan_amount' => 'BillingPlanAmount',
        'billing_plan_amount_percent' => 'BillingPlanAmountPercent',
        'customer_payment_terms' => 'CustomerPaymentTerms',
        'proposed_billing_document_type' => 'ProposedBillingDocumentType',
        'billing_plan_date_description_code' => 'BillingPlanDateDescriptionCode',
        'billing_block_reason' => 'BillingBlockReason',
        'to_billing_plan' => 'to_BillingPlan',
        'to_sales_order' => 'to_SalesOrder',
        'to_sales_order_item' => 'to_SalesOrderItem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_plan_date_category' => 'setBillingPlanDateCategory',
        'billing_plan_billing_date' => 'setBillingPlanBillingDate',
        'billing_plan_amount' => 'setBillingPlanAmount',
        'billing_plan_amount_percent' => 'setBillingPlanAmountPercent',
        'customer_payment_terms' => 'setCustomerPaymentTerms',
        'proposed_billing_document_type' => 'setProposedBillingDocumentType',
        'billing_plan_date_description_code' => 'setBillingPlanDateDescriptionCode',
        'billing_block_reason' => 'setBillingBlockReason',
        'to_billing_plan' => 'setToBillingPlan',
        'to_sales_order' => 'setToSalesOrder',
        'to_sales_order_item' => 'setToSalesOrderItem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_plan_date_category' => 'getBillingPlanDateCategory',
        'billing_plan_billing_date' => 'getBillingPlanBillingDate',
        'billing_plan_amount' => 'getBillingPlanAmount',
        'billing_plan_amount_percent' => 'getBillingPlanAmountPercent',
        'customer_payment_terms' => 'getCustomerPaymentTerms',
        'proposed_billing_document_type' => 'getProposedBillingDocumentType',
        'billing_plan_date_description_code' => 'getBillingPlanDateDescriptionCode',
        'billing_block_reason' => 'getBillingBlockReason',
        'to_billing_plan' => 'getToBillingPlan',
        'to_sales_order' => 'getToSalesOrder',
        'to_sales_order_item' => 'getToSalesOrderItem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('billing_plan_date_category', $data ?? [], null);
        $this->setIfExists('billing_plan_billing_date', $data ?? [], null);
        $this->setIfExists('billing_plan_amount', $data ?? [], null);
        $this->setIfExists('billing_plan_amount_percent', $data ?? [], null);
        $this->setIfExists('customer_payment_terms', $data ?? [], null);
        $this->setIfExists('proposed_billing_document_type', $data ?? [], null);
        $this->setIfExists('billing_plan_date_description_code', $data ?? [], null);
        $this->setIfExists('billing_block_reason', $data ?? [], null);
        $this->setIfExists('to_billing_plan', $data ?? [], null);
        $this->setIfExists('to_sales_order', $data ?? [], null);
        $this->setIfExists('to_sales_order_item', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['billing_plan_date_category']) && (mb_strlen($this->container['billing_plan_date_category']) > 2)) {
            $invalidProperties[] = "invalid value for 'billing_plan_date_category', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_payment_terms']) && (mb_strlen($this->container['customer_payment_terms']) > 4)) {
            $invalidProperties[] = "invalid value for 'customer_payment_terms', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['proposed_billing_document_type']) && (mb_strlen($this->container['proposed_billing_document_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'proposed_billing_document_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['billing_plan_date_description_code']) && (mb_strlen($this->container['billing_plan_date_description_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'billing_plan_date_description_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['billing_block_reason']) && (mb_strlen($this->container['billing_block_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'billing_block_reason', the character length must be smaller than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_plan_date_category
     *
     * @return string|null
     */
    public function getBillingPlanDateCategory()
    {
        return $this->container['billing_plan_date_category'];
    }

    /**
     * Sets billing_plan_date_category
     *
     * @param string|null $billing_plan_date_category billing_plan_date_category
     *
     * @return self
     */
    public function setBillingPlanDateCategory($billing_plan_date_category)
    {
        if (is_null($billing_plan_date_category)) {
            array_push($this->openAPINullablesSetToNull, 'billing_plan_date_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_plan_date_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_plan_date_category) && (mb_strlen($billing_plan_date_category) > 2)) {
            throw new \InvalidArgumentException('invalid length for $billing_plan_date_category when calling APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['billing_plan_date_category'] = $billing_plan_date_category;

        return $this;
    }

    /**
     * Gets billing_plan_billing_date
     *
     * @return string|null
     */
    public function getBillingPlanBillingDate()
    {
        return $this->container['billing_plan_billing_date'];
    }

    /**
     * Sets billing_plan_billing_date
     *
     * @param string|null $billing_plan_billing_date billing_plan_billing_date
     *
     * @return self
     */
    public function setBillingPlanBillingDate($billing_plan_billing_date)
    {
        if (is_null($billing_plan_billing_date)) {
            array_push($this->openAPINullablesSetToNull, 'billing_plan_billing_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_plan_billing_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_plan_billing_date'] = $billing_plan_billing_date;

        return $this;
    }

    /**
     * Gets billing_plan_amount
     *
     * @return float|null
     */
    public function getBillingPlanAmount()
    {
        return $this->container['billing_plan_amount'];
    }

    /**
     * Sets billing_plan_amount
     *
     * @param float|null $billing_plan_amount Value to be billed/calc. on date in billing/invoice plan
     *
     * @return self
     */
    public function setBillingPlanAmount($billing_plan_amount)
    {
        if (is_null($billing_plan_amount)) {
            array_push($this->openAPINullablesSetToNull, 'billing_plan_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_plan_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['billing_plan_amount'] = $billing_plan_amount;

        return $this;
    }

    /**
     * Gets billing_plan_amount_percent
     *
     * @return float|null
     */
    public function getBillingPlanAmountPercent()
    {
        return $this->container['billing_plan_amount_percent'];
    }

    /**
     * Sets billing_plan_amount_percent
     *
     * @param float|null $billing_plan_amount_percent Percentage of value to be invoiced
     *
     * @return self
     */
    public function setBillingPlanAmountPercent($billing_plan_amount_percent)
    {
        if (is_null($billing_plan_amount_percent)) {
            array_push($this->openAPINullablesSetToNull, 'billing_plan_amount_percent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_plan_amount_percent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['billing_plan_amount_percent'] = $billing_plan_amount_percent;

        return $this;
    }

    /**
     * Gets customer_payment_terms
     *
     * @return string|null
     */
    public function getCustomerPaymentTerms()
    {
        return $this->container['customer_payment_terms'];
    }

    /**
     * Sets customer_payment_terms
     *
     * @param string|null $customer_payment_terms Key for Terms of Payment
     *
     * @return self
     */
    public function setCustomerPaymentTerms($customer_payment_terms)
    {
        if (is_null($customer_payment_terms)) {
            array_push($this->openAPINullablesSetToNull, 'customer_payment_terms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_payment_terms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_payment_terms) && (mb_strlen($customer_payment_terms) > 4)) {
            throw new \InvalidArgumentException('invalid length for $customer_payment_terms when calling APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['customer_payment_terms'] = $customer_payment_terms;

        return $this;
    }

    /**
     * Gets proposed_billing_document_type
     *
     * @return string|null
     */
    public function getProposedBillingDocumentType()
    {
        return $this->container['proposed_billing_document_type'];
    }

    /**
     * Sets proposed_billing_document_type
     *
     * @param string|null $proposed_billing_document_type Proposed Billing Type for an Order-Related Billing Document
     *
     * @return self
     */
    public function setProposedBillingDocumentType($proposed_billing_document_type)
    {
        if (is_null($proposed_billing_document_type)) {
            array_push($this->openAPINullablesSetToNull, 'proposed_billing_document_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('proposed_billing_document_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($proposed_billing_document_type) && (mb_strlen($proposed_billing_document_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $proposed_billing_document_type when calling APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['proposed_billing_document_type'] = $proposed_billing_document_type;

        return $this;
    }

    /**
     * Gets billing_plan_date_description_code
     *
     * @return string|null
     */
    public function getBillingPlanDateDescriptionCode()
    {
        return $this->container['billing_plan_date_description_code'];
    }

    /**
     * Sets billing_plan_date_description_code
     *
     * @param string|null $billing_plan_date_description_code billing_plan_date_description_code
     *
     * @return self
     */
    public function setBillingPlanDateDescriptionCode($billing_plan_date_description_code)
    {
        if (is_null($billing_plan_date_description_code)) {
            array_push($this->openAPINullablesSetToNull, 'billing_plan_date_description_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_plan_date_description_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_plan_date_description_code) && (mb_strlen($billing_plan_date_description_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $billing_plan_date_description_code when calling APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['billing_plan_date_description_code'] = $billing_plan_date_description_code;

        return $this;
    }

    /**
     * Gets billing_block_reason
     *
     * @return string|null
     */
    public function getBillingBlockReason()
    {
        return $this->container['billing_block_reason'];
    }

    /**
     * Sets billing_block_reason
     *
     * @param string|null $billing_block_reason Billing Block for Billing/Invoicing Plan Date
     *
     * @return self
     */
    public function setBillingBlockReason($billing_block_reason)
    {
        if (is_null($billing_block_reason)) {
            array_push($this->openAPINullablesSetToNull, 'billing_block_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_block_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_block_reason) && (mb_strlen($billing_block_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $billing_block_reason when calling APISALESORDERSRVASlsOrderItemBillingPlanItemTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['billing_block_reason'] = $billing_block_reason;

        return $this;
    }

    /**
     * Gets to_billing_plan
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemBillingPlanTypeCreate|null
     */
    public function getToBillingPlan()
    {
        return $this->container['to_billing_plan'];
    }

    /**
     * Sets to_billing_plan
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemBillingPlanTypeCreate|null $to_billing_plan to_billing_plan
     *
     * @return self
     */
    public function setToBillingPlan($to_billing_plan)
    {
        if (is_null($to_billing_plan)) {
            throw new \InvalidArgumentException('non-nullable to_billing_plan cannot be null');
        }
        $this->container['to_billing_plan'] = $to_billing_plan;

        return $this;
    }

    /**
     * Gets to_sales_order
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeCreate|null
     */
    public function getToSalesOrder()
    {
        return $this->container['to_sales_order'];
    }

    /**
     * Sets to_sales_order
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderTypeCreate|null $to_sales_order to_sales_order
     *
     * @return self
     */
    public function setToSalesOrder($to_sales_order)
    {
        if (is_null($to_sales_order)) {
            throw new \InvalidArgumentException('non-nullable to_sales_order cannot be null');
        }
        $this->container['to_sales_order'] = $to_sales_order;

        return $this;
    }

    /**
     * Gets to_sales_order_item
     *
     * @return \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeCreate|null
     */
    public function getToSalesOrderItem()
    {
        return $this->container['to_sales_order_item'];
    }

    /**
     * Sets to_sales_order_item
     *
     * @param \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeCreate|null $to_sales_order_item to_sales_order_item
     *
     * @return self
     */
    public function setToSalesOrderItem($to_sales_order_item)
    {
        if (is_null($to_sales_order_item)) {
            throw new \InvalidArgumentException('non-nullable to_sales_order_item cannot be null');
        }
        $this->container['to_sales_order_item'] = $to_sales_order_item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


