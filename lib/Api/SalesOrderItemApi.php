<?php
/**
 * SalesOrderItemApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\SalesOrder\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\SalesOrder\ApiException;
use BeLenka\SAP\SalesOrder\Configuration;
use BeLenka\SAP\SalesOrder\HeaderSelector;
use BeLenka\SAP\SalesOrder\ObjectSerializer;

/**
 * SalesOrderItemApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SalesOrderItemApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet' => [
            'application/json',
        ],
        'aSalesOrderItemGet' => [
            'application/json',
        ],
        'aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet' => [
            'application/json',
        ],
        'aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet' => [
            'application/json',
        ],
        'aSalesOrderItemPost' => [
            'application/json',
        ],
        'aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet' => [
            'application/json',
        ],
        'aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost' => [
            'application/json',
        ],
        'aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet' => [
            'application/json',
        ],
        'aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet' => [
            'application/json',
        ],
        'aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet' => [
            'application/json',
        ],
        'aSalesOrderSalesOrderToItemGet' => [
            'application/json',
        ],
        'aSalesOrderSalesOrderToItemPost' => [
            'application/json',
        ],
        'aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet
     *
     * Reads the sales order item for an item billing plan.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $billing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet($sales_order, $sales_order_item, $billing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet'][0])
    {
        list($response) = $this->aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $billing_plan, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGetWithHttpInfo
     *
     * Reads the sales order item for an item billing plan.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $billing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $billing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet'][0])
    {
        $request = $this->aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGetRequest($sales_order, $sales_order_item, $billing_plan, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGetAsync
     *
     * Reads the sales order item for an item billing plan.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $billing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGetAsync($sales_order, $sales_order_item, $billing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet'][0])
    {
        return $this->aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $billing_plan, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGetAsyncWithHttpInfo
     *
     * Reads the sales order item for an item billing plan.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $billing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $billing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
        $request = $this->aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGetRequest($sales_order, $sales_order_item, $billing_plan, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $billing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGetRequest($sales_order, $sales_order_item, $billing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'billing_plan' is set
        if ($billing_plan === null || (is_array($billing_plan) && count($billing_plan) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_plan when calling aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet'
            );
        }
        if (strlen($billing_plan) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_plan" when calling SalesOrderItemApi.aSalesOrderItemBillingPlanSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanToSalesOrderItemGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/A_SalesOrderItemBillingPlan(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}')/to_SalesOrderItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }
        // path params
        if ($billing_plan !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingPlan' . '}',
                ObjectSerializer::toPathValue($billing_plan),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemGet
     *
     * Reads all sales order items.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\Wrapper1|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemGet($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemGet'][0])
    {
        list($response) = $this->aSalesOrderItemGetWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemGetWithHttpInfo
     *
     * Reads all sales order items.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\Wrapper1|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemGetWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemGet'][0])
    {
        $request = $this->aSalesOrderItemGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\Wrapper1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\Wrapper1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\Wrapper1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\Wrapper1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemGetAsync
     *
     * Reads all sales order items.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemGetAsync($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemGet'][0])
    {
        return $this->aSalesOrderItemGetAsyncWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemGetAsyncWithHttpInfo
     *
     * Reads all sales order items.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper1';
        $request = $this->aSalesOrderItemGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemGetRequest($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SalesOrderItemApi.aSalesOrderItemGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SalesOrderItemApi.aSalesOrderItemGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_SalesOrderItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet
     *
     * Reads the sales order item for an item partner address.
     *
     * @param  string $sales_order Sales and Distribution Document Number (required)
     * @param  string $sales_order_item Item number of the SD document (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string $address_representation_code Version ID for International Addresses (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet($sales_order, $sales_order_item, $partner_function, $address_representation_code, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet'][0])
    {
        list($response) = $this->aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $partner_function, $address_representation_code, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGetWithHttpInfo
     *
     * Reads the sales order item for an item partner address.
     *
     * @param  string $sales_order Sales and Distribution Document Number (required)
     * @param  string $sales_order_item Item number of the SD document (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string $address_representation_code Version ID for International Addresses (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $partner_function, $address_representation_code, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet'][0])
    {
        $request = $this->aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGetRequest($sales_order, $sales_order_item, $partner_function, $address_representation_code, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGetAsync
     *
     * Reads the sales order item for an item partner address.
     *
     * @param  string $sales_order Sales and Distribution Document Number (required)
     * @param  string $sales_order_item Item number of the SD document (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string $address_representation_code Version ID for International Addresses (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGetAsync($sales_order, $sales_order_item, $partner_function, $address_representation_code, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet'][0])
    {
        return $this->aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $partner_function, $address_representation_code, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGetAsyncWithHttpInfo
     *
     * Reads the sales order item for an item partner address.
     *
     * @param  string $sales_order Sales and Distribution Document Number (required)
     * @param  string $sales_order_item Item number of the SD document (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string $address_representation_code Version ID for International Addresses (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $partner_function, $address_representation_code, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
        $request = $this->aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGetRequest($sales_order, $sales_order_item, $partner_function, $address_representation_code, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet'
     *
     * @param  string $sales_order Sales and Distribution Document Number (required)
     * @param  string $sales_order_item Item number of the SD document (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string $address_representation_code Version ID for International Addresses (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGetRequest($sales_order, $sales_order_item, $partner_function, $address_representation_code, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'partner_function' is set
        if ($partner_function === null || (is_array($partner_function) && count($partner_function) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partner_function when calling aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet'
            );
        }
        if (strlen($partner_function) > 2) {
            throw new \InvalidArgumentException('invalid length for "$partner_function" when calling SalesOrderItemApi.aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'address_representation_code' is set
        if ($address_representation_code === null || (is_array($address_representation_code) && count($address_representation_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_representation_code when calling aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet'
            );
        }
        if (strlen($address_representation_code) > 1) {
            throw new \InvalidArgumentException('invalid length for "$address_representation_code" when calling SalesOrderItemApi.aSalesOrderItemPartnerAddressSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionAddressRepresentationCodeAddressRepresentationCodeToSalesOrderItemGet, must be smaller than or equal to 1.');
        }
        
        
        

        $resourcePath = '/A_SalesOrderItemPartnerAddress(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',PartnerFunction='{PartnerFunction}',AddressRepresentationCode='{AddressRepresentationCode}')/to_SalesOrderItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }
        // path params
        if ($partner_function !== null) {
            $resourcePath = str_replace(
                '{' . 'PartnerFunction' . '}',
                ObjectSerializer::toPathValue($partner_function),
                $resourcePath
            );
        }
        // path params
        if ($address_representation_code !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressRepresentationCode' . '}',
                ObjectSerializer::toPathValue($address_representation_code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet
     *
     * Reads the sales order item for a partner function of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet($sales_order, $sales_order_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet'][0])
    {
        list($response) = $this->aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $partner_function, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGetWithHttpInfo
     *
     * Reads the sales order item for a partner function of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet'][0])
    {
        $request = $this->aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGetRequest($sales_order, $sales_order_item, $partner_function, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGetAsync
     *
     * Reads the sales order item for a partner function of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGetAsync($sales_order, $sales_order_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet'][0])
    {
        return $this->aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $partner_function, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGetAsyncWithHttpInfo
     *
     * Reads the sales order item for a partner function of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
        $request = $this->aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGetRequest($sales_order, $sales_order_item, $partner_function, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGetRequest($sales_order, $sales_order_item, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'partner_function' is set
        if ($partner_function === null || (is_array($partner_function) && count($partner_function) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partner_function when calling aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet'
            );
        }
        if (strlen($partner_function) > 2) {
            throw new \InvalidArgumentException('invalid length for "$partner_function" when calling SalesOrderItemApi.aSalesOrderItemPartnerSalesOrderSalesOrderSalesOrderItemSalesOrderItemPartnerFunctionPartnerFunctionToSalesOrderItemGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/A_SalesOrderItemPartner(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',PartnerFunction='{PartnerFunction}')/to_SalesOrderItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }
        // path params
        if ($partner_function !== null) {
            $resourcePath = str_replace(
                '{' . 'PartnerFunction' . '}',
                ObjectSerializer::toPathValue($partner_function),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemPost
     *
     * Creates a sales order item.
     *
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeCreate $apisalesordersrva_sales_order_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemPost($apisalesordersrva_sales_order_item_type_create, string $contentType = self::contentTypes['aSalesOrderItemPost'][0])
    {
        list($response) = $this->aSalesOrderItemPostWithHttpInfo($apisalesordersrva_sales_order_item_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemPostWithHttpInfo
     *
     * Creates a sales order item.
     *
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeCreate $apisalesordersrva_sales_order_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemPostWithHttpInfo($apisalesordersrva_sales_order_item_type_create, string $contentType = self::contentTypes['aSalesOrderItemPost'][0])
    {
        $request = $this->aSalesOrderItemPostRequest($apisalesordersrva_sales_order_item_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemPostAsync
     *
     * Creates a sales order item.
     *
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeCreate $apisalesordersrva_sales_order_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemPostAsync($apisalesordersrva_sales_order_item_type_create, string $contentType = self::contentTypes['aSalesOrderItemPost'][0])
    {
        return $this->aSalesOrderItemPostAsyncWithHttpInfo($apisalesordersrva_sales_order_item_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemPostAsyncWithHttpInfo
     *
     * Creates a sales order item.
     *
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeCreate $apisalesordersrva_sales_order_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemPostAsyncWithHttpInfo($apisalesordersrva_sales_order_item_type_create, string $contentType = self::contentTypes['aSalesOrderItemPost'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
        $request = $this->aSalesOrderItemPostRequest($apisalesordersrva_sales_order_item_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemPost'
     *
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeCreate $apisalesordersrva_sales_order_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemPostRequest($apisalesordersrva_sales_order_item_type_create, string $contentType = self::contentTypes['aSalesOrderItemPost'][0])
    {

        // verify the required parameter 'apisalesordersrva_sales_order_item_type_create' is set
        if ($apisalesordersrva_sales_order_item_type_create === null || (is_array($apisalesordersrva_sales_order_item_type_create) && count($apisalesordersrva_sales_order_item_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apisalesordersrva_sales_order_item_type_create when calling aSalesOrderItemPost'
            );
        }


        $resourcePath = '/A_SalesOrderItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apisalesordersrva_sales_order_item_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apisalesordersrva_sales_order_item_type_create));
            } else {
                $httpBody = $apisalesordersrva_sales_order_item_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet
     *
     * Reads the sales order item for a pricing element.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet($sales_order, $sales_order_item, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet'][0])
    {
        list($response) = $this->aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGetWithHttpInfo
     *
     * Reads the sales order item for a pricing element.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet'][0])
    {
        $request = $this->aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGetRequest($sales_order, $sales_order_item, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGetAsync
     *
     * Reads the sales order item for a pricing element.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGetAsync($sales_order, $sales_order_item, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet'][0])
    {
        return $this->aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGetAsyncWithHttpInfo
     *
     * Reads the sales order item for a pricing element.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
        $request = $this->aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGetRequest($sales_order, $sales_order_item, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGetRequest($sales_order, $sales_order_item, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'pricing_procedure_step' is set
        if ($pricing_procedure_step === null || (is_array($pricing_procedure_step) && count($pricing_procedure_step) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_procedure_step when calling aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet'
            );
        }
        if (strlen($pricing_procedure_step) > 3) {
            throw new \InvalidArgumentException('invalid length for "$pricing_procedure_step" when calling SalesOrderItemApi.aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet, must be smaller than or equal to 3.');
        }
        
        // verify the required parameter 'pricing_procedure_counter' is set
        if ($pricing_procedure_counter === null || (is_array($pricing_procedure_counter) && count($pricing_procedure_counter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_procedure_counter when calling aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet'
            );
        }
        if (strlen($pricing_procedure_counter) > 3) {
            throw new \InvalidArgumentException('invalid length for "$pricing_procedure_counter" when calling SalesOrderItemApi.aSalesOrderItemPrElementSalesOrderSalesOrderSalesOrderItemSalesOrderItemPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderItemGet, must be smaller than or equal to 3.');
        }
        
        
        

        $resourcePath = '/A_SalesOrderItemPrElement(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',PricingProcedureStep='{PricingProcedureStep}',PricingProcedureCounter='{PricingProcedureCounter}')/to_SalesOrderItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }
        // path params
        if ($pricing_procedure_step !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingProcedureStep' . '}',
                ObjectSerializer::toPathValue($pricing_procedure_step),
                $resourcePath
            );
        }
        // path params
        if ($pricing_procedure_counter !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingProcedureCounter' . '}',
                ObjectSerializer::toPathValue($pricing_procedure_counter),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet
     *
     * Reads the sales order item for a related object.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $sd_doc_related_object_sequence_nmbr Sequence Number of the Related Object of an SD Document (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet($sales_order, $sales_order_item, $sd_doc_related_object_sequence_nmbr, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet'][0])
    {
        list($response) = $this->aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $sd_doc_related_object_sequence_nmbr, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGetWithHttpInfo
     *
     * Reads the sales order item for a related object.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $sd_doc_related_object_sequence_nmbr Sequence Number of the Related Object of an SD Document (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $sd_doc_related_object_sequence_nmbr, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet'][0])
    {
        $request = $this->aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGetRequest($sales_order, $sales_order_item, $sd_doc_related_object_sequence_nmbr, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGetAsync
     *
     * Reads the sales order item for a related object.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $sd_doc_related_object_sequence_nmbr Sequence Number of the Related Object of an SD Document (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGetAsync($sales_order, $sales_order_item, $sd_doc_related_object_sequence_nmbr, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet'][0])
    {
        return $this->aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $sd_doc_related_object_sequence_nmbr, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGetAsyncWithHttpInfo
     *
     * Reads the sales order item for a related object.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $sd_doc_related_object_sequence_nmbr Sequence Number of the Related Object of an SD Document (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $sd_doc_related_object_sequence_nmbr, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
        $request = $this->aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGetRequest($sales_order, $sales_order_item, $sd_doc_related_object_sequence_nmbr, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $sd_doc_related_object_sequence_nmbr Sequence Number of the Related Object of an SD Document (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGetRequest($sales_order, $sales_order_item, $sd_doc_related_object_sequence_nmbr, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'sd_doc_related_object_sequence_nmbr' is set
        if ($sd_doc_related_object_sequence_nmbr === null || (is_array($sd_doc_related_object_sequence_nmbr) && count($sd_doc_related_object_sequence_nmbr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sd_doc_related_object_sequence_nmbr when calling aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet'
            );
        }
        if (strlen($sd_doc_related_object_sequence_nmbr) > 4) {
            throw new \InvalidArgumentException('invalid length for "$sd_doc_related_object_sequence_nmbr" when calling SalesOrderItemApi.aSalesOrderItemRelatedObjectSalesOrderSalesOrderSalesOrderItemSalesOrderItemSDDocRelatedObjectSequenceNmbrSDDocRelatedObjectSequenceNmbrToSalesOrderItemGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/A_SalesOrderItemRelatedObject(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',SDDocRelatedObjectSequenceNmbr='{SDDocRelatedObjectSequenceNmbr}')/to_SalesOrderItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }
        // path params
        if ($sd_doc_related_object_sequence_nmbr !== null) {
            $resourcePath = str_replace(
                '{' . 'SDDocRelatedObjectSequenceNmbr' . '}',
                ObjectSerializer::toPathValue($sd_doc_related_object_sequence_nmbr),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete
     *
     * Deletes a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete($sales_order, $sales_order_item, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete'][0])
    {
        $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDeleteWithHttpInfo($sales_order, $sales_order_item, $contentType);
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDeleteWithHttpInfo
     *
     * Deletes a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDeleteWithHttpInfo($sales_order, $sales_order_item, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDeleteRequest($sales_order, $sales_order_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDeleteAsync
     *
     * Deletes a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDeleteAsync($sales_order, $sales_order_item, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDeleteAsyncWithHttpInfo($sales_order, $sales_order_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDeleteAsyncWithHttpInfo
     *
     * Deletes a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDeleteAsyncWithHttpInfo($sales_order, $sales_order_item, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete'][0])
    {
        $returnType = '';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDeleteRequest($sales_order, $sales_order_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDeleteRequest($sales_order, $sales_order_item, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemDelete, must be smaller than or equal to 6.');
        }
        

        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet
     *
     * Reads a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet($sales_order, $sales_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGetWithHttpInfo
     *
     * Reads a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGetRequest($sales_order, $sales_order_item, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGetAsync
     *
     * Reads a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGetAsync($sales_order, $sales_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGetAsyncWithHttpInfo
     *
     * Reads a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGetRequest($sales_order, $sales_order_item, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGetRequest($sales_order, $sales_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemGet, must be smaller than or equal to 6.');
        }
        
        
        

        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch
     *
     * Updates a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\ModifiedASalesOrderItemType $modified_a_sales_order_item_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch($sales_order, $sales_order_item, $modified_a_sales_order_item_type, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch'][0])
    {
        $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatchWithHttpInfo($sales_order, $sales_order_item, $modified_a_sales_order_item_type, $contentType);
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatchWithHttpInfo
     *
     * Updates a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\ModifiedASalesOrderItemType $modified_a_sales_order_item_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatchWithHttpInfo($sales_order, $sales_order_item, $modified_a_sales_order_item_type, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatchRequest($sales_order, $sales_order_item, $modified_a_sales_order_item_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatchAsync
     *
     * Updates a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\ModifiedASalesOrderItemType $modified_a_sales_order_item_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatchAsync($sales_order, $sales_order_item, $modified_a_sales_order_item_type, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatchAsyncWithHttpInfo($sales_order, $sales_order_item, $modified_a_sales_order_item_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatchAsyncWithHttpInfo
     *
     * Updates a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\ModifiedASalesOrderItemType $modified_a_sales_order_item_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatchAsyncWithHttpInfo($sales_order, $sales_order_item, $modified_a_sales_order_item_type, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch'][0])
    {
        $returnType = '';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatchRequest($sales_order, $sales_order_item, $modified_a_sales_order_item_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\ModifiedASalesOrderItemType $modified_a_sales_order_item_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatchRequest($sales_order, $sales_order_item, $modified_a_sales_order_item_type, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'modified_a_sales_order_item_type' is set
        if ($modified_a_sales_order_item_type === null || (is_array($modified_a_sales_order_item_type) && count($modified_a_sales_order_item_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_a_sales_order_item_type when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemPatch'
            );
        }


        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modified_a_sales_order_item_type)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modified_a_sales_order_item_type));
            } else {
                $httpBody = $modified_a_sales_order_item_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet
     *
     * Reads the billing plan of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemBillingPlanType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet($sales_order, $sales_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGetWithHttpInfo($sales_order, $sales_order_item, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGetWithHttpInfo
     *
     * Reads the billing plan of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemBillingPlanType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGetWithHttpInfo($sales_order, $sales_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGetRequest($sales_order, $sales_order_item, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemBillingPlanType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemBillingPlanType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemBillingPlanType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemBillingPlanType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemBillingPlanType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGetAsync
     *
     * Reads the billing plan of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGetAsync($sales_order, $sales_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGetAsyncWithHttpInfo($sales_order, $sales_order_item, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGetAsyncWithHttpInfo
     *
     * Reads the billing plan of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGetAsyncWithHttpInfo($sales_order, $sales_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemBillingPlanType';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGetRequest($sales_order, $sales_order_item, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGetRequest($sales_order, $sales_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToBillingPlanGet, must be smaller than or equal to 6.');
        }
        
        
        

        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')/to_BillingPlan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet
     *
     * Reads the item partners of a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\Wrapper12|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGetWithHttpInfo($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGetWithHttpInfo
     *
     * Reads the item partners of a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\Wrapper12|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGetWithHttpInfo($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGetRequest($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\Wrapper12' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\Wrapper12' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\Wrapper12', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper12';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\Wrapper12',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGetAsync
     *
     * Reads the item partners of a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGetAsync($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGetAsyncWithHttpInfo($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGetAsyncWithHttpInfo
     *
     * Reads the item partners of a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGetAsyncWithHttpInfo($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper12';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGetRequest($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGetRequest($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet, must be smaller than or equal to 6.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')/to_Partner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost
     *
     * Creates an item partner for a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemPartnerTypeCreate $apisalesordersrva_sales_order_item_partner_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemPartnerType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_partner_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPostWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_partner_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPostWithHttpInfo
     *
     * Creates an item partner for a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemPartnerTypeCreate $apisalesordersrva_sales_order_item_partner_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemPartnerType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPostWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_partner_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_partner_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemPartnerType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemPartnerType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemPartnerType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemPartnerType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemPartnerType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPostAsync
     *
     * Creates an item partner for a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemPartnerTypeCreate $apisalesordersrva_sales_order_item_partner_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPostAsync($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_partner_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPostAsyncWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_partner_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPostAsyncWithHttpInfo
     *
     * Creates an item partner for a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemPartnerTypeCreate $apisalesordersrva_sales_order_item_partner_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPostAsyncWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_partner_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemPartnerType';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_partner_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemPartnerTypeCreate $apisalesordersrva_sales_order_item_partner_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_partner_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'apisalesordersrva_sales_order_item_partner_type_create' is set
        if ($apisalesordersrva_sales_order_item_partner_type_create === null || (is_array($apisalesordersrva_sales_order_item_partner_type_create) && count($apisalesordersrva_sales_order_item_partner_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apisalesordersrva_sales_order_item_partner_type_create when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPartnerPost'
            );
        }


        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')/to_Partner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apisalesordersrva_sales_order_item_partner_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apisalesordersrva_sales_order_item_partner_type_create));
            } else {
                $httpBody = $apisalesordersrva_sales_order_item_partner_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet
     *
     * Get entities from related to_PrecedingProcFlowDocItem
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\Wrapper13|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGetWithHttpInfo($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGetWithHttpInfo
     *
     * Get entities from related to_PrecedingProcFlowDocItem
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\Wrapper13|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGetWithHttpInfo($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGetRequest($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\Wrapper13' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\Wrapper13' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\Wrapper13', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper13';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\Wrapper13',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGetAsync
     *
     * Get entities from related to_PrecedingProcFlowDocItem
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGetAsync($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGetAsyncWithHttpInfo
     *
     * Get entities from related to_PrecedingProcFlowDocItem
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper13';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGetRequest($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGetRequest($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet, must be smaller than or equal to 6.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPrecedingProcFlowDocItemGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')/to_PrecedingProcFlowDocItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet
     *
     * Reads the pricing element of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\Wrapper14|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGetWithHttpInfo($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGetWithHttpInfo
     *
     * Reads the pricing element of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\Wrapper14|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGetWithHttpInfo($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGetRequest($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\Wrapper14' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\Wrapper14' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\Wrapper14', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper14';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\Wrapper14',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGetAsync
     *
     * Reads the pricing element of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGetAsync($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGetAsyncWithHttpInfo($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGetAsyncWithHttpInfo
     *
     * Reads the pricing element of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGetAsyncWithHttpInfo($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper14';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGetRequest($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGetRequest($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet, must be smaller than or equal to 6.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')/to_PricingElement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost
     *
     * Creates a pricing element for a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemPrElementTypeCreate $apisalesordersrva_sales_order_item_pr_element_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemPrElementType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_pr_element_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPostWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_pr_element_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPostWithHttpInfo
     *
     * Creates a pricing element for a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemPrElementTypeCreate $apisalesordersrva_sales_order_item_pr_element_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemPrElementType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPostWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_pr_element_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_pr_element_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemPrElementType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemPrElementType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemPrElementType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemPrElementType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemPrElementType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPostAsync
     *
     * Creates a pricing element for a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemPrElementTypeCreate $apisalesordersrva_sales_order_item_pr_element_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPostAsync($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_pr_element_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPostAsyncWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_pr_element_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPostAsyncWithHttpInfo
     *
     * Creates a pricing element for a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemPrElementTypeCreate $apisalesordersrva_sales_order_item_pr_element_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPostAsyncWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_pr_element_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemPrElementType';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_pr_element_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemPrElementTypeCreate $apisalesordersrva_sales_order_item_pr_element_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_pr_element_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'apisalesordersrva_sales_order_item_pr_element_type_create' is set
        if ($apisalesordersrva_sales_order_item_pr_element_type_create === null || (is_array($apisalesordersrva_sales_order_item_pr_element_type_create) && count($apisalesordersrva_sales_order_item_pr_element_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apisalesordersrva_sales_order_item_pr_element_type_create when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToPricingElementPost'
            );
        }


        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')/to_PricingElement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apisalesordersrva_sales_order_item_pr_element_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apisalesordersrva_sales_order_item_pr_element_type_create));
            } else {
                $httpBody = $apisalesordersrva_sales_order_item_pr_element_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet
     *
     * Reads the related object of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\Wrapper15|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGetWithHttpInfo($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGetWithHttpInfo
     *
     * Reads the related object of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\Wrapper15|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGetWithHttpInfo($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGetRequest($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\Wrapper15' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\Wrapper15' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\Wrapper15', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper15';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\Wrapper15',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGetAsync
     *
     * Reads the related object of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGetAsync($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGetAsyncWithHttpInfo($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGetAsyncWithHttpInfo
     *
     * Reads the related object of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGetAsyncWithHttpInfo($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper15';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGetRequest($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGetRequest($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet, must be smaller than or equal to 6.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')/to_RelatedObject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost
     *
     * Creates a related object for a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemRelatedObjectTypeCreate $apisalesordersrva_sales_order_item_related_object_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemRelatedObjectType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_related_object_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPostWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_related_object_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPostWithHttpInfo
     *
     * Creates a related object for a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemRelatedObjectTypeCreate $apisalesordersrva_sales_order_item_related_object_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemRelatedObjectType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPostWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_related_object_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_related_object_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemRelatedObjectType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemRelatedObjectType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemRelatedObjectType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemRelatedObjectType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemRelatedObjectType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPostAsync
     *
     * Creates a related object for a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemRelatedObjectTypeCreate $apisalesordersrva_sales_order_item_related_object_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPostAsync($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_related_object_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPostAsyncWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_related_object_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPostAsyncWithHttpInfo
     *
     * Creates a related object for a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemRelatedObjectTypeCreate $apisalesordersrva_sales_order_item_related_object_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPostAsyncWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_related_object_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemRelatedObjectType';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_related_object_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemRelatedObjectTypeCreate $apisalesordersrva_sales_order_item_related_object_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_related_object_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'apisalesordersrva_sales_order_item_related_object_type_create' is set
        if ($apisalesordersrva_sales_order_item_related_object_type_create === null || (is_array($apisalesordersrva_sales_order_item_related_object_type_create) && count($apisalesordersrva_sales_order_item_related_object_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apisalesordersrva_sales_order_item_related_object_type_create when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToRelatedObjectPost'
            );
        }


        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')/to_RelatedObject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apisalesordersrva_sales_order_item_related_object_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apisalesordersrva_sales_order_item_related_object_type_create));
            } else {
                $httpBody = $apisalesordersrva_sales_order_item_related_object_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet
     *
     * Reads the sales order header of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet($sales_order, $sales_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGetWithHttpInfo($sales_order, $sales_order_item, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGetWithHttpInfo
     *
     * Reads the sales order header of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGetWithHttpInfo($sales_order, $sales_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGetRequest($sales_order, $sales_order_item, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGetAsync
     *
     * Reads the sales order header of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGetAsync($sales_order, $sales_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGetAsyncWithHttpInfo($sales_order, $sales_order_item, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGetAsyncWithHttpInfo
     *
     * Reads the sales order header of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGetAsyncWithHttpInfo($sales_order, $sales_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderType';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGetRequest($sales_order, $sales_order_item, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGetRequest($sales_order, $sales_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSalesOrderGet, must be smaller than or equal to 6.');
        }
        
        
        

        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')/to_SalesOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet
     *
     * Reads the schedule lines of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\Wrapper16|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetWithHttpInfo($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetWithHttpInfo
     *
     * Reads the schedule lines of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\Wrapper16|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetWithHttpInfo($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetRequest($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\Wrapper16' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\Wrapper16' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\Wrapper16', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper16';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\Wrapper16',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetAsync
     *
     * Reads the schedule lines of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetAsync($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetAsyncWithHttpInfo($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetAsyncWithHttpInfo
     *
     * Reads the schedule lines of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetAsyncWithHttpInfo($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper16';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetRequest($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetRequest($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet, must be smaller than or equal to 6.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')/to_ScheduleLine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost
     *
     * Creates schedule lines for a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderScheduleLineTypeCreate $apisalesordersrva_sales_order_schedule_line_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostWithHttpInfo
     *
     * Creates schedule lines for a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderScheduleLineTypeCreate $apisalesordersrva_sales_order_schedule_line_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostAsync
     *
     * Creates schedule lines for a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderScheduleLineTypeCreate $apisalesordersrva_sales_order_schedule_line_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostAsync($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostAsyncWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostAsyncWithHttpInfo
     *
     * Creates schedule lines for a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderScheduleLineTypeCreate $apisalesordersrva_sales_order_schedule_line_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostAsyncWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderScheduleLineTypeCreate $apisalesordersrva_sales_order_schedule_line_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'apisalesordersrva_sales_order_schedule_line_type_create' is set
        if ($apisalesordersrva_sales_order_schedule_line_type_create === null || (is_array($apisalesordersrva_sales_order_schedule_line_type_create) && count($apisalesordersrva_sales_order_schedule_line_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apisalesordersrva_sales_order_schedule_line_type_create when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'
            );
        }


        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')/to_ScheduleLine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apisalesordersrva_sales_order_schedule_line_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apisalesordersrva_sales_order_schedule_line_type_create));
            } else {
                $httpBody = $apisalesordersrva_sales_order_schedule_line_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet
     *
     * Get entities from related to_SubsequentProcFlowDocItem
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\Wrapper17|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGetWithHttpInfo($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGetWithHttpInfo
     *
     * Get entities from related to_SubsequentProcFlowDocItem
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\Wrapper17|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGetWithHttpInfo($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGetRequest($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\Wrapper17' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\Wrapper17' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\Wrapper17', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper17';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\Wrapper17',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGetAsync
     *
     * Get entities from related to_SubsequentProcFlowDocItem
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGetAsync($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGetAsyncWithHttpInfo
     *
     * Get entities from related to_SubsequentProcFlowDocItem
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper17';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGetRequest($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGetRequest($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet, must be smaller than or equal to 6.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToSubsequentProcFlowDocItemGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')/to_SubsequentProcFlowDocItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet
     *
     * Reads the text of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\Wrapper18|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGetWithHttpInfo($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGetWithHttpInfo
     *
     * Reads the text of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\Wrapper18|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGetWithHttpInfo($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGetRequest($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\Wrapper18' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\Wrapper18' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\Wrapper18', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper18';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\Wrapper18',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGetAsync
     *
     * Reads the text of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGetAsync($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGetAsyncWithHttpInfo($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGetAsyncWithHttpInfo
     *
     * Reads the text of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGetAsyncWithHttpInfo($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper18';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGetRequest($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGetRequest($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet, must be smaller than or equal to 6.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')/to_Text';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost
     *
     * Creates a text for a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTextTypeCreate $apisalesordersrva_sales_order_item_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemTextType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_text_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPostWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_text_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPostWithHttpInfo
     *
     * Creates a text for a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTextTypeCreate $apisalesordersrva_sales_order_item_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemTextType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPostWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_text_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_text_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemTextType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemTextType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemTextType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemTextType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemTextType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPostAsync
     *
     * Creates a text for a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTextTypeCreate $apisalesordersrva_sales_order_item_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPostAsync($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_text_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPostAsyncWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_text_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPostAsyncWithHttpInfo
     *
     * Creates a text for a specific sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTextTypeCreate $apisalesordersrva_sales_order_item_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPostAsyncWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_text_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemTextType';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_text_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTextTypeCreate $apisalesordersrva_sales_order_item_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_item_text_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'apisalesordersrva_sales_order_item_text_type_create' is set
        if ($apisalesordersrva_sales_order_item_text_type_create === null || (is_array($apisalesordersrva_sales_order_item_text_type_create) && count($apisalesordersrva_sales_order_item_text_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apisalesordersrva_sales_order_item_text_type_create when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToTextPost'
            );
        }


        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')/to_Text';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apisalesordersrva_sales_order_item_text_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apisalesordersrva_sales_order_item_text_type_create));
            } else {
                $httpBody = $apisalesordersrva_sales_order_item_text_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet
     *
     * Reads the sales order item for an item text.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $language Language Key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet($sales_order, $sales_order_item, $language, $long_text_id, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet'][0])
    {
        list($response) = $this->aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $language, $long_text_id, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGetWithHttpInfo
     *
     * Reads the sales order item for an item text.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $language Language Key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $language, $long_text_id, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet'][0])
    {
        $request = $this->aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGetRequest($sales_order, $sales_order_item, $language, $long_text_id, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGetAsync
     *
     * Reads the sales order item for an item text.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $language Language Key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGetAsync($sales_order, $sales_order_item, $language, $long_text_id, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet'][0])
    {
        return $this->aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $language, $long_text_id, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGetAsyncWithHttpInfo
     *
     * Reads the sales order item for an item text.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $language Language Key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $language, $long_text_id, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
        $request = $this->aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGetRequest($sales_order, $sales_order_item, $language, $long_text_id, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $language Language Key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGetRequest($sales_order, $sales_order_item, $language, $long_text_id, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling SalesOrderItemApi.aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'long_text_id' is set
        if ($long_text_id === null || (is_array($long_text_id) && count($long_text_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $long_text_id when calling aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet'
            );
        }
        if (strlen($long_text_id) > 4) {
            throw new \InvalidArgumentException('invalid length for "$long_text_id" when calling SalesOrderItemApi.aSalesOrderItemTextSalesOrderSalesOrderSalesOrderItemSalesOrderItemLanguageLanguageLongTextIDLongTextIDToSalesOrderItemGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/A_SalesOrderItemText(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',Language='{Language}',LongTextID='{LongTextID}')/to_SalesOrderItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'Language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($long_text_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LongTextID' . '}',
                ObjectSerializer::toPathValue($long_text_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet
     *
     * Reads the sales order item data for a preceding item of a sales order.
     *
     * @param  string $sales_order Subsequent Sales and Distribution Document (required)
     * @param  string $sales_order_item Subsequent Item of an SD Document (required)
     * @param  string $doc_relationship_uuid SD Unique Document Relationship Identification (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet($sales_order, $sales_order_item, $doc_relationship_uuid, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'][0])
    {
        list($response) = $this->aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $doc_relationship_uuid, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetWithHttpInfo
     *
     * Reads the sales order item data for a preceding item of a sales order.
     *
     * @param  string $sales_order Subsequent Sales and Distribution Document (required)
     * @param  string $sales_order_item Subsequent Item of an SD Document (required)
     * @param  string $doc_relationship_uuid SD Unique Document Relationship Identification (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $doc_relationship_uuid, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'][0])
    {
        $request = $this->aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetRequest($sales_order, $sales_order_item, $doc_relationship_uuid, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetAsync
     *
     * Reads the sales order item data for a preceding item of a sales order.
     *
     * @param  string $sales_order Subsequent Sales and Distribution Document (required)
     * @param  string $sales_order_item Subsequent Item of an SD Document (required)
     * @param  string $doc_relationship_uuid SD Unique Document Relationship Identification (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetAsync($sales_order, $sales_order_item, $doc_relationship_uuid, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'][0])
    {
        return $this->aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $doc_relationship_uuid, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetAsyncWithHttpInfo
     *
     * Reads the sales order item data for a preceding item of a sales order.
     *
     * @param  string $sales_order Subsequent Sales and Distribution Document (required)
     * @param  string $sales_order_item Subsequent Item of an SD Document (required)
     * @param  string $doc_relationship_uuid SD Unique Document Relationship Identification (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $doc_relationship_uuid, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
        $request = $this->aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetRequest($sales_order, $sales_order_item, $doc_relationship_uuid, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'
     *
     * @param  string $sales_order Subsequent Sales and Distribution Document (required)
     * @param  string $sales_order_item Subsequent Item of an SD Document (required)
     * @param  string $doc_relationship_uuid SD Unique Document Relationship Identification (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetRequest($sales_order, $sales_order_item, $doc_relationship_uuid, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'doc_relationship_uuid' is set
        if ($doc_relationship_uuid === null || (is_array($doc_relationship_uuid) && count($doc_relationship_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $doc_relationship_uuid when calling aSalesOrderItmPrecdgProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'
            );
        }

        
        

        $resourcePath = '/A_SalesOrderItmPrecdgProcFlow(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',DocRelationshipUUID=guid'{DocRelationshipUUID}')/to_SalesOrderItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }
        // path params
        if ($doc_relationship_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'DocRelationshipUUID' . '}',
                ObjectSerializer::toPathValue($doc_relationship_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet
     *
     * Reads the sales order item data for a subsequent item of a sales order.
     *
     * @param  string $sales_order Preceding sales and distribution document (required)
     * @param  string $sales_order_item Preceding Item of an SD Document (required)
     * @param  string $doc_relationship_uuid SD Unique Document Relationship Identification (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet($sales_order, $sales_order_item, $doc_relationship_uuid, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'][0])
    {
        list($response) = $this->aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $doc_relationship_uuid, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetWithHttpInfo
     *
     * Reads the sales order item data for a subsequent item of a sales order.
     *
     * @param  string $sales_order Preceding sales and distribution document (required)
     * @param  string $sales_order_item Preceding Item of an SD Document (required)
     * @param  string $doc_relationship_uuid SD Unique Document Relationship Identification (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $doc_relationship_uuid, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'][0])
    {
        $request = $this->aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetRequest($sales_order, $sales_order_item, $doc_relationship_uuid, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetAsync
     *
     * Reads the sales order item data for a subsequent item of a sales order.
     *
     * @param  string $sales_order Preceding sales and distribution document (required)
     * @param  string $sales_order_item Preceding Item of an SD Document (required)
     * @param  string $doc_relationship_uuid SD Unique Document Relationship Identification (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetAsync($sales_order, $sales_order_item, $doc_relationship_uuid, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'][0])
    {
        return $this->aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $doc_relationship_uuid, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetAsyncWithHttpInfo
     *
     * Reads the sales order item data for a subsequent item of a sales order.
     *
     * @param  string $sales_order Preceding sales and distribution document (required)
     * @param  string $sales_order_item Preceding Item of an SD Document (required)
     * @param  string $doc_relationship_uuid SD Unique Document Relationship Identification (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $doc_relationship_uuid, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
        $request = $this->aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetRequest($sales_order, $sales_order_item, $doc_relationship_uuid, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'
     *
     * @param  string $sales_order Preceding sales and distribution document (required)
     * @param  string $sales_order_item Preceding Item of an SD Document (required)
     * @param  string $doc_relationship_uuid SD Unique Document Relationship Identification (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGetRequest($sales_order, $sales_order_item, $doc_relationship_uuid, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'doc_relationship_uuid' is set
        if ($doc_relationship_uuid === null || (is_array($doc_relationship_uuid) && count($doc_relationship_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $doc_relationship_uuid when calling aSalesOrderItmSubsqntProcFlowSalesOrderSalesOrderSalesOrderItemSalesOrderItemDocRelationshipUUIDguidDocRelationshipUUIDToSalesOrderItemGet'
            );
        }

        
        

        $resourcePath = '/A_SalesOrderItmSubsqntProcFlow(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',DocRelationshipUUID=guid'{DocRelationshipUUID}')/to_SalesOrderItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }
        // path params
        if ($doc_relationship_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'DocRelationshipUUID' . '}',
                ObjectSerializer::toPathValue($doc_relationship_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderSalesOrderToItemGet
     *
     * Reads all items of a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\Wrapper1|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderSalesOrderToItemGet($sales_order, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderSalesOrderToItemGet'][0])
    {
        list($response) = $this->aSalesOrderSalesOrderToItemGetWithHttpInfo($sales_order, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderSalesOrderToItemGetWithHttpInfo
     *
     * Reads all items of a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\Wrapper1|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderSalesOrderToItemGetWithHttpInfo($sales_order, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderSalesOrderToItemGet'][0])
    {
        $request = $this->aSalesOrderSalesOrderToItemGetRequest($sales_order, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\Wrapper1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\Wrapper1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\Wrapper1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\Wrapper1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderSalesOrderToItemGetAsync
     *
     * Reads all items of a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderSalesOrderToItemGetAsync($sales_order, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderSalesOrderToItemGet'][0])
    {
        return $this->aSalesOrderSalesOrderToItemGetAsyncWithHttpInfo($sales_order, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderSalesOrderToItemGetAsyncWithHttpInfo
     *
     * Reads all items of a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderSalesOrderToItemGetAsyncWithHttpInfo($sales_order, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderSalesOrderToItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper1';
        $request = $this->aSalesOrderSalesOrderToItemGetRequest($sales_order, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderSalesOrderToItemGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderSalesOrderToItemGetRequest($sales_order, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderSalesOrderToItemGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderSalesOrderToItemGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderSalesOrderToItemGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SalesOrderItemApi.aSalesOrderSalesOrderToItemGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SalesOrderItemApi.aSalesOrderSalesOrderToItemGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_SalesOrder('{SalesOrder}')/to_Item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderSalesOrderToItemPost
     *
     * Creates a sales order item for a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeCreate $apisalesordersrva_sales_order_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderSalesOrderToItemPost($sales_order, $apisalesordersrva_sales_order_item_type_create, string $contentType = self::contentTypes['aSalesOrderSalesOrderToItemPost'][0])
    {
        list($response) = $this->aSalesOrderSalesOrderToItemPostWithHttpInfo($sales_order, $apisalesordersrva_sales_order_item_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderSalesOrderToItemPostWithHttpInfo
     *
     * Creates a sales order item for a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeCreate $apisalesordersrva_sales_order_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderSalesOrderToItemPostWithHttpInfo($sales_order, $apisalesordersrva_sales_order_item_type_create, string $contentType = self::contentTypes['aSalesOrderSalesOrderToItemPost'][0])
    {
        $request = $this->aSalesOrderSalesOrderToItemPostRequest($sales_order, $apisalesordersrva_sales_order_item_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderSalesOrderToItemPostAsync
     *
     * Creates a sales order item for a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeCreate $apisalesordersrva_sales_order_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderSalesOrderToItemPostAsync($sales_order, $apisalesordersrva_sales_order_item_type_create, string $contentType = self::contentTypes['aSalesOrderSalesOrderToItemPost'][0])
    {
        return $this->aSalesOrderSalesOrderToItemPostAsyncWithHttpInfo($sales_order, $apisalesordersrva_sales_order_item_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderSalesOrderToItemPostAsyncWithHttpInfo
     *
     * Creates a sales order item for a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeCreate $apisalesordersrva_sales_order_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderSalesOrderToItemPostAsyncWithHttpInfo($sales_order, $apisalesordersrva_sales_order_item_type_create, string $contentType = self::contentTypes['aSalesOrderSalesOrderToItemPost'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
        $request = $this->aSalesOrderSalesOrderToItemPostRequest($sales_order, $apisalesordersrva_sales_order_item_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderSalesOrderToItemPost'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderItemTypeCreate $apisalesordersrva_sales_order_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderSalesOrderToItemPostRequest($sales_order, $apisalesordersrva_sales_order_item_type_create, string $contentType = self::contentTypes['aSalesOrderSalesOrderToItemPost'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderSalesOrderToItemPost'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSalesOrderSalesOrderToItemPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apisalesordersrva_sales_order_item_type_create' is set
        if ($apisalesordersrva_sales_order_item_type_create === null || (is_array($apisalesordersrva_sales_order_item_type_create) && count($apisalesordersrva_sales_order_item_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apisalesordersrva_sales_order_item_type_create when calling aSalesOrderSalesOrderToItemPost'
            );
        }


        $resourcePath = '/A_SalesOrder('{SalesOrder}')/to_Item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apisalesordersrva_sales_order_item_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apisalesordersrva_sales_order_item_type_create));
            } else {
                $httpBody = $apisalesordersrva_sales_order_item_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet
     *
     * Reads the sales order item for a billing plan item of this sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $billing_plan Billing/Invoicing Plan Number (required)
     * @param  string $billing_plan_item Item for billing plan/invoice plan/payment cards (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet($sales_order, $sales_order_item, $billing_plan, $billing_plan_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet'][0])
    {
        list($response) = $this->aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $billing_plan, $billing_plan_item, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetWithHttpInfo
     *
     * Reads the sales order item for a billing plan item of this sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $billing_plan Billing/Invoicing Plan Number (required)
     * @param  string $billing_plan_item Item for billing plan/invoice plan/payment cards (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetWithHttpInfo($sales_order, $sales_order_item, $billing_plan, $billing_plan_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet'][0])
    {
        $request = $this->aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetRequest($sales_order, $sales_order_item, $billing_plan, $billing_plan_item, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetAsync
     *
     * Reads the sales order item for a billing plan item of this sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $billing_plan Billing/Invoicing Plan Number (required)
     * @param  string $billing_plan_item Item for billing plan/invoice plan/payment cards (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetAsync($sales_order, $sales_order_item, $billing_plan, $billing_plan_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet'][0])
    {
        return $this->aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $billing_plan, $billing_plan_item, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetAsyncWithHttpInfo
     *
     * Reads the sales order item for a billing plan item of this sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $billing_plan Billing/Invoicing Plan Number (required)
     * @param  string $billing_plan_item Item for billing plan/invoice plan/payment cards (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetAsyncWithHttpInfo($sales_order, $sales_order_item, $billing_plan, $billing_plan_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderItemType';
        $request = $this->aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetRequest($sales_order, $sales_order_item, $billing_plan, $billing_plan_item, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  string $billing_plan Billing/Invoicing Plan Number (required)
     * @param  string $billing_plan_item Item for billing plan/invoice plan/payment cards (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGetRequest($sales_order, $sales_order_item, $billing_plan, $billing_plan_item, $select = null, $expand = null, string $contentType = self::contentTypes['aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling SalesOrderItemApi.aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling SalesOrderItemApi.aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'billing_plan' is set
        if ($billing_plan === null || (is_array($billing_plan) && count($billing_plan) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_plan when calling aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet'
            );
        }
        if (strlen($billing_plan) > 10) {
            throw new \InvalidArgumentException('invalid length for "$billing_plan" when calling SalesOrderItemApi.aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'billing_plan_item' is set
        if ($billing_plan_item === null || (is_array($billing_plan_item) && count($billing_plan_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $billing_plan_item when calling aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet'
            );
        }
        if (strlen($billing_plan_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$billing_plan_item" when calling SalesOrderItemApi.aSlsOrderItemBillingPlanItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemBillingPlanBillingPlanBillingPlanItemBillingPlanItemToSalesOrderItemGet, must be smaller than or equal to 6.');
        }
        
        
        

        $resourcePath = '/A_SlsOrderItemBillingPlanItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',BillingPlan='{BillingPlan}',BillingPlanItem='{BillingPlanItem}')/to_SalesOrderItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }
        // path params
        if ($billing_plan !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingPlan' . '}',
                ObjectSerializer::toPathValue($billing_plan),
                $resourcePath
            );
        }
        // path params
        if ($billing_plan_item !== null) {
            $resourcePath = str_replace(
                '{' . 'BillingPlanItem' . '}',
                ObjectSerializer::toPathValue($billing_plan_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
