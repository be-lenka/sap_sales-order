<?php
/**
 * ItemScheduleLineApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\SalesOrder\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\SalesOrder\ApiException;
use BeLenka\SAP\SalesOrder\Configuration;
use BeLenka\SAP\SalesOrder\HeaderSelector;
use BeLenka\SAP\SalesOrder\ObjectSerializer;

/**
 * ItemScheduleLineApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ItemScheduleLineApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet' => [
            'application/json',
        ],
        'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost' => [
            'application/json',
        ],
        'aSalesOrderScheduleLineGet' => [
            'application/json',
        ],
        'aSalesOrderScheduleLinePost' => [
            'application/json',
        ],
        'aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete' => [
            'application/json',
        ],
        'aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet' => [
            'application/json',
        ],
        'aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet
     *
     * Reads the schedule lines of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\Wrapper16|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetWithHttpInfo($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetWithHttpInfo
     *
     * Reads the schedule lines of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\Wrapper16|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetWithHttpInfo($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetRequest($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\Wrapper16' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\Wrapper16' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\Wrapper16', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper16';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\Wrapper16',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetAsync
     *
     * Reads the schedule lines of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetAsync($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetAsyncWithHttpInfo($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetAsyncWithHttpInfo
     *
     * Reads the schedule lines of a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetAsyncWithHttpInfo($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper16';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetRequest($sales_order, $sales_order_item, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGetRequest($sales_order, $sales_order_item, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling ItemScheduleLineApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling ItemScheduleLineApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet, must be smaller than or equal to 6.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ItemScheduleLineApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ItemScheduleLineApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLineGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')/to_ScheduleLine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost
     *
     * Creates schedule lines for a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderScheduleLineTypeCreate $apisalesordersrva_sales_order_schedule_line_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'][0])
    {
        list($response) = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostWithHttpInfo
     *
     * Creates schedule lines for a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderScheduleLineTypeCreate $apisalesordersrva_sales_order_schedule_line_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'][0])
    {
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostAsync
     *
     * Creates schedule lines for a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderScheduleLineTypeCreate $apisalesordersrva_sales_order_schedule_line_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostAsync($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'][0])
    {
        return $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostAsyncWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostAsyncWithHttpInfo
     *
     * Creates schedule lines for a sales order item.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderScheduleLineTypeCreate $apisalesordersrva_sales_order_schedule_line_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostAsyncWithHttpInfo($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType';
        $request = $this->aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $sales_order_item Sales Order Item (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderScheduleLineTypeCreate $apisalesordersrva_sales_order_schedule_line_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePostRequest($sales_order, $sales_order_item, $apisalesordersrva_sales_order_schedule_line_type_create, string $contentType = self::contentTypes['aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling ItemScheduleLineApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling ItemScheduleLineApi.aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'apisalesordersrva_sales_order_schedule_line_type_create' is set
        if ($apisalesordersrva_sales_order_schedule_line_type_create === null || (is_array($apisalesordersrva_sales_order_schedule_line_type_create) && count($apisalesordersrva_sales_order_schedule_line_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apisalesordersrva_sales_order_schedule_line_type_create when calling aSalesOrderItemSalesOrderSalesOrderSalesOrderItemSalesOrderItemToScheduleLinePost'
            );
        }


        $resourcePath = '/A_SalesOrderItem(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}')/to_ScheduleLine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apisalesordersrva_sales_order_schedule_line_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apisalesordersrva_sales_order_schedule_line_type_create));
            } else {
                $httpBody = $apisalesordersrva_sales_order_schedule_line_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderScheduleLineGet
     *
     * Reads the schedule lines of all sales orders.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\Wrapper16|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderScheduleLineGet($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSalesOrderScheduleLineGet'][0])
    {
        list($response) = $this->aSalesOrderScheduleLineGetWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderScheduleLineGetWithHttpInfo
     *
     * Reads the schedule lines of all sales orders.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\Wrapper16|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderScheduleLineGetWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSalesOrderScheduleLineGet'][0])
    {
        $request = $this->aSalesOrderScheduleLineGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\Wrapper16' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\Wrapper16' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\Wrapper16', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper16';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\Wrapper16',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderScheduleLineGetAsync
     *
     * Reads the schedule lines of all sales orders.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderScheduleLineGetAsync($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSalesOrderScheduleLineGet'][0])
    {
        return $this->aSalesOrderScheduleLineGetAsyncWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderScheduleLineGetAsyncWithHttpInfo
     *
     * Reads the schedule lines of all sales orders.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderScheduleLineGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSalesOrderScheduleLineGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper16';
        $request = $this->aSalesOrderScheduleLineGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderScheduleLineGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderScheduleLineGetRequest($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSalesOrderScheduleLineGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ItemScheduleLineApi.aSalesOrderScheduleLineGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling ItemScheduleLineApi.aSalesOrderScheduleLineGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_SalesOrderScheduleLine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderScheduleLinePost
     *
     * Creates a schedule line.
     *
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderScheduleLineTypeCreate $apisalesordersrva_sales_order_schedule_line_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLinePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderScheduleLinePost($apisalesordersrva_sales_order_schedule_line_type_create, string $contentType = self::contentTypes['aSalesOrderScheduleLinePost'][0])
    {
        list($response) = $this->aSalesOrderScheduleLinePostWithHttpInfo($apisalesordersrva_sales_order_schedule_line_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderScheduleLinePostWithHttpInfo
     *
     * Creates a schedule line.
     *
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderScheduleLineTypeCreate $apisalesordersrva_sales_order_schedule_line_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLinePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderScheduleLinePostWithHttpInfo($apisalesordersrva_sales_order_schedule_line_type_create, string $contentType = self::contentTypes['aSalesOrderScheduleLinePost'][0])
    {
        $request = $this->aSalesOrderScheduleLinePostRequest($apisalesordersrva_sales_order_schedule_line_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderScheduleLinePostAsync
     *
     * Creates a schedule line.
     *
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderScheduleLineTypeCreate $apisalesordersrva_sales_order_schedule_line_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLinePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderScheduleLinePostAsync($apisalesordersrva_sales_order_schedule_line_type_create, string $contentType = self::contentTypes['aSalesOrderScheduleLinePost'][0])
    {
        return $this->aSalesOrderScheduleLinePostAsyncWithHttpInfo($apisalesordersrva_sales_order_schedule_line_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderScheduleLinePostAsyncWithHttpInfo
     *
     * Creates a schedule line.
     *
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderScheduleLineTypeCreate $apisalesordersrva_sales_order_schedule_line_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLinePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderScheduleLinePostAsyncWithHttpInfo($apisalesordersrva_sales_order_schedule_line_type_create, string $contentType = self::contentTypes['aSalesOrderScheduleLinePost'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType';
        $request = $this->aSalesOrderScheduleLinePostRequest($apisalesordersrva_sales_order_schedule_line_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderScheduleLinePost'
     *
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderScheduleLineTypeCreate $apisalesordersrva_sales_order_schedule_line_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLinePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderScheduleLinePostRequest($apisalesordersrva_sales_order_schedule_line_type_create, string $contentType = self::contentTypes['aSalesOrderScheduleLinePost'][0])
    {

        // verify the required parameter 'apisalesordersrva_sales_order_schedule_line_type_create' is set
        if ($apisalesordersrva_sales_order_schedule_line_type_create === null || (is_array($apisalesordersrva_sales_order_schedule_line_type_create) && count($apisalesordersrva_sales_order_schedule_line_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apisalesordersrva_sales_order_schedule_line_type_create when calling aSalesOrderScheduleLinePost'
            );
        }


        $resourcePath = '/A_SalesOrderScheduleLine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apisalesordersrva_sales_order_schedule_line_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apisalesordersrva_sales_order_schedule_line_type_create));
            } else {
                $httpBody = $apisalesordersrva_sales_order_schedule_line_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete
     *
     * Deletes a schedule line.
     *
     * @param  string $sales_order Sales Document (required)
     * @param  string $sales_order_item Sales Document Item (required)
     * @param  string $schedule_line Schedule Line Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete($sales_order, $sales_order_item, $schedule_line, string $contentType = self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete'][0])
    {
        $this->aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDeleteWithHttpInfo($sales_order, $sales_order_item, $schedule_line, $contentType);
    }

    /**
     * Operation aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDeleteWithHttpInfo
     *
     * Deletes a schedule line.
     *
     * @param  string $sales_order Sales Document (required)
     * @param  string $sales_order_item Sales Document Item (required)
     * @param  string $schedule_line Schedule Line Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDeleteWithHttpInfo($sales_order, $sales_order_item, $schedule_line, string $contentType = self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete'][0])
    {
        $request = $this->aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDeleteRequest($sales_order, $sales_order_item, $schedule_line, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDeleteAsync
     *
     * Deletes a schedule line.
     *
     * @param  string $sales_order Sales Document (required)
     * @param  string $sales_order_item Sales Document Item (required)
     * @param  string $schedule_line Schedule Line Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDeleteAsync($sales_order, $sales_order_item, $schedule_line, string $contentType = self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete'][0])
    {
        return $this->aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDeleteAsyncWithHttpInfo($sales_order, $sales_order_item, $schedule_line, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDeleteAsyncWithHttpInfo
     *
     * Deletes a schedule line.
     *
     * @param  string $sales_order Sales Document (required)
     * @param  string $sales_order_item Sales Document Item (required)
     * @param  string $schedule_line Schedule Line Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDeleteAsyncWithHttpInfo($sales_order, $sales_order_item, $schedule_line, string $contentType = self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete'][0])
    {
        $returnType = '';
        $request = $this->aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDeleteRequest($sales_order, $sales_order_item, $schedule_line, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete'
     *
     * @param  string $sales_order Sales Document (required)
     * @param  string $sales_order_item Sales Document Item (required)
     * @param  string $schedule_line Schedule Line Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDeleteRequest($sales_order, $sales_order_item, $schedule_line, string $contentType = self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling ItemScheduleLineApi.aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling ItemScheduleLineApi.aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'schedule_line' is set
        if ($schedule_line === null || (is_array($schedule_line) && count($schedule_line) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schedule_line when calling aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete'
            );
        }
        if (strlen($schedule_line) > 4) {
            throw new \InvalidArgumentException('invalid length for "$schedule_line" when calling ItemScheduleLineApi.aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineDelete, must be smaller than or equal to 4.');
        }
        

        $resourcePath = '/A_SalesOrderScheduleLine(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',ScheduleLine='{ScheduleLine}')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }
        // path params
        if ($schedule_line !== null) {
            $resourcePath = str_replace(
                '{' . 'ScheduleLine' . '}',
                ObjectSerializer::toPathValue($schedule_line),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet
     *
     * Reads a schedule line.
     *
     * @param  string $sales_order Sales Document (required)
     * @param  string $sales_order_item Sales Document Item (required)
     * @param  string $schedule_line Schedule Line Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet($sales_order, $sales_order_item, $schedule_line, $select = null, string $contentType = self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet'][0])
    {
        list($response) = $this->aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGetWithHttpInfo($sales_order, $sales_order_item, $schedule_line, $select, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGetWithHttpInfo
     *
     * Reads a schedule line.
     *
     * @param  string $sales_order Sales Document (required)
     * @param  string $sales_order_item Sales Document Item (required)
     * @param  string $schedule_line Schedule Line Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGetWithHttpInfo($sales_order, $sales_order_item, $schedule_line, $select = null, string $contentType = self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet'][0])
    {
        $request = $this->aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGetRequest($sales_order, $sales_order_item, $schedule_line, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGetAsync
     *
     * Reads a schedule line.
     *
     * @param  string $sales_order Sales Document (required)
     * @param  string $sales_order_item Sales Document Item (required)
     * @param  string $schedule_line Schedule Line Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGetAsync($sales_order, $sales_order_item, $schedule_line, $select = null, string $contentType = self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet'][0])
    {
        return $this->aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGetAsyncWithHttpInfo($sales_order, $sales_order_item, $schedule_line, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGetAsyncWithHttpInfo
     *
     * Reads a schedule line.
     *
     * @param  string $sales_order Sales Document (required)
     * @param  string $sales_order_item Sales Document Item (required)
     * @param  string $schedule_line Schedule Line Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGetAsyncWithHttpInfo($sales_order, $sales_order_item, $schedule_line, $select = null, string $contentType = self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderScheduleLineType';
        $request = $this->aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGetRequest($sales_order, $sales_order_item, $schedule_line, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet'
     *
     * @param  string $sales_order Sales Document (required)
     * @param  string $sales_order_item Sales Document Item (required)
     * @param  string $schedule_line Schedule Line Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGetRequest($sales_order, $sales_order_item, $schedule_line, $select = null, string $contentType = self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling ItemScheduleLineApi.aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling ItemScheduleLineApi.aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'schedule_line' is set
        if ($schedule_line === null || (is_array($schedule_line) && count($schedule_line) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schedule_line when calling aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet'
            );
        }
        if (strlen($schedule_line) > 4) {
            throw new \InvalidArgumentException('invalid length for "$schedule_line" when calling ItemScheduleLineApi.aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLineGet, must be smaller than or equal to 4.');
        }
        
        

        $resourcePath = '/A_SalesOrderScheduleLine(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',ScheduleLine='{ScheduleLine}')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }
        // path params
        if ($schedule_line !== null) {
            $resourcePath = str_replace(
                '{' . 'ScheduleLine' . '}',
                ObjectSerializer::toPathValue($schedule_line),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch
     *
     * Updates a schedule line.
     *
     * @param  string $sales_order Sales Document (required)
     * @param  string $sales_order_item Sales Document Item (required)
     * @param  string $schedule_line Schedule Line Number (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\ModifiedASalesOrderScheduleLineType $modified_a_sales_order_schedule_line_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch($sales_order, $sales_order_item, $schedule_line, $modified_a_sales_order_schedule_line_type, string $contentType = self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch'][0])
    {
        $this->aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatchWithHttpInfo($sales_order, $sales_order_item, $schedule_line, $modified_a_sales_order_schedule_line_type, $contentType);
    }

    /**
     * Operation aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatchWithHttpInfo
     *
     * Updates a schedule line.
     *
     * @param  string $sales_order Sales Document (required)
     * @param  string $sales_order_item Sales Document Item (required)
     * @param  string $schedule_line Schedule Line Number (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\ModifiedASalesOrderScheduleLineType $modified_a_sales_order_schedule_line_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatchWithHttpInfo($sales_order, $sales_order_item, $schedule_line, $modified_a_sales_order_schedule_line_type, string $contentType = self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch'][0])
    {
        $request = $this->aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatchRequest($sales_order, $sales_order_item, $schedule_line, $modified_a_sales_order_schedule_line_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatchAsync
     *
     * Updates a schedule line.
     *
     * @param  string $sales_order Sales Document (required)
     * @param  string $sales_order_item Sales Document Item (required)
     * @param  string $schedule_line Schedule Line Number (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\ModifiedASalesOrderScheduleLineType $modified_a_sales_order_schedule_line_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatchAsync($sales_order, $sales_order_item, $schedule_line, $modified_a_sales_order_schedule_line_type, string $contentType = self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch'][0])
    {
        return $this->aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatchAsyncWithHttpInfo($sales_order, $sales_order_item, $schedule_line, $modified_a_sales_order_schedule_line_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatchAsyncWithHttpInfo
     *
     * Updates a schedule line.
     *
     * @param  string $sales_order Sales Document (required)
     * @param  string $sales_order_item Sales Document Item (required)
     * @param  string $schedule_line Schedule Line Number (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\ModifiedASalesOrderScheduleLineType $modified_a_sales_order_schedule_line_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatchAsyncWithHttpInfo($sales_order, $sales_order_item, $schedule_line, $modified_a_sales_order_schedule_line_type, string $contentType = self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch'][0])
    {
        $returnType = '';
        $request = $this->aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatchRequest($sales_order, $sales_order_item, $schedule_line, $modified_a_sales_order_schedule_line_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch'
     *
     * @param  string $sales_order Sales Document (required)
     * @param  string $sales_order_item Sales Document Item (required)
     * @param  string $schedule_line Schedule Line Number (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\ModifiedASalesOrderScheduleLineType $modified_a_sales_order_schedule_line_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatchRequest($sales_order, $sales_order_item, $schedule_line, $modified_a_sales_order_schedule_line_type, string $contentType = self::contentTypes['aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling ItemScheduleLineApi.aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_order_item' is set
        if ($sales_order_item === null || (is_array($sales_order_item) && count($sales_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_item when calling aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch'
            );
        }
        if (strlen($sales_order_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$sales_order_item" when calling ItemScheduleLineApi.aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'schedule_line' is set
        if ($schedule_line === null || (is_array($schedule_line) && count($schedule_line) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schedule_line when calling aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch'
            );
        }
        if (strlen($schedule_line) > 4) {
            throw new \InvalidArgumentException('invalid length for "$schedule_line" when calling ItemScheduleLineApi.aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'modified_a_sales_order_schedule_line_type' is set
        if ($modified_a_sales_order_schedule_line_type === null || (is_array($modified_a_sales_order_schedule_line_type) && count($modified_a_sales_order_schedule_line_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_a_sales_order_schedule_line_type when calling aSalesOrderScheduleLineSalesOrderSalesOrderSalesOrderItemSalesOrderItemScheduleLineScheduleLinePatch'
            );
        }


        $resourcePath = '/A_SalesOrderScheduleLine(SalesOrder='{SalesOrder}',SalesOrderItem='{SalesOrderItem}',ScheduleLine='{ScheduleLine}')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($sales_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrderItem' . '}',
                ObjectSerializer::toPathValue($sales_order_item),
                $resourcePath
            );
        }
        // path params
        if ($schedule_line !== null) {
            $resourcePath = str_replace(
                '{' . 'ScheduleLine' . '}',
                ObjectSerializer::toPathValue($schedule_line),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modified_a_sales_order_schedule_line_type)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modified_a_sales_order_schedule_line_type));
            } else {
                $httpBody = $modified_a_sales_order_schedule_line_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
