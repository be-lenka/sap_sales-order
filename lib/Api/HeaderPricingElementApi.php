<?php
/**
 * HeaderPricingElementApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Sales Order (A2X)
 *
 * In every API call, you can make use of the following operations:   - You can read entire sales orders or only parts of the data, using the provided filters.   - You can create sales orders. You can use deep insert requests, that is, you create a header plus at least one of the following entities: header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, header related object, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object.   If the header already exists, you can create the following sub-entities on their own: header partner, header pricing element, header text, payment plan, header related object, item partner, item pricing element, item text, and item related object.   - For existing sales orders, you can create new items. You can use deep insert requests, that is, you create an item plus at least one of the following entities: item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item related object. If the item already exists, you can create the following sub-entities on their own: item partner, item pricing element, item text, item related object, and item schedule line.   - For existing sales orders, you can update the following entities (that is, you can change the content of their properties): header, header partner, header partner address, header pricing element, header billing plan, header billing plan item, header text, payment plan, item, item partner, item partner address, item pricing element, item billing plan, item billing plan item, item text, and item schedule line.   - For existing sales orders, you can delete the following entities: header, header partner, header pricing element, header billing plan item, header text, payment plan, header related object, item, item partner, item pricing element, item billing plan item, item text, item related object, and item schedule line.   - You can accept or deny approval requests for sales orders that cannot be processed without the consent of an approver.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\SalesOrder\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\SalesOrder\ApiException;
use BeLenka\SAP\SalesOrder\Configuration;
use BeLenka\SAP\SalesOrder\HeaderSelector;
use BeLenka\SAP\SalesOrder\ObjectSerializer;

/**
 * HeaderPricingElementApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\SalesOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HeaderPricingElementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aSalesOrderHeaderPrElementGet' => [
            'application/json',
        ],
        'aSalesOrderHeaderPrElementPost' => [
            'application/json',
        ],
        'aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete' => [
            'application/json',
        ],
        'aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet' => [
            'application/json',
        ],
        'aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch' => [
            'application/json',
        ],
        'aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet' => [
            'application/json',
        ],
        'aSalesOrderSalesOrderToPricingElementGet' => [
            'application/json',
        ],
        'aSalesOrderSalesOrderToPricingElementPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aSalesOrderHeaderPrElementGet
     *
     * Reads the header pricing elements of all sales orders.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\Wrapper5|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderHeaderPrElementGet($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementGet'][0])
    {
        list($response) = $this->aSalesOrderHeaderPrElementGetWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderHeaderPrElementGetWithHttpInfo
     *
     * Reads the header pricing elements of all sales orders.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\Wrapper5|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderHeaderPrElementGetWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementGet'][0])
    {
        $request = $this->aSalesOrderHeaderPrElementGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\Wrapper5' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\Wrapper5' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\Wrapper5', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper5';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\Wrapper5',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderHeaderPrElementGetAsync
     *
     * Reads the header pricing elements of all sales orders.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderHeaderPrElementGetAsync($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementGet'][0])
    {
        return $this->aSalesOrderHeaderPrElementGetAsyncWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderHeaderPrElementGetAsyncWithHttpInfo
     *
     * Reads the header pricing elements of all sales orders.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderHeaderPrElementGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper5';
        $request = $this->aSalesOrderHeaderPrElementGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderHeaderPrElementGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderHeaderPrElementGetRequest($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling HeaderPricingElementApi.aSalesOrderHeaderPrElementGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling HeaderPricingElementApi.aSalesOrderHeaderPrElementGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_SalesOrderHeaderPrElement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderHeaderPrElementPost
     *
     * Creates a header pricing element for a sales order.
     *
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderHeaderPrElementTypeCreate $apisalesordersrva_sales_order_header_pr_element_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderHeaderPrElementPost($apisalesordersrva_sales_order_header_pr_element_type_create, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementPost'][0])
    {
        list($response) = $this->aSalesOrderHeaderPrElementPostWithHttpInfo($apisalesordersrva_sales_order_header_pr_element_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderHeaderPrElementPostWithHttpInfo
     *
     * Creates a header pricing element for a sales order.
     *
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderHeaderPrElementTypeCreate $apisalesordersrva_sales_order_header_pr_element_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderHeaderPrElementPostWithHttpInfo($apisalesordersrva_sales_order_header_pr_element_type_create, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementPost'][0])
    {
        $request = $this->aSalesOrderHeaderPrElementPostRequest($apisalesordersrva_sales_order_header_pr_element_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderHeaderPrElementPostAsync
     *
     * Creates a header pricing element for a sales order.
     *
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderHeaderPrElementTypeCreate $apisalesordersrva_sales_order_header_pr_element_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderHeaderPrElementPostAsync($apisalesordersrva_sales_order_header_pr_element_type_create, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementPost'][0])
    {
        return $this->aSalesOrderHeaderPrElementPostAsyncWithHttpInfo($apisalesordersrva_sales_order_header_pr_element_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderHeaderPrElementPostAsyncWithHttpInfo
     *
     * Creates a header pricing element for a sales order.
     *
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderHeaderPrElementTypeCreate $apisalesordersrva_sales_order_header_pr_element_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderHeaderPrElementPostAsyncWithHttpInfo($apisalesordersrva_sales_order_header_pr_element_type_create, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementPost'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType';
        $request = $this->aSalesOrderHeaderPrElementPostRequest($apisalesordersrva_sales_order_header_pr_element_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderHeaderPrElementPost'
     *
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderHeaderPrElementTypeCreate $apisalesordersrva_sales_order_header_pr_element_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderHeaderPrElementPostRequest($apisalesordersrva_sales_order_header_pr_element_type_create, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementPost'][0])
    {

        // verify the required parameter 'apisalesordersrva_sales_order_header_pr_element_type_create' is set
        if ($apisalesordersrva_sales_order_header_pr_element_type_create === null || (is_array($apisalesordersrva_sales_order_header_pr_element_type_create) && count($apisalesordersrva_sales_order_header_pr_element_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apisalesordersrva_sales_order_header_pr_element_type_create when calling aSalesOrderHeaderPrElementPost'
            );
        }


        $resourcePath = '/A_SalesOrderHeaderPrElement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apisalesordersrva_sales_order_header_pr_element_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apisalesordersrva_sales_order_header_pr_element_type_create));
            } else {
                $httpBody = $apisalesordersrva_sales_order_header_pr_element_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete
     *
     * Deletes a header pricing element for a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete($sales_order, $pricing_procedure_step, $pricing_procedure_counter, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete'][0])
    {
        $this->aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDeleteWithHttpInfo($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $contentType);
    }

    /**
     * Operation aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDeleteWithHttpInfo
     *
     * Deletes a header pricing element for a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDeleteWithHttpInfo($sales_order, $pricing_procedure_step, $pricing_procedure_counter, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete'][0])
    {
        $request = $this->aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDeleteRequest($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDeleteAsync
     *
     * Deletes a header pricing element for a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDeleteAsync($sales_order, $pricing_procedure_step, $pricing_procedure_counter, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete'][0])
    {
        return $this->aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDeleteAsyncWithHttpInfo($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDeleteAsyncWithHttpInfo
     *
     * Deletes a header pricing element for a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDeleteAsyncWithHttpInfo($sales_order, $pricing_procedure_step, $pricing_procedure_counter, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete'][0])
    {
        $returnType = '';
        $request = $this->aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDeleteRequest($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDeleteRequest($sales_order, $pricing_procedure_step, $pricing_procedure_counter, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling HeaderPricingElementApi.aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'pricing_procedure_step' is set
        if ($pricing_procedure_step === null || (is_array($pricing_procedure_step) && count($pricing_procedure_step) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_procedure_step when calling aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete'
            );
        }
        if (strlen($pricing_procedure_step) > 3) {
            throw new \InvalidArgumentException('invalid length for "$pricing_procedure_step" when calling HeaderPricingElementApi.aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete, must be smaller than or equal to 3.');
        }
        
        // verify the required parameter 'pricing_procedure_counter' is set
        if ($pricing_procedure_counter === null || (is_array($pricing_procedure_counter) && count($pricing_procedure_counter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_procedure_counter when calling aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete'
            );
        }
        if (strlen($pricing_procedure_counter) > 3) {
            throw new \InvalidArgumentException('invalid length for "$pricing_procedure_counter" when calling HeaderPricingElementApi.aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterDelete, must be smaller than or equal to 3.');
        }
        

        $resourcePath = '/A_SalesOrderHeaderPrElement(SalesOrder='{SalesOrder}',PricingProcedureStep='{PricingProcedureStep}',PricingProcedureCounter='{PricingProcedureCounter}')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($pricing_procedure_step !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingProcedureStep' . '}',
                ObjectSerializer::toPathValue($pricing_procedure_step),
                $resourcePath
            );
        }
        // path params
        if ($pricing_procedure_counter !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingProcedureCounter' . '}',
                ObjectSerializer::toPathValue($pricing_procedure_counter),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet
     *
     * Reads the header pricing element for a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet'][0])
    {
        list($response) = $this->aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGetWithHttpInfo($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGetWithHttpInfo
     *
     * Reads the header pricing element for a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGetWithHttpInfo($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet'][0])
    {
        $request = $this->aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGetRequest($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGetAsync
     *
     * Reads the header pricing element for a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGetAsync($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet'][0])
    {
        return $this->aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGetAsyncWithHttpInfo($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGetAsyncWithHttpInfo
     *
     * Reads the header pricing element for a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGetAsyncWithHttpInfo($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType';
        $request = $this->aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGetRequest($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGetRequest($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling HeaderPricingElementApi.aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'pricing_procedure_step' is set
        if ($pricing_procedure_step === null || (is_array($pricing_procedure_step) && count($pricing_procedure_step) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_procedure_step when calling aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet'
            );
        }
        if (strlen($pricing_procedure_step) > 3) {
            throw new \InvalidArgumentException('invalid length for "$pricing_procedure_step" when calling HeaderPricingElementApi.aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet, must be smaller than or equal to 3.');
        }
        
        // verify the required parameter 'pricing_procedure_counter' is set
        if ($pricing_procedure_counter === null || (is_array($pricing_procedure_counter) && count($pricing_procedure_counter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_procedure_counter when calling aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet'
            );
        }
        if (strlen($pricing_procedure_counter) > 3) {
            throw new \InvalidArgumentException('invalid length for "$pricing_procedure_counter" when calling HeaderPricingElementApi.aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterGet, must be smaller than or equal to 3.');
        }
        
        
        

        $resourcePath = '/A_SalesOrderHeaderPrElement(SalesOrder='{SalesOrder}',PricingProcedureStep='{PricingProcedureStep}',PricingProcedureCounter='{PricingProcedureCounter}')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($pricing_procedure_step !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingProcedureStep' . '}',
                ObjectSerializer::toPathValue($pricing_procedure_step),
                $resourcePath
            );
        }
        // path params
        if ($pricing_procedure_counter !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingProcedureCounter' . '}',
                ObjectSerializer::toPathValue($pricing_procedure_counter),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch
     *
     * Updates a header pricing element for a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\ModifiedASalesOrderHeaderPrElementType $modified_a_sales_order_header_pr_element_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $modified_a_sales_order_header_pr_element_type, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch'][0])
    {
        $this->aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatchWithHttpInfo($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $modified_a_sales_order_header_pr_element_type, $contentType);
    }

    /**
     * Operation aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatchWithHttpInfo
     *
     * Updates a header pricing element for a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\ModifiedASalesOrderHeaderPrElementType $modified_a_sales_order_header_pr_element_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatchWithHttpInfo($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $modified_a_sales_order_header_pr_element_type, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch'][0])
    {
        $request = $this->aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatchRequest($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $modified_a_sales_order_header_pr_element_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatchAsync
     *
     * Updates a header pricing element for a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\ModifiedASalesOrderHeaderPrElementType $modified_a_sales_order_header_pr_element_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatchAsync($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $modified_a_sales_order_header_pr_element_type, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch'][0])
    {
        return $this->aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatchAsyncWithHttpInfo($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $modified_a_sales_order_header_pr_element_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatchAsyncWithHttpInfo
     *
     * Updates a header pricing element for a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\ModifiedASalesOrderHeaderPrElementType $modified_a_sales_order_header_pr_element_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatchAsyncWithHttpInfo($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $modified_a_sales_order_header_pr_element_type, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch'][0])
    {
        $returnType = '';
        $request = $this->aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatchRequest($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $modified_a_sales_order_header_pr_element_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\ModifiedASalesOrderHeaderPrElementType $modified_a_sales_order_header_pr_element_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatchRequest($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $modified_a_sales_order_header_pr_element_type, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling HeaderPricingElementApi.aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'pricing_procedure_step' is set
        if ($pricing_procedure_step === null || (is_array($pricing_procedure_step) && count($pricing_procedure_step) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_procedure_step when calling aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch'
            );
        }
        if (strlen($pricing_procedure_step) > 3) {
            throw new \InvalidArgumentException('invalid length for "$pricing_procedure_step" when calling HeaderPricingElementApi.aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch, must be smaller than or equal to 3.');
        }
        
        // verify the required parameter 'pricing_procedure_counter' is set
        if ($pricing_procedure_counter === null || (is_array($pricing_procedure_counter) && count($pricing_procedure_counter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_procedure_counter when calling aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch'
            );
        }
        if (strlen($pricing_procedure_counter) > 3) {
            throw new \InvalidArgumentException('invalid length for "$pricing_procedure_counter" when calling HeaderPricingElementApi.aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch, must be smaller than or equal to 3.');
        }
        
        // verify the required parameter 'modified_a_sales_order_header_pr_element_type' is set
        if ($modified_a_sales_order_header_pr_element_type === null || (is_array($modified_a_sales_order_header_pr_element_type) && count($modified_a_sales_order_header_pr_element_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_a_sales_order_header_pr_element_type when calling aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterPatch'
            );
        }


        $resourcePath = '/A_SalesOrderHeaderPrElement(SalesOrder='{SalesOrder}',PricingProcedureStep='{PricingProcedureStep}',PricingProcedureCounter='{PricingProcedureCounter}')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($pricing_procedure_step !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingProcedureStep' . '}',
                ObjectSerializer::toPathValue($pricing_procedure_step),
                $resourcePath
            );
        }
        // path params
        if ($pricing_procedure_counter !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingProcedureCounter' . '}',
                ObjectSerializer::toPathValue($pricing_procedure_counter),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modified_a_sales_order_header_pr_element_type)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modified_a_sales_order_header_pr_element_type));
            } else {
                $httpBody = $modified_a_sales_order_header_pr_element_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet
     *
     * Reads the sales order header for a pricing element.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet'][0])
    {
        list($response) = $this->aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGetWithHttpInfo($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGetWithHttpInfo
     *
     * Reads the sales order header for a pricing element.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGetWithHttpInfo($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet'][0])
    {
        $request = $this->aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGetRequest($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGetAsync
     *
     * Reads the sales order header for a pricing element.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGetAsync($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet'][0])
    {
        return $this->aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGetAsyncWithHttpInfo($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGetAsyncWithHttpInfo
     *
     * Reads the sales order header for a pricing element.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGetAsyncWithHttpInfo($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderType';
        $request = $this->aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGetRequest($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGetRequest($sales_order, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling HeaderPricingElementApi.aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'pricing_procedure_step' is set
        if ($pricing_procedure_step === null || (is_array($pricing_procedure_step) && count($pricing_procedure_step) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_procedure_step when calling aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet'
            );
        }
        if (strlen($pricing_procedure_step) > 3) {
            throw new \InvalidArgumentException('invalid length for "$pricing_procedure_step" when calling HeaderPricingElementApi.aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet, must be smaller than or equal to 3.');
        }
        
        // verify the required parameter 'pricing_procedure_counter' is set
        if ($pricing_procedure_counter === null || (is_array($pricing_procedure_counter) && count($pricing_procedure_counter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_procedure_counter when calling aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet'
            );
        }
        if (strlen($pricing_procedure_counter) > 3) {
            throw new \InvalidArgumentException('invalid length for "$pricing_procedure_counter" when calling HeaderPricingElementApi.aSalesOrderHeaderPrElementSalesOrderSalesOrderPricingProcedureStepPricingProcedureStepPricingProcedureCounterPricingProcedureCounterToSalesOrderGet, must be smaller than or equal to 3.');
        }
        
        
        

        $resourcePath = '/A_SalesOrderHeaderPrElement(SalesOrder='{SalesOrder}',PricingProcedureStep='{PricingProcedureStep}',PricingProcedureCounter='{PricingProcedureCounter}')/to_SalesOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }
        // path params
        if ($pricing_procedure_step !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingProcedureStep' . '}',
                ObjectSerializer::toPathValue($pricing_procedure_step),
                $resourcePath
            );
        }
        // path params
        if ($pricing_procedure_counter !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingProcedureCounter' . '}',
                ObjectSerializer::toPathValue($pricing_procedure_counter),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderSalesOrderToPricingElementGet
     *
     * Reads the pricing element of a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToPricingElementGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\Wrapper5|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderSalesOrderToPricingElementGet($sales_order, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderSalesOrderToPricingElementGet'][0])
    {
        list($response) = $this->aSalesOrderSalesOrderToPricingElementGetWithHttpInfo($sales_order, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderSalesOrderToPricingElementGetWithHttpInfo
     *
     * Reads the pricing element of a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToPricingElementGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\Wrapper5|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderSalesOrderToPricingElementGetWithHttpInfo($sales_order, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderSalesOrderToPricingElementGet'][0])
    {
        $request = $this->aSalesOrderSalesOrderToPricingElementGetRequest($sales_order, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\SalesOrder\Model\Wrapper5' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\Wrapper5' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\Wrapper5', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper5';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\Wrapper5',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderSalesOrderToPricingElementGetAsync
     *
     * Reads the pricing element of a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToPricingElementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderSalesOrderToPricingElementGetAsync($sales_order, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderSalesOrderToPricingElementGet'][0])
    {
        return $this->aSalesOrderSalesOrderToPricingElementGetAsyncWithHttpInfo($sales_order, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderSalesOrderToPricingElementGetAsyncWithHttpInfo
     *
     * Reads the pricing element of a sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToPricingElementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderSalesOrderToPricingElementGetAsyncWithHttpInfo($sales_order, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderSalesOrderToPricingElementGet'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\Wrapper5';
        $request = $this->aSalesOrderSalesOrderToPricingElementGetRequest($sales_order, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderSalesOrderToPricingElementGet'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToPricingElementGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderSalesOrderToPricingElementGetRequest($sales_order, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aSalesOrderSalesOrderToPricingElementGet'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderSalesOrderToPricingElementGet'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling HeaderPricingElementApi.aSalesOrderSalesOrderToPricingElementGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling HeaderPricingElementApi.aSalesOrderSalesOrderToPricingElementGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling HeaderPricingElementApi.aSalesOrderSalesOrderToPricingElementGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_SalesOrder('{SalesOrder}')/to_PricingElement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSalesOrderSalesOrderToPricingElementPost
     *
     * Creates a header pricing element for a specific sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderHeaderPrElementTypeCreate $apisalesordersrva_sales_order_header_pr_element_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToPricingElementPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType|\BeLenka\SAP\SalesOrder\Model\Error
     */
    public function aSalesOrderSalesOrderToPricingElementPost($sales_order, $apisalesordersrva_sales_order_header_pr_element_type_create, string $contentType = self::contentTypes['aSalesOrderSalesOrderToPricingElementPost'][0])
    {
        list($response) = $this->aSalesOrderSalesOrderToPricingElementPostWithHttpInfo($sales_order, $apisalesordersrva_sales_order_header_pr_element_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aSalesOrderSalesOrderToPricingElementPostWithHttpInfo
     *
     * Creates a header pricing element for a specific sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderHeaderPrElementTypeCreate $apisalesordersrva_sales_order_header_pr_element_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToPricingElementPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\SalesOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType|\BeLenka\SAP\SalesOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSalesOrderSalesOrderToPricingElementPostWithHttpInfo($sales_order, $apisalesordersrva_sales_order_header_pr_element_type_create, string $contentType = self::contentTypes['aSalesOrderSalesOrderToPricingElementPost'][0])
    {
        $request = $this->aSalesOrderSalesOrderToPricingElementPostRequest($sales_order, $apisalesordersrva_sales_order_header_pr_element_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSalesOrderSalesOrderToPricingElementPostAsync
     *
     * Creates a header pricing element for a specific sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderHeaderPrElementTypeCreate $apisalesordersrva_sales_order_header_pr_element_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToPricingElementPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderSalesOrderToPricingElementPostAsync($sales_order, $apisalesordersrva_sales_order_header_pr_element_type_create, string $contentType = self::contentTypes['aSalesOrderSalesOrderToPricingElementPost'][0])
    {
        return $this->aSalesOrderSalesOrderToPricingElementPostAsyncWithHttpInfo($sales_order, $apisalesordersrva_sales_order_header_pr_element_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSalesOrderSalesOrderToPricingElementPostAsyncWithHttpInfo
     *
     * Creates a header pricing element for a specific sales order.
     *
     * @param  string $sales_order Sales Order (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderHeaderPrElementTypeCreate $apisalesordersrva_sales_order_header_pr_element_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToPricingElementPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSalesOrderSalesOrderToPricingElementPostAsyncWithHttpInfo($sales_order, $apisalesordersrva_sales_order_header_pr_element_type_create, string $contentType = self::contentTypes['aSalesOrderSalesOrderToPricingElementPost'][0])
    {
        $returnType = '\BeLenka\SAP\SalesOrder\Model\ASalesOrderHeaderPrElementType';
        $request = $this->aSalesOrderSalesOrderToPricingElementPostRequest($sales_order, $apisalesordersrva_sales_order_header_pr_element_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSalesOrderSalesOrderToPricingElementPost'
     *
     * @param  string $sales_order Sales Order (required)
     * @param  \BeLenka\SAP\SalesOrder\Model\APISALESORDERSRVASalesOrderHeaderPrElementTypeCreate $apisalesordersrva_sales_order_header_pr_element_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSalesOrderSalesOrderToPricingElementPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSalesOrderSalesOrderToPricingElementPostRequest($sales_order, $apisalesordersrva_sales_order_header_pr_element_type_create, string $contentType = self::contentTypes['aSalesOrderSalesOrderToPricingElementPost'][0])
    {

        // verify the required parameter 'sales_order' is set
        if ($sales_order === null || (is_array($sales_order) && count($sales_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order when calling aSalesOrderSalesOrderToPricingElementPost'
            );
        }
        if (strlen($sales_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$sales_order" when calling HeaderPricingElementApi.aSalesOrderSalesOrderToPricingElementPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apisalesordersrva_sales_order_header_pr_element_type_create' is set
        if ($apisalesordersrva_sales_order_header_pr_element_type_create === null || (is_array($apisalesordersrva_sales_order_header_pr_element_type_create) && count($apisalesordersrva_sales_order_header_pr_element_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apisalesordersrva_sales_order_header_pr_element_type_create when calling aSalesOrderSalesOrderToPricingElementPost'
            );
        }


        $resourcePath = '/A_SalesOrder('{SalesOrder}')/to_PricingElement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($sales_order !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrder' . '}',
                ObjectSerializer::toPathValue($sales_order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apisalesordersrva_sales_order_header_pr_element_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apisalesordersrva_sales_order_header_pr_element_type_create));
            } else {
                $httpBody = $apisalesordersrva_sales_order_header_pr_element_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
